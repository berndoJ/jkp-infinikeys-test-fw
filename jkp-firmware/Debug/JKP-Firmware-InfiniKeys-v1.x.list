
JKP-Firmware-InfiniKeys-v1.x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08003ae0  08003ae0  00013ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c1c  08003c1c  00013c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ac  20000000  08003c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a74  200001ac  08003dcc  000201ac  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000c20  08003dcc  00020c20  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
  9 .debug_info   000300e4  00000000  00000000  000201d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005d68  00000000  00000000  000502b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d1f0  00000000  00000000  00056021  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000011a0  00000000  00000000  00063218  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000019d0  00000000  00000000  000643b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c719  00000000  00000000  00065d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006399  00000000  00000000  000724a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007883a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003274  00000000  00000000  000788b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ac 	.word	0x200001ac
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ac8 	.word	0x08003ac8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001b0 	.word	0x200001b0
 8000148:	08003ac8 	.word	0x08003ac8

0800014c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800014c:	4a07      	ldr	r2, [pc, #28]	; (800016c <HAL_Init+0x20>)
{
 800014e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000152:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	f043 0310 	orr.w	r3, r3, #16
 8000158:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015a:	f000 f82d 	bl	80001b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800015e:	2000      	movs	r0, #0
 8000160:	f002 fdfa 	bl	8002d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000164:	f002 fd66 	bl	8002c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000168:	2000      	movs	r0, #0
 800016a:	bd08      	pop	{r3, pc}
 800016c:	40022000 	.word	0x40022000

08000170 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000170:	4a03      	ldr	r2, [pc, #12]	; (8000180 <HAL_IncTick+0x10>)
 8000172:	4b04      	ldr	r3, [pc, #16]	; (8000184 <HAL_IncTick+0x14>)
 8000174:	6811      	ldr	r1, [r2, #0]
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	440b      	add	r3, r1
 800017a:	6013      	str	r3, [r2, #0]
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop
 8000180:	20000294 	.word	0x20000294
 8000184:	20000000 	.word	0x20000000

08000188 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000188:	4b01      	ldr	r3, [pc, #4]	; (8000190 <HAL_GetTick+0x8>)
 800018a:	6818      	ldr	r0, [r3, #0]
}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	20000294 	.word	0x20000294

08000194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000194:	b538      	push	{r3, r4, r5, lr}
 8000196:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000198:	f7ff fff6 	bl	8000188 <HAL_GetTick>
 800019c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800019e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001a0:	bf1e      	ittt	ne
 80001a2:	4b04      	ldrne	r3, [pc, #16]	; (80001b4 <HAL_Delay+0x20>)
 80001a4:	781b      	ldrbne	r3, [r3, #0]
 80001a6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001a8:	f7ff ffee 	bl	8000188 <HAL_GetTick>
 80001ac:	1b40      	subs	r0, r0, r5
 80001ae:	4284      	cmp	r4, r0
 80001b0:	d8fa      	bhi.n	80001a8 <HAL_Delay+0x14>
  {
  }
}
 80001b2:	bd38      	pop	{r3, r4, r5, pc}
 80001b4:	20000000 	.word	0x20000000

080001b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001b8:	4a07      	ldr	r2, [pc, #28]	; (80001d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ba:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001bc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001c6:	041b      	lsls	r3, r3, #16
 80001c8:	0c1b      	lsrs	r3, r3, #16
 80001ca:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001d2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001d4:	60d3      	str	r3, [r2, #12]
 80001d6:	4770      	bx	lr
 80001d8:	e000ed00 	.word	0xe000ed00

080001dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001dc:	4b17      	ldr	r3, [pc, #92]	; (800023c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001de:	b530      	push	{r4, r5, lr}
 80001e0:	68dc      	ldr	r4, [r3, #12]
 80001e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001ec:	2b04      	cmp	r3, #4
 80001ee:	bf28      	it	cs
 80001f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001f2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001f4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001f8:	bf98      	it	ls
 80001fa:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001fc:	fa05 f303 	lsl.w	r3, r5, r3
 8000200:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000204:	bf88      	it	hi
 8000206:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000208:	4019      	ands	r1, r3
 800020a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800020c:	fa05 f404 	lsl.w	r4, r5, r4
 8000210:	3c01      	subs	r4, #1
 8000212:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000214:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000216:	ea42 0201 	orr.w	r2, r2, r1
 800021a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021e:	bfaf      	iteee	ge
 8000220:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	4b06      	ldrlt	r3, [pc, #24]	; (8000240 <HAL_NVIC_SetPriority+0x64>)
 8000226:	f000 000f 	andlt.w	r0, r0, #15
 800022a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022c:	bfa5      	ittet	ge
 800022e:	b2d2      	uxtbge	r2, r2
 8000230:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000236:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800023a:	bd30      	pop	{r4, r5, pc}
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	e000ed14 	.word	0xe000ed14

08000244 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000244:	2301      	movs	r3, #1
 8000246:	0942      	lsrs	r2, r0, #5
 8000248:	f000 001f 	and.w	r0, r0, #31
 800024c:	fa03 f000 	lsl.w	r0, r3, r0
 8000250:	4b01      	ldr	r3, [pc, #4]	; (8000258 <HAL_NVIC_EnableIRQ+0x14>)
 8000252:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000256:	4770      	bx	lr
 8000258:	e000e100 	.word	0xe000e100

0800025c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800025c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000260:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000262:	4616      	mov	r6, r2
 8000264:	4b62      	ldr	r3, [pc, #392]	; (80003f0 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000266:	f8df e19c 	ldr.w	lr, [pc, #412]	; 8000404 <HAL_GPIO_Init+0x1a8>
 800026a:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8000408 <HAL_GPIO_Init+0x1ac>
    ioposition = (0x01U << position);
 800026e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000272:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000274:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000278:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800027c:	45a0      	cmp	r8, r4
 800027e:	d17b      	bne.n	8000378 <HAL_GPIO_Init+0x11c>
      switch (GPIO_Init->Mode)
 8000280:	684d      	ldr	r5, [r1, #4]
 8000282:	2d12      	cmp	r5, #18
 8000284:	f000 80ab 	beq.w	80003de <HAL_GPIO_Init+0x182>
 8000288:	f200 8084 	bhi.w	8000394 <HAL_GPIO_Init+0x138>
 800028c:	2d02      	cmp	r5, #2
 800028e:	f000 80a3 	beq.w	80003d8 <HAL_GPIO_Init+0x17c>
 8000292:	d878      	bhi.n	8000386 <HAL_GPIO_Init+0x12a>
 8000294:	2d00      	cmp	r5, #0
 8000296:	f000 808a 	beq.w	80003ae <HAL_GPIO_Init+0x152>
 800029a:	2d01      	cmp	r5, #1
 800029c:	f000 809a 	beq.w	80003d4 <HAL_GPIO_Init+0x178>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002a0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002a4:	2cff      	cmp	r4, #255	; 0xff
 80002a6:	bf93      	iteet	ls
 80002a8:	4682      	movls	sl, r0
 80002aa:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80002ae:	3d08      	subhi	r5, #8
 80002b0:	f8d0 b000 	ldrls.w	fp, [r0]
 80002b4:	bf92      	itee	ls
 80002b6:	00b5      	lslls	r5, r6, #2
 80002b8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80002bc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002be:	fa09 f805 	lsl.w	r8, r9, r5
 80002c2:	ea2b 0808 	bic.w	r8, fp, r8
 80002c6:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002ca:	bf88      	it	hi
 80002cc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002d0:	ea48 0505 	orr.w	r5, r8, r5
 80002d4:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80002d8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80002dc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80002e0:	d04a      	beq.n	8000378 <HAL_GPIO_Init+0x11c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80002e2:	4d44      	ldr	r5, [pc, #272]	; (80003f4 <HAL_GPIO_Init+0x198>)
 80002e4:	4f43      	ldr	r7, [pc, #268]	; (80003f4 <HAL_GPIO_Init+0x198>)
 80002e6:	69ad      	ldr	r5, [r5, #24]
 80002e8:	f026 0803 	bic.w	r8, r6, #3
 80002ec:	f045 0501 	orr.w	r5, r5, #1
 80002f0:	61bd      	str	r5, [r7, #24]
 80002f2:	69bd      	ldr	r5, [r7, #24]
 80002f4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80002f8:	f005 0501 	and.w	r5, r5, #1
 80002fc:	9501      	str	r5, [sp, #4]
 80002fe:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000302:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000306:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000308:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800030c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000310:	fa09 f90b 	lsl.w	r9, r9, fp
 8000314:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000318:	4d37      	ldr	r5, [pc, #220]	; (80003f8 <HAL_GPIO_Init+0x19c>)
 800031a:	42a8      	cmp	r0, r5
 800031c:	d064      	beq.n	80003e8 <HAL_GPIO_Init+0x18c>
 800031e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000322:	42a8      	cmp	r0, r5
 8000324:	d062      	beq.n	80003ec <HAL_GPIO_Init+0x190>
 8000326:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800032a:	42a8      	cmp	r0, r5
 800032c:	bf0c      	ite	eq
 800032e:	2502      	moveq	r5, #2
 8000330:	2503      	movne	r5, #3
 8000332:	fa05 f50b 	lsl.w	r5, r5, fp
 8000336:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800033a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800033e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000340:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000344:	bf14      	ite	ne
 8000346:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000348:	43a5      	biceq	r5, r4
 800034a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800034c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800034e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000352:	bf14      	ite	ne
 8000354:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000356:	43a5      	biceq	r5, r4
 8000358:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800035a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800035c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000360:	bf14      	ite	ne
 8000362:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000364:	43a5      	biceq	r5, r4
 8000366:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000368:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800036a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800036e:	bf14      	ite	ne
 8000370:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000372:	ea25 0404 	biceq.w	r4, r5, r4
 8000376:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000378:	3601      	adds	r6, #1
 800037a:	2e10      	cmp	r6, #16
 800037c:	f47f af77 	bne.w	800026e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000380:	b003      	add	sp, #12
 8000382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000386:	2d03      	cmp	r5, #3
 8000388:	d022      	beq.n	80003d0 <HAL_GPIO_Init+0x174>
 800038a:	2d11      	cmp	r5, #17
 800038c:	d188      	bne.n	80002a0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800038e:	68ca      	ldr	r2, [r1, #12]
 8000390:	3204      	adds	r2, #4
          break;
 8000392:	e785      	b.n	80002a0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000394:	4f19      	ldr	r7, [pc, #100]	; (80003fc <HAL_GPIO_Init+0x1a0>)
 8000396:	42bd      	cmp	r5, r7
 8000398:	d009      	beq.n	80003ae <HAL_GPIO_Init+0x152>
 800039a:	d812      	bhi.n	80003c2 <HAL_GPIO_Init+0x166>
 800039c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800040c <HAL_GPIO_Init+0x1b0>
 80003a0:	454d      	cmp	r5, r9
 80003a2:	d004      	beq.n	80003ae <HAL_GPIO_Init+0x152>
 80003a4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80003a8:	454d      	cmp	r5, r9
 80003aa:	f47f af79 	bne.w	80002a0 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80003ae:	688a      	ldr	r2, [r1, #8]
 80003b0:	b1c2      	cbz	r2, 80003e4 <HAL_GPIO_Init+0x188>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80003b2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80003b4:	bf0c      	ite	eq
 80003b6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80003ba:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003be:	2208      	movs	r2, #8
 80003c0:	e76e      	b.n	80002a0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003c2:	4f0f      	ldr	r7, [pc, #60]	; (8000400 <HAL_GPIO_Init+0x1a4>)
 80003c4:	42bd      	cmp	r5, r7
 80003c6:	d0f2      	beq.n	80003ae <HAL_GPIO_Init+0x152>
 80003c8:	4575      	cmp	r5, lr
 80003ca:	d0f0      	beq.n	80003ae <HAL_GPIO_Init+0x152>
 80003cc:	4565      	cmp	r5, ip
 80003ce:	e7ec      	b.n	80003aa <HAL_GPIO_Init+0x14e>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80003d0:	2200      	movs	r2, #0
 80003d2:	e765      	b.n	80002a0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80003d4:	68ca      	ldr	r2, [r1, #12]
          break;
 80003d6:	e763      	b.n	80002a0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80003d8:	68ca      	ldr	r2, [r1, #12]
 80003da:	3208      	adds	r2, #8
          break;
 80003dc:	e760      	b.n	80002a0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80003de:	68ca      	ldr	r2, [r1, #12]
 80003e0:	320c      	adds	r2, #12
          break;
 80003e2:	e75d      	b.n	80002a0 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80003e4:	2204      	movs	r2, #4
 80003e6:	e75b      	b.n	80002a0 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003e8:	2500      	movs	r5, #0
 80003ea:	e7a2      	b.n	8000332 <HAL_GPIO_Init+0xd6>
 80003ec:	2501      	movs	r5, #1
 80003ee:	e7a0      	b.n	8000332 <HAL_GPIO_Init+0xd6>
 80003f0:	40010400 	.word	0x40010400
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40010800 	.word	0x40010800
 80003fc:	10210000 	.word	0x10210000
 8000400:	10310000 	.word	0x10310000
 8000404:	10320000 	.word	0x10320000
 8000408:	10220000 	.word	0x10220000
 800040c:	10110000 	.word	0x10110000

08000410 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000410:	6883      	ldr	r3, [r0, #8]
 8000412:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000414:	bf14      	ite	ne
 8000416:	2001      	movne	r0, #1
 8000418:	2000      	moveq	r0, #0
 800041a:	4770      	bx	lr

0800041c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800041c:	b10a      	cbz	r2, 8000422 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800041e:	6101      	str	r1, [r0, #16]
 8000420:	4770      	bx	lr
 8000422:	0409      	lsls	r1, r1, #16
 8000424:	e7fb      	b.n	800041e <HAL_GPIO_WritePin+0x2>

08000426 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000426:	6802      	ldr	r2, [r0, #0]
 8000428:	6953      	ldr	r3, [r2, #20]
 800042a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800042e:	d00d      	beq.n	800044c <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000430:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000434:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000436:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000438:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800043a:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800043c:	2300      	movs	r3, #0
 800043e:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000440:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000444:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8000448:	2001      	movs	r0, #1
 800044a:	4770      	bx	lr
  }
  return HAL_OK;
 800044c:	4618      	mov	r0, r3
}
 800044e:	4770      	bx	lr

08000450 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000454:	4604      	mov	r4, r0
 8000456:	4617      	mov	r7, r2
 8000458:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800045a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800045e:	b28e      	uxth	r6, r1
 8000460:	6825      	ldr	r5, [r4, #0]
 8000462:	f1b8 0f01 	cmp.w	r8, #1
 8000466:	bf0c      	ite	eq
 8000468:	696b      	ldreq	r3, [r5, #20]
 800046a:	69ab      	ldrne	r3, [r5, #24]
 800046c:	ea36 0303 	bics.w	r3, r6, r3
 8000470:	bf14      	ite	ne
 8000472:	2001      	movne	r0, #1
 8000474:	2000      	moveq	r0, #0
 8000476:	b908      	cbnz	r0, 800047c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800047c:	696b      	ldr	r3, [r5, #20]
 800047e:	055a      	lsls	r2, r3, #21
 8000480:	d512      	bpl.n	80004a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000482:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8000484:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800048a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800048c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000490:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000492:	2304      	movs	r3, #4
 8000494:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000496:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000498:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 800049a:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800049c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80004a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80004a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80004a8:	1c7b      	adds	r3, r7, #1
 80004aa:	d0d9      	beq.n	8000460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80004ac:	b94f      	cbnz	r7, 80004c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80004ae:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80004b0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80004b2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80004b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80004b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80004bc:	2003      	movs	r0, #3
 80004be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80004c2:	f7ff fe61 	bl	8000188 <HAL_GetTick>
 80004c6:	eba0 0009 	sub.w	r0, r0, r9
 80004ca:	4287      	cmp	r7, r0
 80004cc:	d2c8      	bcs.n	8000460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80004ce:	e7ee      	b.n	80004ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080004d0 <I2C_WaitOnFlagUntilTimeout>:
{
 80004d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004d4:	4604      	mov	r4, r0
 80004d6:	4690      	mov	r8, r2
 80004d8:	461f      	mov	r7, r3
 80004da:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80004dc:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80004e0:	b28d      	uxth	r5, r1
 80004e2:	6823      	ldr	r3, [r4, #0]
 80004e4:	f1b9 0f01 	cmp.w	r9, #1
 80004e8:	bf0c      	ite	eq
 80004ea:	695b      	ldreq	r3, [r3, #20]
 80004ec:	699b      	ldrne	r3, [r3, #24]
 80004ee:	ea35 0303 	bics.w	r3, r5, r3
 80004f2:	bf0c      	ite	eq
 80004f4:	2301      	moveq	r3, #1
 80004f6:	2300      	movne	r3, #0
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d002      	beq.n	8000502 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80004fc:	2000      	movs	r0, #0
}
 80004fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000502:	1c7b      	adds	r3, r7, #1
 8000504:	d0ed      	beq.n	80004e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000506:	b95f      	cbnz	r7, 8000520 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000508:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800050a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800050c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800050e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000512:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000516:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000518:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800051c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000520:	f7ff fe32 	bl	8000188 <HAL_GetTick>
 8000524:	1b80      	subs	r0, r0, r6
 8000526:	4287      	cmp	r7, r0
 8000528:	d2db      	bcs.n	80004e2 <I2C_WaitOnFlagUntilTimeout+0x12>
 800052a:	e7ed      	b.n	8000508 <I2C_WaitOnFlagUntilTimeout+0x38>

0800052c <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800052c:	b570      	push	{r4, r5, r6, lr}
 800052e:	4604      	mov	r4, r0
 8000530:	460d      	mov	r5, r1
 8000532:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000534:	6823      	ldr	r3, [r4, #0]
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	061b      	lsls	r3, r3, #24
 800053a:	d501      	bpl.n	8000540 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800053c:	2000      	movs	r0, #0
 800053e:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000540:	4620      	mov	r0, r4
 8000542:	f7ff ff70 	bl	8000426 <I2C_IsAcknowledgeFailed>
 8000546:	b9a8      	cbnz	r0, 8000574 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000548:	1c6a      	adds	r2, r5, #1
 800054a:	d0f3      	beq.n	8000534 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800054c:	b965      	cbnz	r5, 8000568 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800054e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000550:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000558:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 800055a:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800055c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800055e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000562:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000566:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000568:	f7ff fe0e 	bl	8000188 <HAL_GetTick>
 800056c:	1b80      	subs	r0, r0, r6
 800056e:	4285      	cmp	r5, r0
 8000570:	d2e0      	bcs.n	8000534 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000572:	e7ec      	b.n	800054e <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000574:	2001      	movs	r0, #1
}
 8000576:	bd70      	pop	{r4, r5, r6, pc}

08000578 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	4604      	mov	r4, r0
 800057c:	460d      	mov	r5, r1
 800057e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000580:	6823      	ldr	r3, [r4, #0]
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	075b      	lsls	r3, r3, #29
 8000586:	d501      	bpl.n	800058c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000588:	2000      	movs	r0, #0
 800058a:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800058c:	4620      	mov	r0, r4
 800058e:	f7ff ff4a 	bl	8000426 <I2C_IsAcknowledgeFailed>
 8000592:	b9a8      	cbnz	r0, 80005c0 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000594:	1c6a      	adds	r2, r5, #1
 8000596:	d0f3      	beq.n	8000580 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000598:	b965      	cbnz	r5, 80005b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800059a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800059c:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800059e:	f043 0320 	orr.w	r3, r3, #32
 80005a2:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80005a4:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80005a6:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80005a8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80005aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80005ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005b4:	f7ff fde8 	bl	8000188 <HAL_GetTick>
 80005b8:	1b80      	subs	r0, r0, r6
 80005ba:	4285      	cmp	r5, r0
 80005bc:	d2e0      	bcs.n	8000580 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80005be:	e7ec      	b.n	800059a <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80005c0:	2001      	movs	r0, #1
}
 80005c2:	bd70      	pop	{r4, r5, r6, pc}

080005c4 <HAL_I2C_Init>:
{
 80005c4:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 80005c6:	4604      	mov	r4, r0
 80005c8:	b908      	cbnz	r0, 80005ce <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80005ca:	2001      	movs	r0, #1
 80005cc:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80005ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80005d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80005d6:	b91b      	cbnz	r3, 80005e0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80005d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80005dc:	f002 fb4c 	bl	8002c78 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80005e0:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80005e2:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80005e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80005e8:	6813      	ldr	r3, [r2, #0]
 80005ea:	f023 0301 	bic.w	r3, r3, #1
 80005ee:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80005f0:	f000 ff92 	bl	8001518 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80005f4:	6863      	ldr	r3, [r4, #4]
 80005f6:	4a2f      	ldr	r2, [pc, #188]	; (80006b4 <HAL_I2C_Init+0xf0>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d830      	bhi.n	800065e <HAL_I2C_Init+0x9a>
 80005fc:	4a2e      	ldr	r2, [pc, #184]	; (80006b8 <HAL_I2C_Init+0xf4>)
 80005fe:	4290      	cmp	r0, r2
 8000600:	d9e3      	bls.n	80005ca <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000602:	4a2e      	ldr	r2, [pc, #184]	; (80006bc <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8000604:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000606:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800060a:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800060c:	3201      	adds	r2, #1
 800060e:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000610:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <HAL_I2C_Init+0xf0>)
 8000612:	3801      	subs	r0, #1
 8000614:	4293      	cmp	r3, r2
 8000616:	d832      	bhi.n	800067e <HAL_I2C_Init+0xba>
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	fbb0 f0f3 	udiv	r0, r0, r3
 800061e:	1c43      	adds	r3, r0, #1
 8000620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000624:	2b04      	cmp	r3, #4
 8000626:	bf38      	it	cc
 8000628:	2304      	movcc	r3, #4
 800062a:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800062c:	6a22      	ldr	r2, [r4, #32]
 800062e:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000630:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000632:	4313      	orrs	r3, r2
 8000634:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000636:	68e2      	ldr	r2, [r4, #12]
 8000638:	6923      	ldr	r3, [r4, #16]
 800063a:	4313      	orrs	r3, r2
 800063c:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800063e:	69a2      	ldr	r2, [r4, #24]
 8000640:	6963      	ldr	r3, [r4, #20]
 8000642:	4313      	orrs	r3, r2
 8000644:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000646:	680b      	ldr	r3, [r1, #0]
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800064e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000650:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000652:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000656:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000658:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800065c:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800065e:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <HAL_I2C_Init+0xfc>)
 8000660:	4290      	cmp	r0, r2
 8000662:	d9b2      	bls.n	80005ca <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000664:	4d15      	ldr	r5, [pc, #84]	; (80006bc <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000666:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800066a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 800066e:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000670:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8000672:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000674:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000678:	fbb2 f2f5 	udiv	r2, r2, r5
 800067c:	e7c6      	b.n	800060c <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800067e:	68a2      	ldr	r2, [r4, #8]
 8000680:	b952      	cbnz	r2, 8000698 <HAL_I2C_Init+0xd4>
 8000682:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000686:	fbb0 f0f3 	udiv	r0, r0, r3
 800068a:	1c43      	adds	r3, r0, #1
 800068c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000690:	b16b      	cbz	r3, 80006ae <HAL_I2C_Init+0xea>
 8000692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000696:	e7c8      	b.n	800062a <HAL_I2C_Init+0x66>
 8000698:	2219      	movs	r2, #25
 800069a:	4353      	muls	r3, r2
 800069c:	fbb0 f0f3 	udiv	r0, r0, r3
 80006a0:	1c43      	adds	r3, r0, #1
 80006a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006a6:	b113      	cbz	r3, 80006ae <HAL_I2C_Init+0xea>
 80006a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ac:	e7bd      	b.n	800062a <HAL_I2C_Init+0x66>
 80006ae:	2301      	movs	r3, #1
 80006b0:	e7bb      	b.n	800062a <HAL_I2C_Init+0x66>
 80006b2:	bf00      	nop
 80006b4:	000186a0 	.word	0x000186a0
 80006b8:	001e847f 	.word	0x001e847f
 80006bc:	000f4240 	.word	0x000f4240
 80006c0:	003d08ff 	.word	0x003d08ff

080006c4 <HAL_I2C_Master_Transmit>:
{
 80006c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80006c8:	4604      	mov	r4, r0
 80006ca:	461f      	mov	r7, r3
 80006cc:	460d      	mov	r5, r1
 80006ce:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80006d0:	f7ff fd5a 	bl	8000188 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80006d4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80006d8:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80006da:	2b20      	cmp	r3, #32
 80006dc:	d004      	beq.n	80006e8 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80006de:	2502      	movs	r5, #2
}
 80006e0:	4628      	mov	r0, r5
 80006e2:	b004      	add	sp, #16
 80006e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80006e8:	9000      	str	r0, [sp, #0]
 80006ea:	2319      	movs	r3, #25
 80006ec:	2201      	movs	r2, #1
 80006ee:	495d      	ldr	r1, [pc, #372]	; (8000864 <HAL_I2C_Master_Transmit+0x1a0>)
 80006f0:	4620      	mov	r0, r4
 80006f2:	f7ff feed 	bl	80004d0 <I2C_WaitOnFlagUntilTimeout>
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d1f1      	bne.n	80006de <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80006fa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d0ed      	beq.n	80006de <HAL_I2C_Master_Transmit+0x1a>
 8000702:	2301      	movs	r3, #1
 8000704:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000708:	6823      	ldr	r3, [r4, #0]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800070e:	bf5e      	ittt	pl
 8000710:	681a      	ldrpl	r2, [r3, #0]
 8000712:	f042 0201 	orrpl.w	r2, r2, #1
 8000716:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800071e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000720:	2221      	movs	r2, #33	; 0x21
 8000722:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000726:	2210      	movs	r2, #16
 8000728:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800072c:	2200      	movs	r2, #0
 800072e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000730:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8000734:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000736:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000738:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800073a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800073e:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000740:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000742:	2a04      	cmp	r2, #4
 8000744:	d004      	beq.n	8000750 <HAL_I2C_Master_Transmit+0x8c>
 8000746:	2a01      	cmp	r2, #1
 8000748:	d002      	beq.n	8000750 <HAL_I2C_Master_Transmit+0x8c>
 800074a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800074e:	d104      	bne.n	800075a <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	e002      	b.n	8000760 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800075a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800075c:	2a12      	cmp	r2, #18
 800075e:	d0f7      	beq.n	8000750 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000760:	9600      	str	r6, [sp, #0]
 8000762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000764:	2200      	movs	r2, #0
 8000766:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800076a:	4620      	mov	r0, r4
 800076c:	f7ff feb0 	bl	80004d0 <I2C_WaitOnFlagUntilTimeout>
 8000770:	bb28      	cbnz	r0, 80007be <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000772:	6923      	ldr	r3, [r4, #16]
 8000774:	6822      	ldr	r2, [r4, #0]
 8000776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800077a:	d112      	bne.n	80007a2 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800077c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000780:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000782:	4633      	mov	r3, r6
 8000784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000786:	4938      	ldr	r1, [pc, #224]	; (8000868 <HAL_I2C_Master_Transmit+0x1a4>)
 8000788:	4620      	mov	r0, r4
 800078a:	f7ff fe61 	bl	8000450 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800078e:	4605      	mov	r5, r0
 8000790:	b9a0      	cbnz	r0, 80007bc <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000792:	6823      	ldr	r3, [r4, #0]
 8000794:	9003      	str	r0, [sp, #12]
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	9203      	str	r2, [sp, #12]
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	9303      	str	r3, [sp, #12]
 800079e:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 80007a0:	e050      	b.n	8000844 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80007a2:	11eb      	asrs	r3, r5, #7
 80007a4:	f003 0306 	and.w	r3, r3, #6
 80007a8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80007ac:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80007ae:	492f      	ldr	r1, [pc, #188]	; (800086c <HAL_I2C_Master_Transmit+0x1a8>)
 80007b0:	4633      	mov	r3, r6
 80007b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80007b4:	4620      	mov	r0, r4
 80007b6:	f7ff fe4b 	bl	8000450 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80007ba:	b148      	cbz	r0, 80007d0 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80007bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80007be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	f04f 0300 	mov.w	r3, #0
 80007c6:	d107      	bne.n	80007d8 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 80007c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80007cc:	2501      	movs	r5, #1
 80007ce:	e787      	b.n	80006e0 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	b2ed      	uxtb	r5, r5
 80007d4:	611d      	str	r5, [r3, #16]
 80007d6:	e7d4      	b.n	8000782 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 80007d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80007dc:	2503      	movs	r5, #3
 80007de:	e77f      	b.n	80006e0 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007e0:	4632      	mov	r2, r6
 80007e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80007e4:	4620      	mov	r0, r4
 80007e6:	f7ff fea1 	bl	800052c <I2C_WaitOnTXEFlagUntilTimeout>
 80007ea:	b140      	cbz	r0, 80007fe <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80007ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	d1f4      	bne.n	80007dc <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80007f2:	6822      	ldr	r2, [r4, #0]
 80007f4:	6813      	ldr	r3, [r2, #0]
 80007f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	e7e6      	b.n	80007cc <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80007fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000800:	6820      	ldr	r0, [r4, #0]
 8000802:	1c4b      	adds	r3, r1, #1
 8000804:	6263      	str	r3, [r4, #36]	; 0x24
 8000806:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8000808:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800080a:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 800080c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800080e:	3b01      	subs	r3, #1
 8000810:	b29b      	uxth	r3, r3
 8000812:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000814:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000816:	1e53      	subs	r3, r2, #1
 8000818:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800081a:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 800081c:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800081e:	d50a      	bpl.n	8000836 <HAL_I2C_Master_Transmit+0x172>
 8000820:	b14b      	cbz	r3, 8000836 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000822:	1c8b      	adds	r3, r1, #2
 8000824:	6263      	str	r3, [r4, #36]	; 0x24
 8000826:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8000828:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800082a:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 800082c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800082e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000830:	3b01      	subs	r3, #1
 8000832:	b29b      	uxth	r3, r3
 8000834:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000836:	4632      	mov	r2, r6
 8000838:	990a      	ldr	r1, [sp, #40]	; 0x28
 800083a:	4620      	mov	r0, r4
 800083c:	f7ff fe9c 	bl	8000578 <I2C_WaitOnBTFFlagUntilTimeout>
 8000840:	2800      	cmp	r0, #0
 8000842:	d1d3      	bne.n	80007ec <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8000844:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1ca      	bne.n	80007e0 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800084a:	6821      	ldr	r1, [r4, #0]
 800084c:	680a      	ldr	r2, [r1, #0]
 800084e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000852:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000854:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000856:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800085a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800085e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000862:	e73d      	b.n	80006e0 <HAL_I2C_Master_Transmit+0x1c>
 8000864:	00100002 	.word	0x00100002
 8000868:	00010002 	.word	0x00010002
 800086c:	00010008 	.word	0x00010008

08000870 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000874:	4604      	mov	r4, r0
{
 8000876:	b086      	sub	sp, #24
  if(hpcd == NULL)
 8000878:	2800      	cmp	r0, #0
 800087a:	d060      	beq.n	800093e <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800087c:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8000880:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000884:	b91b      	cbnz	r3, 800088e <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000886:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800088a:	f002 fb1d 	bl	8002ec8 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800088e:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000890:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000892:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8000894:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000898:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 800089c:	f001 f8ce 	bl	8001a3c <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80008a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008a4:	682b      	ldr	r3, [r5, #0]
 80008a6:	f104 0804 	add.w	r8, r4, #4
 80008aa:	6033      	str	r3, [r6, #0]
 80008ac:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80008b0:	6820      	ldr	r0, [r4, #0]
 80008b2:	f001 f8b3 	bl	8001a1c <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80008b6:	2100      	movs	r1, #0
 80008b8:	6820      	ldr	r0, [r4, #0]
 80008ba:	f001 f8c9 	bl	8001a50 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80008be:	2100      	movs	r1, #0
 80008c0:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80008c2:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80008c4:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80008c6:	4608      	mov	r0, r1
 80008c8:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 80008cc:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 80008d0:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 80008d2:	3101      	adds	r1, #1
 80008d4:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 80008d6:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80008da:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 80008de:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 80008e0:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 80008e2:	6410      	str	r0, [r2, #64]	; 0x40
 80008e4:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 80008e8:	d1f0      	bne.n	80008cc <HAL_PCD_Init+0x5c>
 80008ea:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 80008ec:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 80008ee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 80008f2:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 80008f4:	3201      	adds	r2, #1
 80008f6:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 80008f8:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80008fc:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000900:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000904:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000908:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 800090c:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8000910:	d1ed      	bne.n	80008ee <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000912:	466e      	mov	r6, sp
 8000914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000916:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000918:	682b      	ldr	r3, [r5, #0]
 800091a:	6033      	str	r3, [r6, #0]
 800091c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000920:	6820      	ldr	r0, [r4, #0]
 8000922:	f001 f897 	bl	8001a54 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 8000926:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000928:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 800092c:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 800092e:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 8000932:	f001 fb67 	bl	8002004 <USB_DevDisconnect>
  return HAL_OK;
 8000936:	2000      	movs	r0, #0
}
 8000938:	b006      	add	sp, #24
 800093a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800093e:	2001      	movs	r0, #1
 8000940:	e7fa      	b.n	8000938 <HAL_PCD_Init+0xc8>

08000942 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000942:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000946:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000948:	2b01      	cmp	r3, #1
{
 800094a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800094c:	d00e      	beq.n	800096c <HAL_PCD_Start+0x2a>
 800094e:	2101      	movs	r1, #1
 8000950:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000954:	f002 fbd5 	bl	8003102 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000958:	6820      	ldr	r0, [r4, #0]
 800095a:	f001 fb51 	bl	8002000 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800095e:	6820      	ldr	r0, [r4, #0]
 8000960:	f001 f863 	bl	8001a2a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000964:	2000      	movs	r0, #0
 8000966:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 800096a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800096c:	2002      	movs	r0, #2
}
 800096e:	bd10      	pop	{r4, pc}

08000970 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000970:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 8000974:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000976:	2a01      	cmp	r2, #1
{
 8000978:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800097a:	d00b      	beq.n	8000994 <HAL_PCD_SetAddress+0x24>
 800097c:	2201      	movs	r2, #1
 800097e:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8000982:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8000986:	6800      	ldr	r0, [r0, #0]
 8000988:	f001 fb34 	bl	8001ff4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800098c:	2000      	movs	r0, #0
 800098e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8000992:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000994:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000996:	bd10      	pop	{r4, pc}

08000998 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000998:	b538      	push	{r3, r4, r5, lr}
 800099a:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 800099c:	b248      	sxtb	r0, r1
 800099e:	2800      	cmp	r0, #0
 80009a0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80009a4:	bfb5      	itete	lt
 80009a6:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80009aa:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80009ae:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80009b0:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80009b4:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 80009b6:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 80009b8:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80009ba:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 80009bc:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 80009c0:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d009      	beq.n	80009da <HAL_PCD_EP_Open+0x42>
 80009c6:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80009c8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80009ca:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80009ce:	f001 f85d 	bl	8001a8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 80009d8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80009da:	2002      	movs	r0, #2
}
 80009dc:	bd38      	pop	{r3, r4, r5, pc}

080009de <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80009de:	b24b      	sxtb	r3, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80009e6:	bfb5      	itete	lt
 80009e8:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80009ec:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80009f0:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80009f2:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80009f6:	0fdb      	lsrs	r3, r3, #31
{  
 80009f8:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 80009fa:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 80009fc:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 80009fe:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 8000a02:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d009      	beq.n	8000a1c <HAL_PCD_EP_Close+0x3e>
 8000a08:	2301      	movs	r3, #1
 8000a0a:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000a0e:	6800      	ldr	r0, [r0, #0]
 8000a10:	f001 f9ae 	bl	8001d70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000a1a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000a1c:	2002      	movs	r0, #2
}
 8000a1e:	bd10      	pop	{r4, pc}

08000a20 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000a20:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000a22:	2600      	movs	r6, #0
 8000a24:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000a28:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000a2a:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000a2c:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000a30:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000a34:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000a36:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000a3a:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000a3e:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 8000a42:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 8000a46:	6800      	ldr	r0, [r0, #0]
 8000a48:	f001 faf6 	bl	8002038 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000a4c:	4630      	mov	r0, r6
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}

08000a50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000a50:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000a58:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8000a5a:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8000a5c:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000a5e:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 8000a60:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000a64:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000a68:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000a6a:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000a6c:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000a6e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 8000a72:	6800      	ldr	r0, [r0, #0]
 8000a74:	f001 fae0 	bl	8002038 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000a78:	4630      	mov	r0, r6
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}

08000a7c <HAL_PCD_IRQHandler>:
{ 
 8000a7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000a82:	6800      	ldr	r0, [r0, #0]
 8000a84:	f001 fac0 	bl	8002008 <USB_ReadInterrupts>
 8000a88:	0400      	lsls	r0, r0, #16
 8000a8a:	f100 8098 	bmi.w	8000bbe <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000a8e:	6820      	ldr	r0, [r4, #0]
 8000a90:	f001 faba 	bl	8002008 <USB_ReadInterrupts>
 8000a94:	0541      	lsls	r1, r0, #21
 8000a96:	d50f      	bpl.n	8000ab8 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a98:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000a9a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a9c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000aa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000aa4:	041b      	lsls	r3, r3, #16
 8000aa6:	0c1b      	lsrs	r3, r3, #16
 8000aa8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000aac:	f002 fa43 	bl	8002f36 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f7ff ff5c 	bl	8000970 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000ab8:	6820      	ldr	r0, [r4, #0]
 8000aba:	f001 faa5 	bl	8002008 <USB_ReadInterrupts>
 8000abe:	0447      	lsls	r7, r0, #17
 8000ac0:	d508      	bpl.n	8000ad4 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000ac2:	6822      	ldr	r2, [r4, #0]
 8000ac4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ac8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000acc:	041b      	lsls	r3, r3, #16
 8000ace:	0c1b      	lsrs	r3, r3, #16
 8000ad0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000ad4:	6820      	ldr	r0, [r4, #0]
 8000ad6:	f001 fa97 	bl	8002008 <USB_ReadInterrupts>
 8000ada:	0486      	lsls	r6, r0, #18
 8000adc:	d508      	bpl.n	8000af0 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000ade:	6822      	ldr	r2, [r4, #0]
 8000ae0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ae4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ae8:	041b      	lsls	r3, r3, #16
 8000aea:	0c1b      	lsrs	r3, r3, #16
 8000aec:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000af0:	6820      	ldr	r0, [r4, #0]
 8000af2:	f001 fa89 	bl	8002008 <USB_ReadInterrupts>
 8000af6:	04c5      	lsls	r5, r0, #19
 8000af8:	d51c      	bpl.n	8000b34 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000afa:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000afc:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000afe:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000b02:	f023 0304 	bic.w	r3, r3, #4
 8000b06:	041b      	lsls	r3, r3, #16
 8000b08:	0c1b      	lsrs	r3, r3, #16
 8000b0a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000b0e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000b12:	f023 0308 	bic.w	r3, r3, #8
 8000b16:	041b      	lsls	r3, r3, #16
 8000b18:	0c1b      	lsrs	r3, r3, #16
 8000b1a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000b1e:	f002 fa2d 	bl	8002f7c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000b22:	6822      	ldr	r2, [r4, #0]
 8000b24:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b2c:	041b      	lsls	r3, r3, #16
 8000b2e:	0c1b      	lsrs	r3, r3, #16
 8000b30:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000b34:	6820      	ldr	r0, [r4, #0]
 8000b36:	f001 fa67 	bl	8002008 <USB_ReadInterrupts>
 8000b3a:	0500      	lsls	r0, r0, #20
 8000b3c:	d51d      	bpl.n	8000b7a <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000b3e:	6820      	ldr	r0, [r4, #0]
 8000b40:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	f043 0308 	orr.w	r3, r3, #8
 8000b4a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000b4e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b56:	041b      	lsls	r3, r3, #16
 8000b58:	0c1b      	lsrs	r3, r3, #16
 8000b5a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000b5e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000b6c:	f001 fa4c 	bl	8002008 <USB_ReadInterrupts>
 8000b70:	04c1      	lsls	r1, r0, #19
 8000b72:	d402      	bmi.n	8000b7a <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 8000b74:	4620      	mov	r0, r4
 8000b76:	f002 f9f1 	bl	8002f5c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000b7a:	6820      	ldr	r0, [r4, #0]
 8000b7c:	f001 fa44 	bl	8002008 <USB_ReadInterrupts>
 8000b80:	0582      	lsls	r2, r0, #22
 8000b82:	d50b      	bpl.n	8000b9c <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000b84:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000b86:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000b88:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b90:	041b      	lsls	r3, r3, #16
 8000b92:	0c1b      	lsrs	r3, r3, #16
 8000b94:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000b98:	f002 f9c9 	bl	8002f2e <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000b9c:	6820      	ldr	r0, [r4, #0]
 8000b9e:	f001 fa33 	bl	8002008 <USB_ReadInterrupts>
 8000ba2:	05c3      	lsls	r3, r0, #23
 8000ba4:	d508      	bpl.n	8000bb8 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000ba6:	6822      	ldr	r2, [r4, #0]
 8000ba8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bb0:	041b      	lsls	r3, r3, #16
 8000bb2:	0c1b      	lsrs	r3, r3, #16
 8000bb4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000bb8:	b002      	add	sp, #8
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000bbe:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000bc0:	4fc8      	ldr	r7, [pc, #800]	; (8000ee4 <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000bc2:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000ee8 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000bc6:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000eec <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8000bca:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000bce:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000bd2:	6820      	ldr	r0, [r4, #0]
 8000bd4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000bde:	041b      	lsls	r3, r3, #16
 8000be0:	f57f af55 	bpl.w	8000a8e <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000be4:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000be8:	f015 050f 	ands.w	r5, r5, #15
 8000bec:	f040 80ab 	bne.w	8000d46 <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000bf0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000bf4:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000bf6:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000bfa:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000bfc:	d126      	bne.n	8000c4c <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000bfe:	403b      	ands	r3, r7
 8000c00:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c02:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000c06:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000c10:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000c14:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000c18:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c1e:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000c20:	4413      	add	r3, r2
 8000c22:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000c24:	4620      	mov	r0, r4
 8000c26:	f002 f97b 	bl	8002f20 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000c2a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0cf      	beq.n	8000bd2 <HAL_PCD_IRQHandler+0x156>
 8000c32:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	d1cc      	bne.n	8000bd2 <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000c38:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000c3c:	6821      	ldr	r1, [r4, #0]
 8000c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c42:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000c46:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000c4a:	e7c2      	b.n	8000bd2 <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000c4c:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000c50:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000c54:	051a      	lsls	r2, r3, #20
 8000c56:	d51f      	bpl.n	8000c98 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000c58:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000c5c:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000c66:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000c6a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000c6e:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c76:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000c7a:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000c7e:	f001 fadb 	bl	8002238 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000c82:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000c84:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000c86:	8813      	ldrh	r3, [r2, #0]
 8000c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c8c:	051b      	lsls	r3, r3, #20
 8000c8e:	0d1b      	lsrs	r3, r3, #20
 8000c90:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000c92:	f002 f937 	bl	8002f04 <HAL_PCD_SetupStageCallback>
 8000c96:	e79c      	b.n	8000bd2 <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000c98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000c9c:	041b      	lsls	r3, r3, #16
 8000c9e:	d598      	bpl.n	8000bd2 <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ca0:	8803      	ldrh	r3, [r0, #0]
 8000ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ca6:	051b      	lsls	r3, r3, #20
 8000ca8:	0d1b      	lsrs	r3, r3, #20
 8000caa:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000cac:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000cb0:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000cba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000cbe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000cc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cc6:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000cca:	b163      	cbz	r3, 8000ce6 <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000ccc:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000cd0:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8000cd4:	f001 fab0 	bl	8002238 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000cd8:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000cdc:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000ce0:	4413      	add	r3, r2
 8000ce2:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f002 f911 	bl	8002f10 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000cee:	6822      	ldr	r2, [r4, #0]
 8000cf0:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8000cf4:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000cf8:	2d3e      	cmp	r5, #62	; 0x3e
 8000cfa:	b289      	uxth	r1, r1
 8000cfc:	f101 0106 	add.w	r1, r1, #6
 8000d00:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000d04:	d917      	bls.n	8000d36 <HAL_PCD_IRQHandler+0x2ba>
 8000d06:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000d0a:	06ee      	lsls	r6, r5, #27
 8000d0c:	bf04      	itt	eq
 8000d0e:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000d12:	b29b      	uxtheq	r3, r3
 8000d14:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000d1e:	8813      	ldrh	r3, [r2, #0]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	ea03 0308 	and.w	r3, r3, r8
 8000d26:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d32:	8013      	strh	r3, [r2, #0]
 8000d34:	e74d      	b.n	8000bd2 <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000d36:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000d3a:	07ed      	lsls	r5, r5, #31
 8000d3c:	bf44      	itt	mi
 8000d3e:	3301      	addmi	r3, #1
 8000d40:	b29b      	uxthmi	r3, r3
 8000d42:	029b      	lsls	r3, r3, #10
 8000d44:	e7e8      	b.n	8000d18 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000d46:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000d50:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d54:	0419      	lsls	r1, r3, #16
 8000d56:	d53f      	bpl.n	8000dd8 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000d58:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000d5c:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d64:	051b      	lsls	r3, r3, #20
 8000d66:	0d1b      	lsrs	r3, r3, #20
 8000d68:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000d6c:	eb04 010a 	add.w	r1, r4, sl
 8000d70:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d174      	bne.n	8000e62 <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d78:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000d7c:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	3306      	adds	r3, #6
 8000d84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000d88:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d8c:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000d90:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8000d94:	b136      	cbz	r6, 8000da4 <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000d96:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000d9a:	4633      	mov	r3, r6
 8000d9c:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000da0:	f001 fa4a 	bl	8002238 <USB_ReadPMA>
 8000da4:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8000da8:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000dac:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000db0:	4433      	add	r3, r6
 8000db2:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000db6:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000dba:	4432      	add	r2, r6
 8000dbc:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000dc0:	b123      	cbz	r3, 8000dcc <HAL_PCD_IRQHandler+0x350>
 8000dc2:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000dc6:	4286      	cmp	r6, r0
 8000dc8:	f080 8086 	bcs.w	8000ed8 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000dcc:	44a2      	add	sl, r4
 8000dce:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f002 f89c 	bl	8002f10 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000dd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000ddc:	061a      	lsls	r2, r3, #24
 8000dde:	f57f aef8 	bpl.w	8000bd2 <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000de2:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000de4:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000de6:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000dea:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	403b      	ands	r3, r7
 8000df0:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000df4:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000df8:	3502      	adds	r5, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d178      	bne.n	8000ef0 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000dfe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000e02:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	3302      	adds	r3, #2
 8000e0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000e0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000e12:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000e16:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000e1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e1e:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000e20:	b11b      	cbz	r3, 8000e2a <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000e22:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000e24:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000e26:	f001 f8f5 	bl	8002014 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000e2a:	6822      	ldr	r2, [r4, #0]
 8000e2c:	4426      	add	r6, r4
 8000e2e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000e32:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	3302      	adds	r3, #2
 8000e3a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000e3e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000e42:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000e46:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000e48:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000e4c:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000e4e:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000e50:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000e52:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000e54:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f040 8085 	bne.w	8000f66 <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000e5c:	f002 f860 	bl	8002f20 <HAL_PCD_DataInStageCallback>
 8000e60:	e6b7      	b.n	8000bd2 <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000e62:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000e66:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000e70:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000e74:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000e76:	d021      	beq.n	8000ebc <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000e78:	3202      	adds	r2, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000e80:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000e84:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000e88:	b136      	cbz	r6, 8000e98 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000e8a:	4633      	mov	r3, r6
 8000e8c:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000e90:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000e94:	f001 f9d0 	bl	8002238 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000e98:	eb04 030a 	add.w	r3, r4, sl
 8000e9c:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000ea0:	6822      	ldr	r2, [r4, #0]
 8000ea2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000eaa:	051b      	lsls	r3, r3, #20
 8000eac:	0d1b      	lsrs	r3, r3, #20
 8000eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000eb6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000eba:	e773      	b.n	8000da4 <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000ebc:	3206      	adds	r2, #6
 8000ebe:	4413      	add	r3, r2
 8000ec0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ec4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000ec8:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d0e3      	beq.n	8000e98 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000ed0:	4633      	mov	r3, r6
 8000ed2:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000ed6:	e7db      	b.n	8000e90 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000ed8:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000edc:	4620      	mov	r0, r4
 8000ede:	f7ff fd9f 	bl	8000a20 <HAL_PCD_EP_Receive>
 8000ee2:	e779      	b.n	8000dd8 <HAL_PCD_IRQHandler+0x35c>
 8000ee4:	ffff8f0f 	.word	0xffff8f0f
 8000ee8:	ffffbf8f 	.word	0xffffbf8f
 8000eec:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000ef0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000ef4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000efe:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000f02:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000f04:	d020      	beq.n	8000f48 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f06:	3202      	adds	r2, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f0e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000f12:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000f16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f1a:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000f1c:	b11b      	cbz	r3, 8000f26 <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000f1e:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000f20:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000f22:	f001 f877 	bl	8002014 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000f26:	19a3      	adds	r3, r4, r6
 8000f28:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000f2c:	6822      	ldr	r2, [r4, #0]
 8000f2e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f36:	051b      	lsls	r3, r3, #20
 8000f38:	0d1b      	lsrs	r3, r3, #20
 8000f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f42:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000f46:	e770      	b.n	8000e2a <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000f48:	3206      	adds	r2, #6
 8000f4a:	4413      	add	r3, r2
 8000f4c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f50:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000f54:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f5c:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0e1      	beq.n	8000f26 <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000f62:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000f64:	e7dc      	b.n	8000f20 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000f66:	f7ff fd73 	bl	8000a50 <HAL_PCD_EP_Transmit>
 8000f6a:	e632      	b.n	8000bd2 <HAL_PCD_IRQHandler+0x156>

08000f6c <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000f6c:	2201      	movs	r2, #1
{
 8000f6e:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000f70:	b24b      	sxtb	r3, r1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000f78:	bfb5      	itete	lt
 8000f7a:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000f7e:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000f82:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000f84:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000f88:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000f8a:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8000f8c:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000f8e:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000f90:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000f92:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000f96:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d00e      	beq.n	8000fba <HAL_PCD_EP_SetStall+0x4e>
 8000f9c:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000fa0:	6800      	ldr	r0, [r0, #0]
 8000fa2:	f000 ffb3 	bl	8001f0c <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000fa6:	b925      	cbnz	r5, 8000fb2 <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000fa8:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000fac:	6820      	ldr	r0, [r4, #0]
 8000fae:	f001 f82f 	bl	8002010 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000fb8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000fba:	2002      	movs	r0, #2
}
 8000fbc:	bd38      	pop	{r3, r4, r5, pc}

08000fbe <HAL_PCD_EP_ClrStall>:
{
 8000fbe:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000fc0:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000fc2:	b24b      	sxtb	r3, r1
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000fca:	bfb5      	itete	lt
 8000fcc:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000fd0:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000fd4:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000fd6:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000fda:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000fdc:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000fde:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000fe0:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000fe2:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000fe6:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d009      	beq.n	8001000 <HAL_PCD_EP_ClrStall+0x42>
 8000fec:	2301      	movs	r3, #1
 8000fee:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000ff2:	6800      	ldr	r0, [r0, #0]
 8000ff4:	f000 ffbc 	bl	8001f70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000ff8:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001000:	2002      	movs	r0, #2
}
 8001002:	bd38      	pop	{r3, r4, r5, pc}

08001004 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001004:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001008:	bf1b      	ittet	ne
 800100a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800100e:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001012:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001016:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001018:	bf08      	it	eq
 800101a:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800101e:	b91a      	cbnz	r2, 8001028 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8001020:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001022:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8001024:	2000      	movs	r0, #0
 8001026:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001028:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 800102a:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 800102c:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 800102e:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001030:	8103      	strh	r3, [r0, #8]
 8001032:	e7f7      	b.n	8001024 <HAL_PCDEx_PMAConfig+0x20>

08001034 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001034:	6803      	ldr	r3, [r0, #0]
{
 8001036:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103a:	07db      	lsls	r3, r3, #31
{
 800103c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103e:	d410      	bmi.n	8001062 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001040:	682b      	ldr	r3, [r5, #0]
 8001042:	079f      	lsls	r7, r3, #30
 8001044:	d45e      	bmi.n	8001104 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001046:	682b      	ldr	r3, [r5, #0]
 8001048:	0719      	lsls	r1, r3, #28
 800104a:	f100 8095 	bmi.w	8001178 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800104e:	682b      	ldr	r3, [r5, #0]
 8001050:	075a      	lsls	r2, r3, #29
 8001052:	f100 80bf 	bmi.w	80011d4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001056:	69ea      	ldr	r2, [r5, #28]
 8001058:	2a00      	cmp	r2, #0
 800105a:	f040 812d 	bne.w	80012b8 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800105e:	2000      	movs	r0, #0
 8001060:	e014      	b.n	800108c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001062:	4c90      	ldr	r4, [pc, #576]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001064:	6863      	ldr	r3, [r4, #4]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b04      	cmp	r3, #4
 800106c:	d007      	beq.n	800107e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800106e:	6863      	ldr	r3, [r4, #4]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	2b08      	cmp	r3, #8
 8001076:	d10c      	bne.n	8001092 <HAL_RCC_OscConfig+0x5e>
 8001078:	6863      	ldr	r3, [r4, #4]
 800107a:	03de      	lsls	r6, r3, #15
 800107c:	d509      	bpl.n	8001092 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	039c      	lsls	r4, r3, #14
 8001082:	d5dd      	bpl.n	8001040 <HAL_RCC_OscConfig+0xc>
 8001084:	686b      	ldr	r3, [r5, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1da      	bne.n	8001040 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800108a:	2001      	movs	r0, #1
}
 800108c:	b002      	add	sp, #8
 800108e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001092:	686b      	ldr	r3, [r5, #4]
 8001094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001098:	d110      	bne.n	80010bc <HAL_RCC_OscConfig+0x88>
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010a2:	f7ff f871 	bl	8000188 <HAL_GetTick>
 80010a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	0398      	lsls	r0, r3, #14
 80010ac:	d4c8      	bmi.n	8001040 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ae:	f7ff f86b 	bl	8000188 <HAL_GetTick>
 80010b2:	1b80      	subs	r0, r0, r6
 80010b4:	2864      	cmp	r0, #100	; 0x64
 80010b6:	d9f7      	bls.n	80010a8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80010b8:	2003      	movs	r0, #3
 80010ba:	e7e7      	b.n	800108c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010bc:	b99b      	cbnz	r3, 80010e6 <HAL_RCC_OscConfig+0xb2>
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c4:	6023      	str	r3, [r4, #0]
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010ce:	f7ff f85b 	bl	8000188 <HAL_GetTick>
 80010d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	0399      	lsls	r1, r3, #14
 80010d8:	d5b2      	bpl.n	8001040 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010da:	f7ff f855 	bl	8000188 <HAL_GetTick>
 80010de:	1b80      	subs	r0, r0, r6
 80010e0:	2864      	cmp	r0, #100	; 0x64
 80010e2:	d9f7      	bls.n	80010d4 <HAL_RCC_OscConfig+0xa0>
 80010e4:	e7e8      	b.n	80010b8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	d103      	bne.n	80010f6 <HAL_RCC_OscConfig+0xc2>
 80010ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f2:	6023      	str	r3, [r4, #0]
 80010f4:	e7d1      	b.n	800109a <HAL_RCC_OscConfig+0x66>
 80010f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fa:	6023      	str	r3, [r4, #0]
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001102:	e7cd      	b.n	80010a0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001104:	4c67      	ldr	r4, [pc, #412]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001106:	6863      	ldr	r3, [r4, #4]
 8001108:	f013 0f0c 	tst.w	r3, #12
 800110c:	d007      	beq.n	800111e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800110e:	6863      	ldr	r3, [r4, #4]
 8001110:	f003 030c 	and.w	r3, r3, #12
 8001114:	2b08      	cmp	r3, #8
 8001116:	d110      	bne.n	800113a <HAL_RCC_OscConfig+0x106>
 8001118:	6863      	ldr	r3, [r4, #4]
 800111a:	03da      	lsls	r2, r3, #15
 800111c:	d40d      	bmi.n	800113a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	079b      	lsls	r3, r3, #30
 8001122:	d502      	bpl.n	800112a <HAL_RCC_OscConfig+0xf6>
 8001124:	692b      	ldr	r3, [r5, #16]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d1af      	bne.n	800108a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	696a      	ldr	r2, [r5, #20]
 800112e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001132:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001136:	6023      	str	r3, [r4, #0]
 8001138:	e785      	b.n	8001046 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800113a:	692a      	ldr	r2, [r5, #16]
 800113c:	4b5a      	ldr	r3, [pc, #360]	; (80012a8 <HAL_RCC_OscConfig+0x274>)
 800113e:	b16a      	cbz	r2, 800115c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001144:	f7ff f820 	bl	8000188 <HAL_GetTick>
 8001148:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	079f      	lsls	r7, r3, #30
 800114e:	d4ec      	bmi.n	800112a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001150:	f7ff f81a 	bl	8000188 <HAL_GetTick>
 8001154:	1b80      	subs	r0, r0, r6
 8001156:	2802      	cmp	r0, #2
 8001158:	d9f7      	bls.n	800114a <HAL_RCC_OscConfig+0x116>
 800115a:	e7ad      	b.n	80010b8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800115c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800115e:	f7ff f813 	bl	8000188 <HAL_GetTick>
 8001162:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	0798      	lsls	r0, r3, #30
 8001168:	f57f af6d 	bpl.w	8001046 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116c:	f7ff f80c 	bl	8000188 <HAL_GetTick>
 8001170:	1b80      	subs	r0, r0, r6
 8001172:	2802      	cmp	r0, #2
 8001174:	d9f6      	bls.n	8001164 <HAL_RCC_OscConfig+0x130>
 8001176:	e79f      	b.n	80010b8 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001178:	69aa      	ldr	r2, [r5, #24]
 800117a:	4c4a      	ldr	r4, [pc, #296]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800117c:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <HAL_RCC_OscConfig+0x278>)
 800117e:	b1da      	cbz	r2, 80011b8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001184:	f7ff f800 	bl	8000188 <HAL_GetTick>
 8001188:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800118c:	079b      	lsls	r3, r3, #30
 800118e:	d50d      	bpl.n	80011ac <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001190:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001194:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <HAL_RCC_OscConfig+0x27c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	fbb3 f3f2 	udiv	r3, r3, r2
 800119c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800119e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80011a0:	9b01      	ldr	r3, [sp, #4]
 80011a2:	1e5a      	subs	r2, r3, #1
 80011a4:	9201      	str	r2, [sp, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f9      	bne.n	800119e <HAL_RCC_OscConfig+0x16a>
 80011aa:	e750      	b.n	800104e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ac:	f7fe ffec 	bl	8000188 <HAL_GetTick>
 80011b0:	1b80      	subs	r0, r0, r6
 80011b2:	2802      	cmp	r0, #2
 80011b4:	d9e9      	bls.n	800118a <HAL_RCC_OscConfig+0x156>
 80011b6:	e77f      	b.n	80010b8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80011b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011ba:	f7fe ffe5 	bl	8000188 <HAL_GetTick>
 80011be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011c2:	079f      	lsls	r7, r3, #30
 80011c4:	f57f af43 	bpl.w	800104e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c8:	f7fe ffde 	bl	8000188 <HAL_GetTick>
 80011cc:	1b80      	subs	r0, r0, r6
 80011ce:	2802      	cmp	r0, #2
 80011d0:	d9f6      	bls.n	80011c0 <HAL_RCC_OscConfig+0x18c>
 80011d2:	e771      	b.n	80010b8 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d4:	4c33      	ldr	r4, [pc, #204]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011d6:	69e3      	ldr	r3, [r4, #28]
 80011d8:	00d8      	lsls	r0, r3, #3
 80011da:	d424      	bmi.n	8001226 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80011dc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	69e3      	ldr	r3, [r4, #28]
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e4:	61e3      	str	r3, [r4, #28]
 80011e6:	69e3      	ldr	r3, [r4, #28]
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f0:	4e30      	ldr	r6, [pc, #192]	; (80012b4 <HAL_RCC_OscConfig+0x280>)
 80011f2:	6833      	ldr	r3, [r6, #0]
 80011f4:	05d9      	lsls	r1, r3, #23
 80011f6:	d518      	bpl.n	800122a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f8:	68eb      	ldr	r3, [r5, #12]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d126      	bne.n	800124c <HAL_RCC_OscConfig+0x218>
 80011fe:	6a23      	ldr	r3, [r4, #32]
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001206:	f7fe ffbf 	bl	8000188 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800120e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001210:	6a23      	ldr	r3, [r4, #32]
 8001212:	079b      	lsls	r3, r3, #30
 8001214:	d53f      	bpl.n	8001296 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001216:	2f00      	cmp	r7, #0
 8001218:	f43f af1d 	beq.w	8001056 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800121c:	69e3      	ldr	r3, [r4, #28]
 800121e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001222:	61e3      	str	r3, [r4, #28]
 8001224:	e717      	b.n	8001056 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001226:	2700      	movs	r7, #0
 8001228:	e7e2      	b.n	80011f0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800122a:	6833      	ldr	r3, [r6, #0]
 800122c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001230:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001232:	f7fe ffa9 	bl	8000188 <HAL_GetTick>
 8001236:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001238:	6833      	ldr	r3, [r6, #0]
 800123a:	05da      	lsls	r2, r3, #23
 800123c:	d4dc      	bmi.n	80011f8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123e:	f7fe ffa3 	bl	8000188 <HAL_GetTick>
 8001242:	eba0 0008 	sub.w	r0, r0, r8
 8001246:	2864      	cmp	r0, #100	; 0x64
 8001248:	d9f6      	bls.n	8001238 <HAL_RCC_OscConfig+0x204>
 800124a:	e735      	b.n	80010b8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124c:	b9ab      	cbnz	r3, 800127a <HAL_RCC_OscConfig+0x246>
 800124e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001250:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6223      	str	r3, [r4, #32]
 800125a:	6a23      	ldr	r3, [r4, #32]
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001262:	f7fe ff91 	bl	8000188 <HAL_GetTick>
 8001266:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001268:	6a23      	ldr	r3, [r4, #32]
 800126a:	0798      	lsls	r0, r3, #30
 800126c:	d5d3      	bpl.n	8001216 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800126e:	f7fe ff8b 	bl	8000188 <HAL_GetTick>
 8001272:	1b80      	subs	r0, r0, r6
 8001274:	4540      	cmp	r0, r8
 8001276:	d9f7      	bls.n	8001268 <HAL_RCC_OscConfig+0x234>
 8001278:	e71e      	b.n	80010b8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127a:	2b05      	cmp	r3, #5
 800127c:	6a23      	ldr	r3, [r4, #32]
 800127e:	d103      	bne.n	8001288 <HAL_RCC_OscConfig+0x254>
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6223      	str	r3, [r4, #32]
 8001286:	e7ba      	b.n	80011fe <HAL_RCC_OscConfig+0x1ca>
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6223      	str	r3, [r4, #32]
 800128e:	6a23      	ldr	r3, [r4, #32]
 8001290:	f023 0304 	bic.w	r3, r3, #4
 8001294:	e7b6      	b.n	8001204 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001296:	f7fe ff77 	bl	8000188 <HAL_GetTick>
 800129a:	eba0 0008 	sub.w	r0, r0, r8
 800129e:	42b0      	cmp	r0, r6
 80012a0:	d9b6      	bls.n	8001210 <HAL_RCC_OscConfig+0x1dc>
 80012a2:	e709      	b.n	80010b8 <HAL_RCC_OscConfig+0x84>
 80012a4:	40021000 	.word	0x40021000
 80012a8:	42420000 	.word	0x42420000
 80012ac:	42420480 	.word	0x42420480
 80012b0:	20000004 	.word	0x20000004
 80012b4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b8:	4c22      	ldr	r4, [pc, #136]	; (8001344 <HAL_RCC_OscConfig+0x310>)
 80012ba:	6863      	ldr	r3, [r4, #4]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	f43f aee2 	beq.w	800108a <HAL_RCC_OscConfig+0x56>
 80012c6:	2300      	movs	r3, #0
 80012c8:	4e1f      	ldr	r6, [pc, #124]	; (8001348 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ca:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80012cc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ce:	d12b      	bne.n	8001328 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80012d0:	f7fe ff5a 	bl	8000188 <HAL_GetTick>
 80012d4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	0199      	lsls	r1, r3, #6
 80012da:	d41f      	bmi.n	800131c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012dc:	6a2b      	ldr	r3, [r5, #32]
 80012de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e2:	d105      	bne.n	80012f0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012e4:	6862      	ldr	r2, [r4, #4]
 80012e6:	68a9      	ldr	r1, [r5, #8]
 80012e8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80012ec:	430a      	orrs	r2, r1
 80012ee:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012f0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80012f2:	6862      	ldr	r2, [r4, #4]
 80012f4:	430b      	orrs	r3, r1
 80012f6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80012fa:	4313      	orrs	r3, r2
 80012fc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80012fe:	2301      	movs	r3, #1
 8001300:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001302:	f7fe ff41 	bl	8000188 <HAL_GetTick>
 8001306:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	019a      	lsls	r2, r3, #6
 800130c:	f53f aea7 	bmi.w	800105e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001310:	f7fe ff3a 	bl	8000188 <HAL_GetTick>
 8001314:	1b40      	subs	r0, r0, r5
 8001316:	2802      	cmp	r0, #2
 8001318:	d9f6      	bls.n	8001308 <HAL_RCC_OscConfig+0x2d4>
 800131a:	e6cd      	b.n	80010b8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131c:	f7fe ff34 	bl	8000188 <HAL_GetTick>
 8001320:	1bc0      	subs	r0, r0, r7
 8001322:	2802      	cmp	r0, #2
 8001324:	d9d7      	bls.n	80012d6 <HAL_RCC_OscConfig+0x2a2>
 8001326:	e6c7      	b.n	80010b8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001328:	f7fe ff2e 	bl	8000188 <HAL_GetTick>
 800132c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	019b      	lsls	r3, r3, #6
 8001332:	f57f ae94 	bpl.w	800105e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001336:	f7fe ff27 	bl	8000188 <HAL_GetTick>
 800133a:	1b40      	subs	r0, r0, r5
 800133c:	2802      	cmp	r0, #2
 800133e:	d9f6      	bls.n	800132e <HAL_RCC_OscConfig+0x2fa>
 8001340:	e6ba      	b.n	80010b8 <HAL_RCC_OscConfig+0x84>
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	42420060 	.word	0x42420060

0800134c <HAL_RCC_GetSysClockFreq>:
{
 800134c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_RCC_GetSysClockFreq+0x70>)
{
 8001350:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001352:	ac02      	add	r4, sp, #8
 8001354:	f103 0510 	add.w	r5, r3, #16
 8001358:	4622      	mov	r2, r4
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	6859      	ldr	r1, [r3, #4]
 800135e:	3308      	adds	r3, #8
 8001360:	c203      	stmia	r2!, {r0, r1}
 8001362:	42ab      	cmp	r3, r5
 8001364:	4614      	mov	r4, r2
 8001366:	d1f7      	bne.n	8001358 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001368:	2301      	movs	r3, #1
 800136a:	f88d 3004 	strb.w	r3, [sp, #4]
 800136e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001370:	4913      	ldr	r1, [pc, #76]	; (80013c0 <HAL_RCC_GetSysClockFreq+0x74>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001372:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001376:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001378:	f003 020c 	and.w	r2, r3, #12
 800137c:	2a04      	cmp	r2, #4
 800137e:	d01b      	beq.n	80013b8 <HAL_RCC_GetSysClockFreq+0x6c>
 8001380:	2a08      	cmp	r2, #8
 8001382:	d002      	beq.n	800138a <HAL_RCC_GetSysClockFreq+0x3e>
      sysclockfreq = HSI_VALUE;
 8001384:	480f      	ldr	r0, [pc, #60]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x78>)
}
 8001386:	b007      	add	sp, #28
 8001388:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800138a:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800138e:	a806      	add	r0, sp, #24
 8001390:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001392:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001394:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001398:	d50b      	bpl.n	80013b2 <HAL_RCC_GetSysClockFreq+0x66>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800139a:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800139c:	480a      	ldr	r0, [pc, #40]	; (80013c8 <HAL_RCC_GetSysClockFreq+0x7c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800139e:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013a2:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013a4:	aa06      	add	r2, sp, #24
 80013a6:	4413      	add	r3, r2
 80013a8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80013b0:	e7e9      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <HAL_RCC_GetSysClockFreq+0x80>)
 80013b4:	4350      	muls	r0, r2
 80013b6:	e7e6      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <HAL_RCC_GetSysClockFreq+0x7c>)
  return sysclockfreq;
 80013ba:	e7e4      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0x3a>
 80013bc:	08003ae0 	.word	0x08003ae0
 80013c0:	40021000 	.word	0x40021000
 80013c4:	007a1200 	.word	0x007a1200
 80013c8:	00f42400 	.word	0x00f42400
 80013cc:	003d0900 	.word	0x003d0900

080013d0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013d0:	4a4d      	ldr	r2, [pc, #308]	; (8001508 <HAL_RCC_ClockConfig+0x138>)
{
 80013d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013d6:	6813      	ldr	r3, [r2, #0]
{
 80013d8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	428b      	cmp	r3, r1
{
 80013e0:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013e2:	d328      	bcc.n	8001436 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e4:	682a      	ldr	r2, [r5, #0]
 80013e6:	0791      	lsls	r1, r2, #30
 80013e8:	d432      	bmi.n	8001450 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ea:	07d2      	lsls	r2, r2, #31
 80013ec:	d438      	bmi.n	8001460 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80013ee:	4a46      	ldr	r2, [pc, #280]	; (8001508 <HAL_RCC_ClockConfig+0x138>)
 80013f0:	6813      	ldr	r3, [r2, #0]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	429e      	cmp	r6, r3
 80013f8:	d373      	bcc.n	80014e2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013fa:	682a      	ldr	r2, [r5, #0]
 80013fc:	4c43      	ldr	r4, [pc, #268]	; (800150c <HAL_RCC_ClockConfig+0x13c>)
 80013fe:	f012 0f04 	tst.w	r2, #4
 8001402:	d179      	bne.n	80014f8 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001404:	0713      	lsls	r3, r2, #28
 8001406:	d506      	bpl.n	8001416 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001408:	6863      	ldr	r3, [r4, #4]
 800140a:	692a      	ldr	r2, [r5, #16]
 800140c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001410:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001414:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001416:	f7ff ff99 	bl	800134c <HAL_RCC_GetSysClockFreq>
 800141a:	6863      	ldr	r3, [r4, #4]
 800141c:	4a3c      	ldr	r2, [pc, #240]	; (8001510 <HAL_RCC_ClockConfig+0x140>)
 800141e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	40d8      	lsrs	r0, r3
 8001426:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <HAL_RCC_ClockConfig+0x144>)
 8001428:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800142a:	2000      	movs	r0, #0
 800142c:	f001 fc94 	bl	8002d58 <HAL_InitTick>
  return HAL_OK;
 8001430:	2000      	movs	r0, #0
}
 8001432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001436:	6813      	ldr	r3, [r2, #0]
 8001438:	f023 0307 	bic.w	r3, r3, #7
 800143c:	430b      	orrs	r3, r1
 800143e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001440:	6813      	ldr	r3, [r2, #0]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	4299      	cmp	r1, r3
 8001448:	d0cc      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800144a:	2001      	movs	r0, #1
 800144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001450:	492e      	ldr	r1, [pc, #184]	; (800150c <HAL_RCC_ClockConfig+0x13c>)
 8001452:	68a8      	ldr	r0, [r5, #8]
 8001454:	684b      	ldr	r3, [r1, #4]
 8001456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800145a:	4303      	orrs	r3, r0
 800145c:	604b      	str	r3, [r1, #4]
 800145e:	e7c4      	b.n	80013ea <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001460:	686a      	ldr	r2, [r5, #4]
 8001462:	4c2a      	ldr	r4, [pc, #168]	; (800150c <HAL_RCC_ClockConfig+0x13c>)
 8001464:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001468:	d11c      	bne.n	80014a4 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146e:	d0ec      	beq.n	800144a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001470:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001472:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	4313      	orrs	r3, r2
 800147c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800147e:	f7fe fe83 	bl	8000188 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001482:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001484:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001486:	2b01      	cmp	r3, #1
 8001488:	d114      	bne.n	80014b4 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800148a:	6863      	ldr	r3, [r4, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b04      	cmp	r3, #4
 8001492:	d0ac      	beq.n	80013ee <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001494:	f7fe fe78 	bl	8000188 <HAL_GetTick>
 8001498:	1bc0      	subs	r0, r0, r7
 800149a:	4540      	cmp	r0, r8
 800149c:	d9f5      	bls.n	800148a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800149e:	2003      	movs	r0, #3
 80014a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014a4:	2a02      	cmp	r2, #2
 80014a6:	d102      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014ac:	e7df      	b.n	800146e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	f013 0f02 	tst.w	r3, #2
 80014b2:	e7dc      	b.n	800146e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d10f      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b8:	6863      	ldr	r3, [r4, #4]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d095      	beq.n	80013ee <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c2:	f7fe fe61 	bl	8000188 <HAL_GetTick>
 80014c6:	1bc0      	subs	r0, r0, r7
 80014c8:	4540      	cmp	r0, r8
 80014ca:	d9f5      	bls.n	80014b8 <HAL_RCC_ClockConfig+0xe8>
 80014cc:	e7e7      	b.n	800149e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ce:	f7fe fe5b 	bl	8000188 <HAL_GetTick>
 80014d2:	1bc0      	subs	r0, r0, r7
 80014d4:	4540      	cmp	r0, r8
 80014d6:	d8e2      	bhi.n	800149e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014d8:	6863      	ldr	r3, [r4, #4]
 80014da:	f013 0f0c 	tst.w	r3, #12
 80014de:	d1f6      	bne.n	80014ce <HAL_RCC_ClockConfig+0xfe>
 80014e0:	e785      	b.n	80013ee <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e2:	6813      	ldr	r3, [r2, #0]
 80014e4:	f023 0307 	bic.w	r3, r3, #7
 80014e8:	4333      	orrs	r3, r6
 80014ea:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014ec:	6813      	ldr	r3, [r2, #0]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	429e      	cmp	r6, r3
 80014f4:	d1a9      	bne.n	800144a <HAL_RCC_ClockConfig+0x7a>
 80014f6:	e780      	b.n	80013fa <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f8:	6863      	ldr	r3, [r4, #4]
 80014fa:	68e9      	ldr	r1, [r5, #12]
 80014fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001500:	430b      	orrs	r3, r1
 8001502:	6063      	str	r3, [r4, #4]
 8001504:	e77e      	b.n	8001404 <HAL_RCC_ClockConfig+0x34>
 8001506:	bf00      	nop
 8001508:	40022000 	.word	0x40022000
 800150c:	40021000 	.word	0x40021000
 8001510:	08003af7 	.word	0x08003af7
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <HAL_RCC_GetPCLK1Freq+0x14>)
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <HAL_RCC_GetPCLK1Freq+0x18>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	4a03      	ldr	r2, [pc, #12]	; (8001534 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001526:	6810      	ldr	r0, [r2, #0]
}    
 8001528:	40d8      	lsrs	r0, r3
 800152a:	4770      	bx	lr
 800152c:	40021000 	.word	0x40021000
 8001530:	08003b07 	.word	0x08003b07
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_RCC_GetPCLK2Freq+0x14>)
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <HAL_RCC_GetPCLK2Freq+0x18>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001546:	6810      	ldr	r0, [r2, #0]
} 
 8001548:	40d8      	lsrs	r0, r3
 800154a:	4770      	bx	lr
 800154c:	40021000 	.word	0x40021000
 8001550:	08003b07 	.word	0x08003b07
 8001554:	20000004 	.word	0x20000004

08001558 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001558:	230f      	movs	r3, #15
 800155a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_GetClockConfig+0x34>)
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	f002 0203 	and.w	r2, r2, #3
 8001564:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800156c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001574:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	08db      	lsrs	r3, r3, #3
 800157a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800157e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_RCC_GetClockConfig+0x38>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	600b      	str	r3, [r1, #0]
 800158a:	4770      	bx	lr
 800158c:	40021000 	.word	0x40021000
 8001590:	40022000 	.word	0x40022000

08001594 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001594:	6803      	ldr	r3, [r0, #0]
{
 8001596:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800159a:	07d9      	lsls	r1, r3, #31
{
 800159c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800159e:	d520      	bpl.n	80015e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a0:	4c35      	ldr	r4, [pc, #212]	; (8001678 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80015a2:	69e3      	ldr	r3, [r4, #28]
 80015a4:	00da      	lsls	r2, r3, #3
 80015a6:	d432      	bmi.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80015a8:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	69e3      	ldr	r3, [r4, #28]
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	61e3      	str	r3, [r4, #28]
 80015b2:	69e3      	ldr	r3, [r4, #28]
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	4e2f      	ldr	r6, [pc, #188]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80015be:	6833      	ldr	r3, [r6, #0]
 80015c0:	05db      	lsls	r3, r3, #23
 80015c2:	d526      	bpl.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015c4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015c6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80015ca:	d136      	bne.n	800163a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80015cc:	6a23      	ldr	r3, [r4, #32]
 80015ce:	686a      	ldr	r2, [r5, #4]
 80015d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015d4:	4313      	orrs	r3, r2
 80015d6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015d8:	b11f      	cbz	r7, 80015e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015da:	69e3      	ldr	r3, [r4, #28]
 80015dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80015e2:	6828      	ldr	r0, [r5, #0]
 80015e4:	0783      	lsls	r3, r0, #30
 80015e6:	d506      	bpl.n	80015f6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80015e8:	4a23      	ldr	r2, [pc, #140]	; (8001678 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80015ea:	68a9      	ldr	r1, [r5, #8]
 80015ec:	6853      	ldr	r3, [r2, #4]
 80015ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015f2:	430b      	orrs	r3, r1
 80015f4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80015f6:	f010 0010 	ands.w	r0, r0, #16
 80015fa:	d01b      	beq.n	8001634 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015fc:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80015fe:	68e9      	ldr	r1, [r5, #12]
 8001600:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001602:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001604:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001608:	430b      	orrs	r3, r1
 800160a:	6053      	str	r3, [r2, #4]
 800160c:	e012      	b.n	8001634 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800160e:	2700      	movs	r7, #0
 8001610:	e7d4      	b.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001612:	6833      	ldr	r3, [r6, #0]
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800161a:	f7fe fdb5 	bl	8000188 <HAL_GetTick>
 800161e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	6833      	ldr	r3, [r6, #0]
 8001622:	05d8      	lsls	r0, r3, #23
 8001624:	d4ce      	bmi.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001626:	f7fe fdaf 	bl	8000188 <HAL_GetTick>
 800162a:	eba0 0008 	sub.w	r0, r0, r8
 800162e:	2864      	cmp	r0, #100	; 0x64
 8001630:	d9f6      	bls.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001632:	2003      	movs	r0, #3
}
 8001634:	b002      	add	sp, #8
 8001636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800163a:	686a      	ldr	r2, [r5, #4]
 800163c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001640:	4293      	cmp	r3, r2
 8001642:	d0c3      	beq.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001644:	2001      	movs	r0, #1
 8001646:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001648:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800164a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800164c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800164e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001652:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001654:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001656:	07d9      	lsls	r1, r3, #31
 8001658:	d5b8      	bpl.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800165a:	f7fe fd95 	bl	8000188 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001662:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001664:	6a23      	ldr	r3, [r4, #32]
 8001666:	079a      	lsls	r2, r3, #30
 8001668:	d4b0      	bmi.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7fe fd8d 	bl	8000188 <HAL_GetTick>
 800166e:	1b80      	subs	r0, r0, r6
 8001670:	4540      	cmp	r0, r8
 8001672:	d9f7      	bls.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001674:	e7dd      	b.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	40007000 	.word	0x40007000
 8001680:	42420440 	.word	0x42420440

08001684 <HAL_TIM_Base_MspInit>:
 8001684:	4770      	bx	lr

08001686 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001686:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001688:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	f042 0201 	orr.w	r2, r2, #1
 8001690:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	f042 0201 	orr.w	r2, r2, #1
 8001698:	601a      	str	r2, [r3, #0]
}
 800169a:	4770      	bx	lr

0800169c <HAL_TIM_OC_DelayElapsedCallback>:
 800169c:	4770      	bx	lr

0800169e <HAL_TIM_IC_CaptureCallback>:
 800169e:	4770      	bx	lr

080016a0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80016a0:	4770      	bx	lr

080016a2 <HAL_TIM_TriggerCallback>:
 80016a2:	4770      	bx	lr

080016a4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016a4:	6803      	ldr	r3, [r0, #0]
{
 80016a6:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016a8:	691a      	ldr	r2, [r3, #16]
{
 80016aa:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016ac:	0791      	lsls	r1, r2, #30
 80016ae:	d50e      	bpl.n	80016ce <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	0792      	lsls	r2, r2, #30
 80016b4:	d50b      	bpl.n	80016ce <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016b6:	f06f 0202 	mvn.w	r2, #2
 80016ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016bc:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016be:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016c0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016c2:	079b      	lsls	r3, r3, #30
 80016c4:	d077      	beq.n	80017b6 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80016c6:	f7ff ffea 	bl	800169e <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ca:	2300      	movs	r3, #0
 80016cc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	0750      	lsls	r0, r2, #29
 80016d4:	d510      	bpl.n	80016f8 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	0751      	lsls	r1, r2, #29
 80016da:	d50d      	bpl.n	80016f8 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016dc:	f06f 0204 	mvn.w	r2, #4
 80016e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016e2:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016e4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016e6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016e8:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80016ec:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016ee:	d068      	beq.n	80017c2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80016f0:	f7ff ffd5 	bl	800169e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016f4:	2300      	movs	r3, #0
 80016f6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	0712      	lsls	r2, r2, #28
 80016fe:	d50f      	bpl.n	8001720 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	0710      	lsls	r0, r2, #28
 8001704:	d50c      	bpl.n	8001720 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001706:	f06f 0208 	mvn.w	r2, #8
 800170a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800170c:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800170e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001710:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001712:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001714:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001716:	d05a      	beq.n	80017ce <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001718:	f7ff ffc1 	bl	800169e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171c:	2300      	movs	r3, #0
 800171e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	06d2      	lsls	r2, r2, #27
 8001726:	d510      	bpl.n	800174a <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	06d0      	lsls	r0, r2, #27
 800172c:	d50d      	bpl.n	800174a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800172e:	f06f 0210 	mvn.w	r2, #16
 8001732:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001734:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001736:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001738:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800173a:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800173e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001740:	d04b      	beq.n	80017da <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001742:	f7ff ffac 	bl	800169e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001746:	2300      	movs	r3, #0
 8001748:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	691a      	ldr	r2, [r3, #16]
 800174e:	07d1      	lsls	r1, r2, #31
 8001750:	d508      	bpl.n	8001764 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	d505      	bpl.n	8001764 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001758:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800175c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800175e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001760:	f001 fa5c 	bl	8002c1c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	0610      	lsls	r0, r2, #24
 800176a:	d508      	bpl.n	800177e <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	0611      	lsls	r1, r2, #24
 8001770:	d505      	bpl.n	800177e <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001772:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001776:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001778:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800177a:	f000 f882 	bl	8001882 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	0652      	lsls	r2, r2, #25
 8001784:	d508      	bpl.n	8001798 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	0650      	lsls	r0, r2, #25
 800178a:	d505      	bpl.n	8001798 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800178c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001790:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001792:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001794:	f7ff ff85 	bl	80016a2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	0691      	lsls	r1, r2, #26
 800179e:	d522      	bpl.n	80017e6 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	0692      	lsls	r2, r2, #26
 80017a4:	d51f      	bpl.n	80017e6 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017a6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80017aa:	4620      	mov	r0, r4
    }
  }
}
 80017ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017b0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80017b2:	f000 b865 	b.w	8001880 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017b6:	f7ff ff71 	bl	800169c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ba:	4620      	mov	r0, r4
 80017bc:	f7ff ff70 	bl	80016a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80017c0:	e783      	b.n	80016ca <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c2:	f7ff ff6b 	bl	800169c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c6:	4620      	mov	r0, r4
 80017c8:	f7ff ff6a 	bl	80016a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80017cc:	e792      	b.n	80016f4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ce:	f7ff ff65 	bl	800169c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d2:	4620      	mov	r0, r4
 80017d4:	f7ff ff64 	bl	80016a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80017d8:	e7a0      	b.n	800171c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017da:	f7ff ff5f 	bl	800169c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017de:	4620      	mov	r0, r4
 80017e0:	f7ff ff5e 	bl	80016a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80017e4:	e7af      	b.n	8001746 <HAL_TIM_IRQHandler+0xa2>
 80017e6:	bd10      	pop	{r4, pc}

080017e8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017e8:	4a16      	ldr	r2, [pc, #88]	; (8001844 <TIM_Base_SetConfig+0x5c>)
{
 80017ea:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017ec:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 80017ee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017f0:	d005      	beq.n	80017fe <TIM_Base_SetConfig+0x16>
 80017f2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017f6:	d002      	beq.n	80017fe <TIM_Base_SetConfig+0x16>
 80017f8:	4c13      	ldr	r4, [pc, #76]	; (8001848 <TIM_Base_SetConfig+0x60>)
 80017fa:	42a0      	cmp	r0, r4
 80017fc:	d110      	bne.n	8001820 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80017fe:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001804:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001806:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800180a:	d005      	beq.n	8001818 <TIM_Base_SetConfig+0x30>
 800180c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001810:	d002      	beq.n	8001818 <TIM_Base_SetConfig+0x30>
 8001812:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <TIM_Base_SetConfig+0x60>)
 8001814:	4290      	cmp	r0, r2
 8001816:	d103      	bne.n	8001820 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001818:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800181a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800181e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001820:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001826:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001828:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800182a:	688b      	ldr	r3, [r1, #8]
 800182c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800182e:	680b      	ldr	r3, [r1, #0]
 8001830:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <TIM_Base_SetConfig+0x5c>)
 8001834:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001836:	bf04      	itt	eq
 8001838:	690b      	ldreq	r3, [r1, #16]
 800183a:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800183c:	2301      	movs	r3, #1
 800183e:	6143      	str	r3, [r0, #20]
 8001840:	bd10      	pop	{r4, pc}
 8001842:	bf00      	nop
 8001844:	40012c00 	.word	0x40012c00
 8001848:	40000400 	.word	0x40000400

0800184c <HAL_TIM_Base_Init>:
{
 800184c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800184e:	4604      	mov	r4, r0
 8001850:	b1a0      	cbz	r0, 800187c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001852:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001856:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800185a:	b91b      	cbnz	r3, 8001864 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800185c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001860:	f7ff ff10 	bl	8001684 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001864:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001866:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001868:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800186c:	1d21      	adds	r1, r4, #4
 800186e:	f7ff ffbb 	bl	80017e8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001872:	2301      	movs	r3, #1
  return HAL_OK;
 8001874:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001876:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800187a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800187c:	2001      	movs	r0, #1
}
 800187e:	bd10      	pop	{r4, pc}

08001880 <HAL_TIMEx_CommutationCallback>:
 8001880:	4770      	bx	lr

08001882 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001882:	4770      	bx	lr

08001884 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001888:	6805      	ldr	r5, [r0, #0]
 800188a:	68c2      	ldr	r2, [r0, #12]
 800188c:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800188e:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001890:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001894:	4313      	orrs	r3, r2
 8001896:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001898:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800189a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800189c:	430b      	orrs	r3, r1
 800189e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80018a0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80018a4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80018a8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018ae:	696b      	ldr	r3, [r5, #20]
 80018b0:	6982      	ldr	r2, [r0, #24]
 80018b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b6:	4313      	orrs	r3, r2
 80018b8:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80018ba:	4b40      	ldr	r3, [pc, #256]	; (80019bc <UART_SetConfig+0x138>)
{
 80018bc:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80018be:	429d      	cmp	r5, r3
 80018c0:	f04f 0419 	mov.w	r4, #25
 80018c4:	d146      	bne.n	8001954 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80018c6:	f7ff fe37 	bl	8001538 <HAL_RCC_GetPCLK2Freq>
 80018ca:	fb04 f300 	mul.w	r3, r4, r0
 80018ce:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80018d2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80018d6:	00b6      	lsls	r6, r6, #2
 80018d8:	fbb3 f3f6 	udiv	r3, r3, r6
 80018dc:	fbb3 f3f8 	udiv	r3, r3, r8
 80018e0:	011e      	lsls	r6, r3, #4
 80018e2:	f7ff fe29 	bl	8001538 <HAL_RCC_GetPCLK2Freq>
 80018e6:	4360      	muls	r0, r4
 80018e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	fbb0 f7f3 	udiv	r7, r0, r3
 80018f2:	f7ff fe21 	bl	8001538 <HAL_RCC_GetPCLK2Freq>
 80018f6:	4360      	muls	r0, r4
 80018f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001902:	fbb3 f3f8 	udiv	r3, r3, r8
 8001906:	fb08 7313 	mls	r3, r8, r3, r7
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	3332      	adds	r3, #50	; 0x32
 800190e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001912:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001916:	f7ff fe0f 	bl	8001538 <HAL_RCC_GetPCLK2Freq>
 800191a:	4360      	muls	r0, r4
 800191c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	fbb0 faf2 	udiv	sl, r0, r2
 8001926:	f7ff fe07 	bl	8001538 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800192a:	4360      	muls	r0, r4
 800192c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	fbb0 f3f3 	udiv	r3, r0, r3
 8001936:	fbb3 f3f8 	udiv	r3, r3, r8
 800193a:	fb08 a313 	mls	r3, r8, r3, sl
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	3332      	adds	r3, #50	; 0x32
 8001942:	fbb3 f3f8 	udiv	r3, r3, r8
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	433b      	orrs	r3, r7
 800194c:	4433      	add	r3, r6
 800194e:	60ab      	str	r3, [r5, #8]
 8001950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001954:	f7ff fde0 	bl	8001518 <HAL_RCC_GetPCLK1Freq>
 8001958:	fb04 f300 	mul.w	r3, r4, r0
 800195c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001960:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001964:	00b6      	lsls	r6, r6, #2
 8001966:	fbb3 f3f6 	udiv	r3, r3, r6
 800196a:	fbb3 f3f8 	udiv	r3, r3, r8
 800196e:	011e      	lsls	r6, r3, #4
 8001970:	f7ff fdd2 	bl	8001518 <HAL_RCC_GetPCLK1Freq>
 8001974:	4360      	muls	r0, r4
 8001976:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001980:	f7ff fdca 	bl	8001518 <HAL_RCC_GetPCLK1Freq>
 8001984:	4360      	muls	r0, r4
 8001986:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001990:	fbb3 f3f8 	udiv	r3, r3, r8
 8001994:	fb08 7313 	mls	r3, r8, r3, r7
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	3332      	adds	r3, #50	; 0x32
 800199c:	fbb3 f3f8 	udiv	r3, r3, r8
 80019a0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80019a4:	f7ff fdb8 	bl	8001518 <HAL_RCC_GetPCLK1Freq>
 80019a8:	4360      	muls	r0, r4
 80019aa:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	fbb0 faf2 	udiv	sl, r0, r2
 80019b4:	f7ff fdb0 	bl	8001518 <HAL_RCC_GetPCLK1Freq>
 80019b8:	e7b7      	b.n	800192a <UART_SetConfig+0xa6>
 80019ba:	bf00      	nop
 80019bc:	40013800 	.word	0x40013800

080019c0 <HAL_UART_Init>:
{
 80019c0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80019c2:	4604      	mov	r4, r0
 80019c4:	b340      	cbz	r0, 8001a18 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80019c6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019ce:	b91b      	cbnz	r3, 80019d8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80019d0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80019d4:	f001 f984 	bl	8002ce0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80019d8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80019da:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80019dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80019e0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80019e2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80019e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019e8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80019ea:	f7ff ff4b 	bl	8001884 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ee:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019f0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a00:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a08:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001a0a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001a0e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001a12:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001a16:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a18:	2001      	movs	r0, #1
}
 8001a1a:	bd10      	pop	{r4, pc}

08001a1c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	a801      	add	r0, sp, #4
 8001a20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001a24:	b004      	add	sp, #16
 8001a26:	2000      	movs	r0, #0
 8001a28:	4770      	bx	lr

08001a2a <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001a2a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001a34:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001a38:	2000      	movs	r0, #0
 8001a3a:	4770      	bx	lr

08001a3c <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001a3c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001a40:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001a44:	045b      	lsls	r3, r3, #17
 8001a46:	0c5b      	lsrs	r3, r3, #17
 8001a48:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	4770      	bx	lr

08001a50 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001a50:	2000      	movs	r0, #0
 8001a52:	4770      	bx	lr

08001a54 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001a54:	b084      	sub	sp, #16
 8001a56:	b510      	push	{r4, lr}
 8001a58:	ac03      	add	r4, sp, #12
 8001a5a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8001a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8001a62:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8001a6a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8001a6e:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8001a72:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001a76:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8001a7a:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001a82:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8001a86:	4610      	mov	r0, r2
 8001a88:	4770      	bx	lr
	...

08001a8c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001a8c:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 8001a8e:	78cb      	ldrb	r3, [r1, #3]
 8001a90:	780a      	ldrb	r2, [r1, #0]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d80f      	bhi.n	8001ab6 <USB_ActivateEndpoint+0x2a>
 8001a96:	e8df f003 	tbb	[pc, r3]
 8001a9a:	6402      	.short	0x6402
 8001a9c:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8001a9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001aa2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aaa:	041b      	lsls	r3, r3, #16
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001ab2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001ab6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001aba:	780c      	ldrb	r4, [r1, #0]
 8001abc:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001ac0:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8001ac4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001ac8:	401a      	ands	r2, r3
 8001aca:	432a      	orrs	r2, r5
 8001acc:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8001ad0:	7a8a      	ldrb	r2, [r1, #10]
 8001ad2:	780d      	ldrb	r5, [r1, #0]
 8001ad4:	2a00      	cmp	r2, #0
 8001ad6:	f040 8097 	bne.w	8001c08 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 8001ada:	784c      	ldrb	r4, [r1, #1]
 8001adc:	888a      	ldrh	r2, [r1, #4]
 8001ade:	2c00      	cmp	r4, #0
 8001ae0:	d04a      	beq.n	8001b78 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001ae2:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8001ae6:	0852      	lsrs	r2, r2, #1
 8001ae8:	b2a4      	uxth	r4, r4
 8001aea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8001aee:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001af2:	0052      	lsls	r2, r2, #1
 8001af4:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001af8:	780c      	ldrb	r4, [r1, #0]
 8001afa:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001afe:	0652      	lsls	r2, r2, #25
 8001b00:	d508      	bpl.n	8001b14 <USB_ActivateEndpoint+0x88>
 8001b02:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001b06:	4013      	ands	r3, r2
 8001b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b10:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001b14:	780a      	ldrb	r2, [r1, #0]
 8001b16:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b22:	041b      	lsls	r3, r3, #16
 8001b24:	0c1b      	lsrs	r3, r3, #16
 8001b26:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b32:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001b36:	2000      	movs	r0, #0
 8001b38:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8001b3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b3e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	e7b2      	b.n	8001ab2 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001b4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b50:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b58:	041b      	lsls	r3, r3, #16
 8001b5a:	0c1b      	lsrs	r3, r3, #16
 8001b5c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001b60:	e7a7      	b.n	8001ab2 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001b62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b66:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b76:	e79c      	b.n	8001ab2 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001b78:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001b7c:	0852      	lsrs	r2, r2, #1
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	3304      	adds	r3, #4
 8001b82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001b86:	0052      	lsls	r2, r2, #1
 8001b88:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001b8c:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001b90:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001b94:	690d      	ldr	r5, [r1, #16]
 8001b96:	b292      	uxth	r2, r2
 8001b98:	780b      	ldrb	r3, [r1, #0]
 8001b9a:	3206      	adds	r2, #6
 8001b9c:	2d3e      	cmp	r5, #62	; 0x3e
 8001b9e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001ba2:	d929      	bls.n	8001bf8 <USB_ActivateEndpoint+0x16c>
 8001ba4:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8001ba8:	06eb      	lsls	r3, r5, #27
 8001baa:	bf04      	itt	eq
 8001bac:	f106 33ff 	addeq.w	r3, r6, #4294967295
 8001bb0:	b29e      	uxtheq	r6, r3
 8001bb2:	4b6e      	ldr	r3, [pc, #440]	; (8001d6c <USB_ActivateEndpoint+0x2e0>)
 8001bb4:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001bbe:	780a      	ldrb	r2, [r1, #0]
 8001bc0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bc4:	045e      	lsls	r6, r3, #17
 8001bc6:	d50b      	bpl.n	8001be0 <USB_ActivateEndpoint+0x154>
 8001bc8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bd0:	051b      	lsls	r3, r3, #20
 8001bd2:	0d1b      	lsrs	r3, r3, #20
 8001bd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bdc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001be0:	780a      	ldrb	r2, [r1, #0]
 8001be2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001bf6:	e798      	b.n	8001b2a <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001bf8:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001bfc:	07ed      	lsls	r5, r5, #31
 8001bfe:	bf44      	itt	mi
 8001c00:	3301      	addmi	r3, #1
 8001c02:	b29b      	uxthmi	r3, r3
 8001c04:	029b      	lsls	r3, r3, #10
 8001c06:	e7d7      	b.n	8001bb8 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001c08:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8001c0c:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001c10:	0512      	lsls	r2, r2, #20
 8001c12:	0d12      	lsrs	r2, r2, #20
 8001c14:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8001c18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c1c:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001c20:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001c24:	780c      	ldrb	r4, [r1, #0]
 8001c26:	b292      	uxth	r2, r2
 8001c28:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001c2c:	88cc      	ldrh	r4, [r1, #6]
 8001c2e:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001c32:	0864      	lsrs	r4, r4, #1
 8001c34:	0064      	lsls	r4, r4, #1
 8001c36:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8001c3a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001c3e:	780c      	ldrb	r4, [r1, #0]
 8001c40:	b292      	uxth	r2, r2
 8001c42:	3204      	adds	r2, #4
 8001c44:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001c48:	890c      	ldrh	r4, [r1, #8]
 8001c4a:	0864      	lsrs	r4, r4, #1
 8001c4c:	0064      	lsls	r4, r4, #1
 8001c4e:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8001c52:	784a      	ldrb	r2, [r1, #1]
 8001c54:	780c      	ldrb	r4, [r1, #0]
 8001c56:	2a00      	cmp	r2, #0
 8001c58:	d147      	bne.n	8001cea <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001c5a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001c5e:	0455      	lsls	r5, r2, #17
 8001c60:	d508      	bpl.n	8001c74 <USB_ActivateEndpoint+0x1e8>
 8001c62:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001c66:	4013      	ands	r3, r2
 8001c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c70:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001c74:	780a      	ldrb	r2, [r1, #0]
 8001c76:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c7a:	065c      	lsls	r4, r3, #25
 8001c7c:	d50b      	bpl.n	8001c96 <USB_ActivateEndpoint+0x20a>
 8001c7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c86:	051b      	lsls	r3, r3, #20
 8001c88:	0d1b      	lsrs	r3, r3, #20
 8001c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c92:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001c96:	780a      	ldrb	r2, [r1, #0]
 8001c98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ca0:	051b      	lsls	r3, r3, #20
 8001ca2:	0d1b      	lsrs	r3, r3, #20
 8001ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001cb0:	f248 0280 	movw	r2, #32896	; 0x8080
 8001cb4:	780c      	ldrb	r4, [r1, #0]
 8001cb6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc2:	041b      	lsls	r3, r3, #16
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001cd0:	7809      	ldrb	r1, [r1, #0]
 8001cd2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001cde:	041b      	lsls	r3, r3, #16
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001ce8:	e725      	b.n	8001b36 <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001cea:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001cee:	0452      	lsls	r2, r2, #17
 8001cf0:	d508      	bpl.n	8001d04 <USB_ActivateEndpoint+0x278>
 8001cf2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d00:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001d04:	780a      	ldrb	r2, [r1, #0]
 8001d06:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d0a:	065b      	lsls	r3, r3, #25
 8001d0c:	d50b      	bpl.n	8001d26 <USB_ActivateEndpoint+0x29a>
 8001d0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d16:	051b      	lsls	r3, r3, #20
 8001d18:	0d1b      	lsrs	r3, r3, #20
 8001d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d22:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001d26:	780a      	ldrb	r2, [r1, #0]
 8001d28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d30:	051b      	lsls	r3, r3, #20
 8001d32:	0d1b      	lsrs	r3, r3, #20
 8001d34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d3c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001d40:	f248 0280 	movw	r2, #32896	; 0x8080
 8001d44:	780c      	ldrb	r4, [r1, #0]
 8001d46:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d52:	041b      	lsls	r3, r3, #16
 8001d54:	0c1b      	lsrs	r3, r3, #16
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001d5c:	7809      	ldrb	r1, [r1, #0]
 8001d5e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d6a:	e7b8      	b.n	8001cde <USB_ActivateEndpoint+0x252>
 8001d6c:	ffff8000 	.word	0xffff8000

08001d70 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001d70:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8001d72:	7a8c      	ldrb	r4, [r1, #10]
 8001d74:	784a      	ldrb	r2, [r1, #1]
 8001d76:	780b      	ldrb	r3, [r1, #0]
 8001d78:	bbcc      	cbnz	r4, 8001dee <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 8001d7a:	b302      	cbz	r2, 8001dbe <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001d7c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d80:	0652      	lsls	r2, r2, #25
 8001d82:	d50b      	bpl.n	8001d9c <USB_DeactivateEndpoint+0x2c>
 8001d84:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d88:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d8c:	0512      	lsls	r2, r2, #20
 8001d8e:	0d12      	lsrs	r2, r2, #20
 8001d90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d94:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001d98:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8001d9c:	780a      	ldrb	r2, [r1, #0]
 8001d9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001daa:	041b      	lsls	r3, r3, #16
 8001dac:	0c1b      	lsrs	r3, r3, #16
 8001dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001dba:	2000      	movs	r0, #0
 8001dbc:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001dbe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001dc2:	0454      	lsls	r4, r2, #17
 8001dc4:	d50b      	bpl.n	8001dde <USB_DeactivateEndpoint+0x6e>
 8001dc6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001dca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001dce:	0512      	lsls	r2, r2, #20
 8001dd0:	0d12      	lsrs	r2, r2, #20
 8001dd2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001dd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dda:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001dde:	780a      	ldrb	r2, [r1, #0]
 8001de0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dec:	e7dd      	b.n	8001daa <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8001dee:	2a00      	cmp	r2, #0
 8001df0:	d148      	bne.n	8001e84 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001df2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001df6:	0452      	lsls	r2, r2, #17
 8001df8:	d50b      	bpl.n	8001e12 <USB_DeactivateEndpoint+0xa2>
 8001dfa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001dfe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e02:	0512      	lsls	r2, r2, #20
 8001e04:	0d12      	lsrs	r2, r2, #20
 8001e06:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e0e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001e12:	780a      	ldrb	r2, [r1, #0]
 8001e14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e18:	065c      	lsls	r4, r3, #25
 8001e1a:	d50b      	bpl.n	8001e34 <USB_DeactivateEndpoint+0xc4>
 8001e1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e24:	051b      	lsls	r3, r3, #20
 8001e26:	0d1b      	lsrs	r3, r3, #20
 8001e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e30:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001e34:	780a      	ldrb	r2, [r1, #0]
 8001e36:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e3e:	051b      	lsls	r3, r3, #20
 8001e40:	0d1b      	lsrs	r3, r3, #20
 8001e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e4a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001e4e:	f248 0280 	movw	r2, #32896	; 0x8080
 8001e52:	780c      	ldrb	r4, [r1, #0]
 8001e54:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001e58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	0c1b      	lsrs	r3, r3, #16
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001e6a:	7809      	ldrb	r1, [r1, #0]
 8001e6c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001e82:	e79a      	b.n	8001dba <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001e84:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001e88:	0452      	lsls	r2, r2, #17
 8001e8a:	d50b      	bpl.n	8001ea4 <USB_DeactivateEndpoint+0x134>
 8001e8c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001e90:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e94:	0512      	lsls	r2, r2, #20
 8001e96:	0d12      	lsrs	r2, r2, #20
 8001e98:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001e9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ea0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001ea4:	780a      	ldrb	r2, [r1, #0]
 8001ea6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001eaa:	065b      	lsls	r3, r3, #25
 8001eac:	d50b      	bpl.n	8001ec6 <USB_DeactivateEndpoint+0x156>
 8001eae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eb6:	051b      	lsls	r3, r3, #20
 8001eb8:	0d1b      	lsrs	r3, r3, #20
 8001eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ebe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ec2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001ec6:	780a      	ldrb	r2, [r1, #0]
 8001ec8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ed0:	051b      	lsls	r3, r3, #20
 8001ed2:	0d1b      	lsrs	r3, r3, #20
 8001ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001ee0:	f248 0280 	movw	r2, #32896	; 0x8080
 8001ee4:	780c      	ldrb	r4, [r1, #0]
 8001ee6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ef2:	041b      	lsls	r3, r3, #16
 8001ef4:	0c1b      	lsrs	r3, r3, #16
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001efc:	7809      	ldrb	r1, [r1, #0]
 8001efe:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0a:	e7b5      	b.n	8001e78 <USB_DeactivateEndpoint+0x108>

08001f0c <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001f0c:	780a      	ldrb	r2, [r1, #0]
 8001f0e:	b98a      	cbnz	r2, 8001f34 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001f10:	8803      	ldrh	r3, [r0, #0]
 8001f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	0c1b      	lsrs	r3, r3, #16
 8001f1e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f22:	f083 0310 	eor.w	r3, r3, #16
 8001f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2e:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8001f30:	2000      	movs	r0, #0
 8001f32:	4770      	bx	lr
    if (ep->is_in)
 8001f34:	784b      	ldrb	r3, [r1, #1]
 8001f36:	b183      	cbz	r3, 8001f5a <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001f38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f44:	041b      	lsls	r3, r3, #16
 8001f46:	0c1b      	lsrs	r3, r3, #16
 8001f48:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8001f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f54:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001f58:	e7ea      	b.n	8001f30 <USB_EPSetStall+0x24>
 8001f5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f66:	041b      	lsls	r3, r3, #16
 8001f68:	0c1b      	lsrs	r3, r3, #16
 8001f6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f6e:	e7ed      	b.n	8001f4c <USB_EPSetStall+0x40>

08001f70 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001f70:	784b      	ldrb	r3, [r1, #1]
 8001f72:	780a      	ldrb	r2, [r1, #0]
 8001f74:	b313      	cbz	r3, 8001fbc <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001f76:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f7a:	065b      	lsls	r3, r3, #25
 8001f7c:	d50b      	bpl.n	8001f96 <USB_EPClearStall+0x26>
 8001f7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f86:	051b      	lsls	r3, r3, #20
 8001f88:	0d1b      	lsrs	r3, r3, #20
 8001f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f92:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001f96:	780a      	ldrb	r2, [r1, #0]
 8001f98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fa4:	041b      	lsls	r3, r3, #16
 8001fa6:	0c1b      	lsrs	r3, r3, #16
 8001fa8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8001fb8:	2000      	movs	r0, #0
 8001fba:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001fbc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001fc0:	045b      	lsls	r3, r3, #17
 8001fc2:	d50b      	bpl.n	8001fdc <USB_EPClearStall+0x6c>
 8001fc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fcc:	051b      	lsls	r3, r3, #20
 8001fce:	0d1b      	lsrs	r3, r3, #20
 8001fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001fdc:	780a      	ldrb	r2, [r1, #0]
 8001fde:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fea:	041b      	lsls	r3, r3, #16
 8001fec:	0c1b      	lsrs	r3, r3, #16
 8001fee:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001ff2:	e7db      	b.n	8001fac <USB_EPClearStall+0x3c>

08001ff4 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001ff4:	b911      	cbnz	r1, 8001ffc <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	4770      	bx	lr

08002000 <USB_DevConnect>:
 8002000:	2000      	movs	r0, #0
 8002002:	4770      	bx	lr

08002004 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002004:	2000      	movs	r0, #0
 8002006:	4770      	bx	lr

08002008 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002008:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800200c:	b280      	uxth	r0, r0
 800200e:	4770      	bx	lr

08002010 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002010:	2000      	movs	r0, #0
 8002012:	4770      	bx	lr

08002014 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002014:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002016:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002018:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800201a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800201e:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002020:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002024:	42a3      	cmp	r3, r4
 8002026:	d100      	bne.n	800202a <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002028:	bd10      	pop	{r4, pc}
 800202a:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 800202e:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8002032:	3401      	adds	r4, #1
 8002034:	e7f6      	b.n	8002024 <USB_WritePMA+0x10>
	...

08002038 <USB_EPStartXfer>:
{
 8002038:	b570      	push	{r4, r5, r6, lr}
 800203a:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 800203c:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 800203e:	7849      	ldrb	r1, [r1, #1]
{
 8002040:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8002042:	2901      	cmp	r1, #1
 8002044:	6933      	ldr	r3, [r6, #16]
 8002046:	7ab0      	ldrb	r0, [r6, #10]
 8002048:	d166      	bne.n	8002118 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 800204a:	429a      	cmp	r2, r3
 800204c:	461c      	mov	r4, r3
      ep->xfer_len =0;
 800204e:	bf9b      	ittet	ls
 8002050:	2300      	movls	r3, #0
 8002052:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8002054:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8002056:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8002058:	bf88      	it	hi
 800205a:	61b2      	strhi	r2, [r6, #24]
 800205c:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 800205e:	bb10      	cbnz	r0, 80020a6 <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002060:	88b2      	ldrh	r2, [r6, #4]
 8002062:	6971      	ldr	r1, [r6, #20]
 8002064:	4628      	mov	r0, r5
 8002066:	f7ff ffd5 	bl	8002014 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800206a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800206e:	7832      	ldrb	r2, [r6, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	3302      	adds	r3, #2
 8002074:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002078:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800207c:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002080:	7832      	ldrb	r2, [r6, #0]
 8002082:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800208a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800208e:	041b      	lsls	r3, r3, #16
 8002090:	0c1b      	lsrs	r3, r3, #16
 8002092:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800209e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80020a2:	2000      	movs	r0, #0
 80020a4:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80020a6:	7832      	ldrb	r2, [r6, #0]
 80020a8:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 80020ac:	00d2      	lsls	r2, r2, #3
 80020ae:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80020b2:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80020b6:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80020b8:	d01a      	beq.n	80020f0 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80020ba:	3102      	adds	r1, #2
 80020bc:	440a      	add	r2, r1
 80020be:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80020c2:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 80020c6:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80020c8:	6971      	ldr	r1, [r6, #20]
 80020ca:	4628      	mov	r0, r5
 80020cc:	f7ff ffa2 	bl	8002014 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80020d0:	7873      	ldrb	r3, [r6, #1]
 80020d2:	7832      	ldrb	r2, [r6, #0]
 80020d4:	b99b      	cbnz	r3, 80020fe <USB_EPStartXfer+0xc6>
 80020d6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80020da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020de:	051b      	lsls	r3, r3, #20
 80020e0:	0d1b      	lsrs	r3, r3, #20
 80020e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020ea:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80020ee:	e7c7      	b.n	8002080 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80020f0:	440a      	add	r2, r1
 80020f2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80020f6:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 80020fa:	88f2      	ldrh	r2, [r6, #6]
 80020fc:	e7e4      	b.n	80020c8 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d1be      	bne.n	8002080 <USB_EPStartXfer+0x48>
 8002102:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800210a:	051b      	lsls	r3, r3, #20
 800210c:	0d1b      	lsrs	r3, r3, #20
 800210e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002116:	e7e8      	b.n	80020ea <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8002118:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 800211a:	bf93      	iteet	ls
 800211c:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 800211e:	1ad2      	subhi	r2, r2, r3
 8002120:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8002122:	61b3      	strls	r3, [r6, #24]
 8002124:	bf98      	it	ls
 8002126:	4613      	movls	r3, r2
 8002128:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 800212a:	bb70      	cbnz	r0, 800218a <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800212c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002130:	2b3e      	cmp	r3, #62	; 0x3e
 8002132:	b289      	uxth	r1, r1
 8002134:	f101 0106 	add.w	r1, r1, #6
 8002138:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800213c:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002140:	d918      	bls.n	8002174 <USB_EPStartXfer+0x13c>
 8002142:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8002146:	06db      	lsls	r3, r3, #27
 8002148:	bf04      	itt	eq
 800214a:	f102 33ff 	addeq.w	r3, r2, #4294967295
 800214e:	b29a      	uxtheq	r2, r3
 8002150:	4b38      	ldr	r3, [pc, #224]	; (8002234 <USB_EPStartXfer+0x1fc>)
 8002152:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002156:	b29b      	uxth	r3, r3
 8002158:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800215c:	7832      	ldrb	r2, [r6, #0]
 800215e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800216a:	041b      	lsls	r3, r3, #16
 800216c:	0c1b      	lsrs	r3, r3, #16
 800216e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002172:	e790      	b.n	8002096 <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002174:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002178:	07dc      	lsls	r4, r3, #31
 800217a:	bf44      	itt	mi
 800217c:	3201      	addmi	r2, #1
 800217e:	b292      	uxthmi	r2, r2
 8002180:	0292      	lsls	r2, r2, #10
 8002182:	b292      	uxth	r2, r2
 8002184:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8002188:	e7e8      	b.n	800215c <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800218a:	b9b9      	cbnz	r1, 80021bc <USB_EPStartXfer+0x184>
 800218c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002190:	2b3e      	cmp	r3, #62	; 0x3e
 8002192:	b289      	uxth	r1, r1
 8002194:	f101 0102 	add.w	r1, r1, #2
 8002198:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800219c:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 80021a0:	d928      	bls.n	80021f4 <USB_EPStartXfer+0x1bc>
 80021a2:	f3c3 104f 	ubfx	r0, r3, #5, #16
 80021a6:	06da      	lsls	r2, r3, #27
 80021a8:	bf04      	itt	eq
 80021aa:	f100 32ff 	addeq.w	r2, r0, #4294967295
 80021ae:	b290      	uxtheq	r0, r2
 80021b0:	4a20      	ldr	r2, [pc, #128]	; (8002234 <USB_EPStartXfer+0x1fc>)
 80021b2:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80021b6:	b292      	uxth	r2, r2
 80021b8:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 80021bc:	7872      	ldrb	r2, [r6, #1]
 80021be:	7831      	ldrb	r1, [r6, #0]
 80021c0:	bb5a      	cbnz	r2, 800221a <USB_EPStartXfer+0x1e2>
 80021c2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80021c6:	2b3e      	cmp	r3, #62	; 0x3e
 80021c8:	b292      	uxth	r2, r2
 80021ca:	f102 0206 	add.w	r2, r2, #6
 80021ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80021d2:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80021d6:	d915      	bls.n	8002204 <USB_EPStartXfer+0x1cc>
 80021d8:	f3c3 114f 	ubfx	r1, r3, #5, #16
 80021dc:	06dc      	lsls	r4, r3, #27
 80021de:	bf04      	itt	eq
 80021e0:	f101 33ff 	addeq.w	r3, r1, #4294967295
 80021e4:	b299      	uxtheq	r1, r3
 80021e6:	4b13      	ldr	r3, [pc, #76]	; (8002234 <USB_EPStartXfer+0x1fc>)
 80021e8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 80021f2:	e7b3      	b.n	800215c <USB_EPStartXfer+0x124>
 80021f4:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80021f8:	07d8      	lsls	r0, r3, #31
 80021fa:	bf44      	itt	mi
 80021fc:	3201      	addmi	r2, #1
 80021fe:	b292      	uxthmi	r2, r2
 8002200:	0292      	lsls	r2, r2, #10
 8002202:	e7d8      	b.n	80021b6 <USB_EPStartXfer+0x17e>
 8002204:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8002208:	07db      	lsls	r3, r3, #31
 800220a:	bf44      	itt	mi
 800220c:	3101      	addmi	r1, #1
 800220e:	b289      	uxthmi	r1, r1
 8002210:	0289      	lsls	r1, r1, #10
 8002212:	b289      	uxth	r1, r1
 8002214:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8002218:	e7a0      	b.n	800215c <USB_EPStartXfer+0x124>
 800221a:	2a01      	cmp	r2, #1
 800221c:	d19e      	bne.n	800215c <USB_EPStartXfer+0x124>
 800221e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002222:	b292      	uxth	r2, r2
 8002224:	3202      	adds	r2, #2
 8002226:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800222a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800222e:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8002232:	e793      	b.n	800215c <USB_EPStartXfer+0x124>
 8002234:	ffff8000 	.word	0xffff8000

08002238 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002238:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 800223a:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 800223c:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800223e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002242:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002244:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002248:	42a3      	cmp	r3, r4
 800224a:	d100      	bne.n	800224e <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800224c:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800224e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002252:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8002256:	3401      	adds	r4, #1
 8002258:	e7f6      	b.n	8002248 <USB_ReadPMA+0x10>

0800225a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800225a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800225c:	b180      	cbz	r0, 8002280 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800225e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002262:	b113      	cbz	r3, 800226a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002264:	2300      	movs	r3, #0
 8002266:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800226a:	b109      	cbz	r1, 8002270 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800226c:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002270:	2301      	movs	r3, #1
  pdev->id = id;
 8002272:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002274:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002278:	f000 fe84 	bl	8002f84 <USBD_LL_Init>
  
  return USBD_OK; 
 800227c:	2000      	movs	r0, #0
 800227e:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002280:	2002      	movs	r0, #2
}
 8002282:	bd08      	pop	{r3, pc}

08002284 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002284:	b119      	cbz	r1, 800228e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002286:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800228a:	2000      	movs	r0, #0
 800228c:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800228e:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002290:	4770      	bx	lr

08002292 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002292:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002294:	f000 feae 	bl	8002ff4 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002298:	2000      	movs	r0, #0
 800229a:	bd08      	pop	{r3, pc}

0800229c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800229c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800229e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022a2:	b90b      	cbnz	r3, 80022a8 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80022a4:	2002      	movs	r0, #2
 80022a6:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4798      	blx	r3
 80022ac:	2800      	cmp	r0, #0
 80022ae:	d1f9      	bne.n	80022a4 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80022b0:	bd08      	pop	{r3, pc}

080022b2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80022b2:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80022b4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4798      	blx	r3
  return USBD_OK;
}
 80022bc:	2000      	movs	r0, #0
 80022be:	bd08      	pop	{r3, pc}

080022c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80022c0:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80022c2:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 80022c6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80022c8:	4628      	mov	r0, r5
 80022ca:	f000 fa64 	bl	8002796 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80022ce:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80022d0:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80022d4:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80022d8:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80022dc:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80022e0:	f001 031f 	and.w	r3, r1, #31
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d00e      	beq.n	8002306 <USBD_LL_SetupStage+0x46>
 80022e8:	d307      	bcc.n	80022fa <USBD_LL_SetupStage+0x3a>
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d010      	beq.n	8002310 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80022ee:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80022f2:	4620      	mov	r0, r4
 80022f4:	f000 feaa 	bl	800304c <USBD_LL_StallEP>
    break;
 80022f8:	e003      	b.n	8002302 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80022fa:	4629      	mov	r1, r5
 80022fc:	4620      	mov	r0, r4
 80022fe:	f000 f8d5 	bl	80024ac <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002302:	2000      	movs	r0, #0
 8002304:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002306:	4629      	mov	r1, r5
 8002308:	4620      	mov	r0, r4
 800230a:	f000 f9c9 	bl	80026a0 <USBD_StdItfReq>
    break;
 800230e:	e7f8      	b.n	8002302 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002310:	4629      	mov	r1, r5
 8002312:	4620      	mov	r0, r4
 8002314:	f000 f9dc 	bl	80026d0 <USBD_StdEPReq>
    break;
 8002318:	e7f3      	b.n	8002302 <USBD_LL_SetupStage+0x42>

0800231a <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800231a:	b538      	push	{r3, r4, r5, lr}
 800231c:	4604      	mov	r4, r0
 800231e:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002320:	bb11      	cbnz	r1, 8002368 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002322:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002326:	2b03      	cmp	r3, #3
 8002328:	d10f      	bne.n	800234a <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 800232a:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800232e:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002332:	4293      	cmp	r3, r2
 8002334:	d90b      	bls.n	800234e <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002336:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002338:	429a      	cmp	r2, r3
 800233a:	bf28      	it	cs
 800233c:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800233e:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002342:	b292      	uxth	r2, r2
 8002344:	4629      	mov	r1, r5
 8002346:	f000 fa85 	bl	8002854 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800234a:	2000      	movs	r0, #0
 800234c:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800234e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	b123      	cbz	r3, 8002360 <USBD_LL_DataOutStage+0x46>
 8002356:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800235a:	2a03      	cmp	r2, #3
 800235c:	d100      	bne.n	8002360 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 800235e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002360:	4620      	mov	r0, r4
 8002362:	f000 fa7f 	bl	8002864 <USBD_CtlSendStatus>
 8002366:	e7f0      	b.n	800234a <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002368:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0eb      	beq.n	800234a <USBD_LL_DataOutStage+0x30>
 8002372:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002376:	2a03      	cmp	r2, #3
 8002378:	d1e7      	bne.n	800234a <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 800237a:	4798      	blx	r3
 800237c:	e7e5      	b.n	800234a <USBD_LL_DataOutStage+0x30>

0800237e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800237e:	b570      	push	{r4, r5, r6, lr}
 8002380:	4613      	mov	r3, r2
 8002382:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002384:	460e      	mov	r6, r1
 8002386:	2900      	cmp	r1, #0
 8002388:	d13d      	bne.n	8002406 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800238a:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800238e:	2a02      	cmp	r2, #2
 8002390:	d10f      	bne.n	80023b2 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002392:	69c5      	ldr	r5, [r0, #28]
 8002394:	6a02      	ldr	r2, [r0, #32]
 8002396:	4295      	cmp	r5, r2
 8002398:	d914      	bls.n	80023c4 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800239a:	1aaa      	subs	r2, r5, r2
 800239c:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800239e:	4619      	mov	r1, r3
 80023a0:	b292      	uxth	r2, r2
 80023a2:	f000 fa40 	bl	8002826 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80023a6:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80023a8:	461a      	mov	r2, r3
 80023aa:	4619      	mov	r1, r3
 80023ac:	4620      	mov	r0, r4
 80023ae:	f000 fe95 	bl	80030dc <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80023b2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d102      	bne.n	80023c0 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80023c0:	2000      	movs	r0, #0
 80023c2:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80023c4:	6983      	ldr	r3, [r0, #24]
 80023c6:	fbb3 f5f2 	udiv	r5, r3, r2
 80023ca:	fb02 3515 	mls	r5, r2, r5, r3
 80023ce:	b965      	cbnz	r5, 80023ea <USBD_LL_DataInStage+0x6c>
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d80a      	bhi.n	80023ea <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80023d4:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80023d8:	4293      	cmp	r3, r2
 80023da:	d206      	bcs.n	80023ea <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80023dc:	462a      	mov	r2, r5
 80023de:	f000 fa22 	bl	8002826 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80023e2:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80023e6:	462b      	mov	r3, r5
 80023e8:	e7de      	b.n	80023a8 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80023ea:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	b12b      	cbz	r3, 80023fe <USBD_LL_DataInStage+0x80>
 80023f2:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80023f6:	2a03      	cmp	r2, #3
 80023f8:	d101      	bne.n	80023fe <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80023fa:	4620      	mov	r0, r4
 80023fc:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80023fe:	4620      	mov	r0, r4
 8002400:	f000 fa3b 	bl	800287a <USBD_CtlReceiveStatus>
 8002404:	e7d5      	b.n	80023b2 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002406:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0d7      	beq.n	80023c0 <USBD_LL_DataInStage+0x42>
 8002410:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002414:	2a03      	cmp	r2, #3
 8002416:	d1d3      	bne.n	80023c0 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002418:	4798      	blx	r3
 800241a:	e7d1      	b.n	80023c0 <USBD_LL_DataInStage+0x42>

0800241c <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800241c:	2200      	movs	r2, #0
{
 800241e:	b538      	push	{r3, r4, r5, lr}
 8002420:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002422:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002424:	4611      	mov	r1, r2
 8002426:	2340      	movs	r3, #64	; 0x40
 8002428:	f000 fdf2 	bl	8003010 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800242c:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800242e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002432:	2200      	movs	r2, #0
 8002434:	2180      	movs	r1, #128	; 0x80
 8002436:	4620      	mov	r0, r4
 8002438:	f000 fdea 	bl	8003010 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800243c:	2301      	movs	r3, #1
 800243e:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002442:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002446:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002448:	b12b      	cbz	r3, 8002456 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800244a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800244e:	7921      	ldrb	r1, [r4, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4620      	mov	r0, r4
 8002454:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002456:	2000      	movs	r0, #0
 8002458:	bd38      	pop	{r3, r4, r5, pc}

0800245a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800245a:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800245c:	2000      	movs	r0, #0
 800245e:	4770      	bx	lr

08002460 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002460:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002464:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002468:	2304      	movs	r3, #4
 800246a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800246e:	2000      	movs	r0, #0
 8002470:	4770      	bx	lr

08002472 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002472:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002476:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800247a:	2000      	movs	r0, #0
 800247c:	4770      	bx	lr

0800247e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800247e:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002480:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002484:	2a03      	cmp	r2, #3
 8002486:	d104      	bne.n	8002492 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002488:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	b103      	cbz	r3, 8002492 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002490:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002492:	2000      	movs	r0, #0
 8002494:	bd08      	pop	{r3, pc}

08002496 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002496:	b510      	push	{r4, lr}
 8002498:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800249a:	2180      	movs	r1, #128	; 0x80
 800249c:	f000 fdd6 	bl	800304c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80024a0:	4620      	mov	r0, r4
}
 80024a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80024a6:	2100      	movs	r1, #0
 80024a8:	f000 bdd0 	b.w	800304c <USBD_LL_StallEP>

080024ac <USBD_StdDevReq>:
{
 80024ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80024ae:	784b      	ldrb	r3, [r1, #1]
{
 80024b0:	4604      	mov	r4, r0
 80024b2:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	d879      	bhi.n	80025ac <USBD_StdDevReq+0x100>
 80024b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80024bc:	00e500c9 	.word	0x00e500c9
 80024c0:	00d90078 	.word	0x00d90078
 80024c4:	006d0078 	.word	0x006d0078
 80024c8:	0078000a 	.word	0x0078000a
 80024cc:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80024d0:	884b      	ldrh	r3, [r1, #2]
 80024d2:	0a1a      	lsrs	r2, r3, #8
 80024d4:	3a01      	subs	r2, #1
 80024d6:	2a06      	cmp	r2, #6
 80024d8:	d868      	bhi.n	80025ac <USBD_StdDevReq+0x100>
 80024da:	e8df f002 	tbb	[pc, r2]
 80024de:	1c04      	.short	0x1c04
 80024e0:	49676729 	.word	0x49676729
 80024e4:	52          	.byte	0x52
 80024e5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80024e6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80024ea:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80024ec:	f10d 0106 	add.w	r1, sp, #6
 80024f0:	7c20      	ldrb	r0, [r4, #16]
 80024f2:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80024f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	d067      	beq.n	80025cc <USBD_StdDevReq+0x120>
 80024fc:	88eb      	ldrh	r3, [r5, #6]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d064      	beq.n	80025cc <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002502:	429a      	cmp	r2, r3
 8002504:	bf28      	it	cs
 8002506:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002508:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 800250a:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800250e:	4620      	mov	r0, r4
 8002510:	f000 f97c 	bl	800280c <USBD_CtlSendData>
 8002514:	e05a      	b.n	80025cc <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002516:	7c02      	ldrb	r2, [r0, #16]
 8002518:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800251c:	b932      	cbnz	r2, 800252c <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002520:	f10d 0006 	add.w	r0, sp, #6
 8002524:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002526:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002528:	7043      	strb	r3, [r0, #1]
 800252a:	e7e3      	b.n	80024f4 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	e7f7      	b.n	8002520 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b05      	cmp	r3, #5
 8002534:	d83a      	bhi.n	80025ac <USBD_StdDevReq+0x100>
 8002536:	e8df f003 	tbb	[pc, r3]
 800253a:	0703      	.short	0x0703
 800253c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002540:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	e7d1      	b.n	80024ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002548:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	e7cd      	b.n	80024ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002550:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	e7c9      	b.n	80024ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002558:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	e7c5      	b.n	80024ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002560:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	e7c1      	b.n	80024ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002568:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	e7bd      	b.n	80024ec <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002570:	7c03      	ldrb	r3, [r0, #16]
 8002572:	b9db      	cbnz	r3, 80025ac <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002574:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002578:	f10d 0006 	add.w	r0, sp, #6
 800257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257e:	4798      	blx	r3
 8002580:	e7b8      	b.n	80024f4 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002582:	7c03      	ldrb	r3, [r0, #16]
 8002584:	b993      	cbnz	r3, 80025ac <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002586:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800258a:	f10d 0006 	add.w	r0, sp, #6
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002592:	2307      	movs	r3, #7
 8002594:	e7c8      	b.n	8002528 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002596:	888b      	ldrh	r3, [r1, #4]
 8002598:	b943      	cbnz	r3, 80025ac <USBD_StdDevReq+0x100>
 800259a:	88cb      	ldrh	r3, [r1, #6]
 800259c:	b933      	cbnz	r3, 80025ac <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800259e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80025a2:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80025a4:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80025a6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80025aa:	d103      	bne.n	80025b4 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80025ac:	4620      	mov	r0, r4
 80025ae:	f7ff ff72 	bl	8002496 <USBD_CtlError.constprop.0>
    break;
 80025b2:	e00b      	b.n	80025cc <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80025b4:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80025b8:	4629      	mov	r1, r5
 80025ba:	f000 fd73 	bl	80030a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80025be:	4620      	mov	r0, r4
 80025c0:	f000 f950 	bl	8002864 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80025c4:	b12d      	cbz	r5, 80025d2 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80025c6:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80025c8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80025cc:	2000      	movs	r0, #0
 80025ce:	b003      	add	sp, #12
 80025d0:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80025d2:	2301      	movs	r3, #1
 80025d4:	e7f8      	b.n	80025c8 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80025d6:	7889      	ldrb	r1, [r1, #2]
 80025d8:	4d30      	ldr	r5, [pc, #192]	; (800269c <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80025da:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80025dc:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80025de:	d8e5      	bhi.n	80025ac <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80025e0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d00c      	beq.n	8002602 <USBD_StdDevReq+0x156>
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d1df      	bne.n	80025ac <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80025ec:	b9b1      	cbnz	r1, 800261c <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80025ee:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 80025f0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80025f2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 80025f6:	f7ff fe5c 	bl	80022b2 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80025fa:	4620      	mov	r0, r4
 80025fc:	f000 f932 	bl	8002864 <USBD_CtlSendStatus>
 8002600:	e7e4      	b.n	80025cc <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8002602:	2900      	cmp	r1, #0
 8002604:	d0f9      	beq.n	80025fa <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002606:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002608:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800260a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800260c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002610:	4620      	mov	r0, r4
 8002612:	f7ff fe43 	bl	800229c <USBD_SetClassConfig>
 8002616:	2802      	cmp	r0, #2
 8002618:	d1ef      	bne.n	80025fa <USBD_StdDevReq+0x14e>
 800261a:	e7c7      	b.n	80025ac <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 800261c:	6841      	ldr	r1, [r0, #4]
 800261e:	2901      	cmp	r1, #1
 8002620:	d0eb      	beq.n	80025fa <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002622:	b2c9      	uxtb	r1, r1
 8002624:	f7ff fe45 	bl	80022b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002628:	7829      	ldrb	r1, [r5, #0]
 800262a:	6061      	str	r1, [r4, #4]
 800262c:	e7f0      	b.n	8002610 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800262e:	88ca      	ldrh	r2, [r1, #6]
 8002630:	2a01      	cmp	r2, #1
 8002632:	d1bb      	bne.n	80025ac <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002634:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002638:	2b02      	cmp	r3, #2
 800263a:	d003      	beq.n	8002644 <USBD_StdDevReq+0x198>
 800263c:	2b03      	cmp	r3, #3
 800263e:	d1b5      	bne.n	80025ac <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8002640:	1d01      	adds	r1, r0, #4
 8002642:	e764      	b.n	800250e <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002644:	4601      	mov	r1, r0
 8002646:	2300      	movs	r3, #0
 8002648:	f841 3f08 	str.w	r3, [r1, #8]!
 800264c:	e75f      	b.n	800250e <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800264e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002652:	3b02      	subs	r3, #2
 8002654:	2b01      	cmp	r3, #1
 8002656:	d8a9      	bhi.n	80025ac <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002658:	2301      	movs	r3, #1
 800265a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800265c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002660:	b10b      	cbz	r3, 8002666 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002662:	2303      	movs	r3, #3
 8002664:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002666:	2202      	movs	r2, #2
 8002668:	f104 010c 	add.w	r1, r4, #12
 800266c:	e74f      	b.n	800250e <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800266e:	884b      	ldrh	r3, [r1, #2]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d1ab      	bne.n	80025cc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002674:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002678:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800267c:	4629      	mov	r1, r5
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4620      	mov	r0, r4
 8002682:	4798      	blx	r3
 8002684:	e7b9      	b.n	80025fa <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002686:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800268a:	3b02      	subs	r3, #2
 800268c:	2b01      	cmp	r3, #1
 800268e:	d88d      	bhi.n	80025ac <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002690:	884b      	ldrh	r3, [r1, #2]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d19a      	bne.n	80025cc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002696:	2300      	movs	r3, #0
 8002698:	e7ec      	b.n	8002674 <USBD_StdDevReq+0x1c8>
 800269a:	bf00      	nop
 800269c:	200001c8 	.word	0x200001c8

080026a0 <USBD_StdItfReq>:
{
 80026a0:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80026a2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 80026a6:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 80026a8:	2b03      	cmp	r3, #3
{
 80026aa:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80026ac:	d10d      	bne.n	80026ca <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80026ae:	790b      	ldrb	r3, [r1, #4]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d80a      	bhi.n	80026ca <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80026b4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80026bc:	88eb      	ldrh	r3, [r5, #6]
 80026be:	b913      	cbnz	r3, 80026c6 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80026c0:	4620      	mov	r0, r4
 80026c2:	f000 f8cf 	bl	8002864 <USBD_CtlSendStatus>
}
 80026c6:	2000      	movs	r0, #0
 80026c8:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80026ca:	f7ff fee4 	bl	8002496 <USBD_CtlError.constprop.0>
    break;
 80026ce:	e7fa      	b.n	80026c6 <USBD_StdItfReq+0x26>

080026d0 <USBD_StdEPReq>:
{
 80026d0:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80026d2:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80026d4:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80026d6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80026da:	2a20      	cmp	r2, #32
{
 80026dc:	4604      	mov	r4, r0
 80026de:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80026e0:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80026e2:	d105      	bne.n	80026f0 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80026e4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	4798      	blx	r3
}
 80026ec:	2000      	movs	r0, #0
 80026ee:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80026f0:	784a      	ldrb	r2, [r1, #1]
 80026f2:	2a01      	cmp	r2, #1
 80026f4:	d01c      	beq.n	8002730 <USBD_StdEPReq+0x60>
 80026f6:	d32a      	bcc.n	800274e <USBD_StdEPReq+0x7e>
 80026f8:	2a03      	cmp	r2, #3
 80026fa:	d1f7      	bne.n	80026ec <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80026fc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002700:	2a02      	cmp	r2, #2
 8002702:	d040      	beq.n	8002786 <USBD_StdEPReq+0xb6>
 8002704:	2a03      	cmp	r2, #3
 8002706:	d002      	beq.n	800270e <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002708:	f7ff fec5 	bl	8002496 <USBD_CtlError.constprop.0>
      break;
 800270c:	e7ee      	b.n	80026ec <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800270e:	884a      	ldrh	r2, [r1, #2]
 8002710:	b922      	cbnz	r2, 800271c <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002712:	065e      	lsls	r6, r3, #25
 8002714:	d002      	beq.n	800271c <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002716:	4619      	mov	r1, r3
 8002718:	f000 fc98 	bl	800304c <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 800271c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002720:	4629      	mov	r1, r5
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4620      	mov	r0, r4
 8002726:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002728:	4620      	mov	r0, r4
 800272a:	f000 f89b 	bl	8002864 <USBD_CtlSendStatus>
 800272e:	e7dd      	b.n	80026ec <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002730:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002734:	2a02      	cmp	r2, #2
 8002736:	d026      	beq.n	8002786 <USBD_StdEPReq+0xb6>
 8002738:	2a03      	cmp	r2, #3
 800273a:	d1e5      	bne.n	8002708 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800273c:	884a      	ldrh	r2, [r1, #2]
 800273e:	2a00      	cmp	r2, #0
 8002740:	d1d4      	bne.n	80026ec <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8002742:	0659      	lsls	r1, r3, #25
 8002744:	d0f0      	beq.n	8002728 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002746:	4619      	mov	r1, r3
 8002748:	f000 fc8e 	bl	8003068 <USBD_LL_ClearStallEP>
 800274c:	e7e6      	b.n	800271c <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 800274e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002752:	2a02      	cmp	r2, #2
 8002754:	d017      	beq.n	8002786 <USBD_StdEPReq+0xb6>
 8002756:	2a03      	cmp	r2, #3
 8002758:	d1d6      	bne.n	8002708 <USBD_StdEPReq+0x38>
 800275a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800275e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002762:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002766:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002768:	bf14      	ite	ne
 800276a:	3514      	addne	r5, #20
 800276c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002770:	f000 fc88 	bl	8003084 <USBD_LL_IsStallEP>
 8002774:	b168      	cbz	r0, 8002792 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002776:	2301      	movs	r3, #1
 8002778:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800277a:	2202      	movs	r2, #2
 800277c:	4629      	mov	r1, r5
 800277e:	4620      	mov	r0, r4
 8002780:	f000 f844 	bl	800280c <USBD_CtlSendData>
      break;
 8002784:	e7b2      	b.n	80026ec <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002786:	065a      	lsls	r2, r3, #25
 8002788:	d0b0      	beq.n	80026ec <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800278a:	4619      	mov	r1, r3
 800278c:	f000 fc5e 	bl	800304c <USBD_LL_StallEP>
 8002790:	e7ac      	b.n	80026ec <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002792:	6028      	str	r0, [r5, #0]
 8002794:	e7f1      	b.n	800277a <USBD_StdEPReq+0xaa>

08002796 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002796:	780b      	ldrb	r3, [r1, #0]
 8002798:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800279a:	784b      	ldrb	r3, [r1, #1]
 800279c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800279e:	78ca      	ldrb	r2, [r1, #3]
 80027a0:	788b      	ldrb	r3, [r1, #2]
 80027a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027a6:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80027a8:	794a      	ldrb	r2, [r1, #5]
 80027aa:	790b      	ldrb	r3, [r1, #4]
 80027ac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027b0:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80027b2:	79ca      	ldrb	r2, [r1, #7]
 80027b4:	798b      	ldrb	r3, [r1, #6]
 80027b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027ba:	80c3      	strh	r3, [r0, #6]
 80027bc:	4770      	bx	lr

080027be <USBD_CtlError>:
{
 80027be:	b510      	push	{r4, lr}
 80027c0:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80027c2:	2180      	movs	r1, #128	; 0x80
 80027c4:	f000 fc42 	bl	800304c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80027c8:	4620      	mov	r0, r4
}
 80027ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80027ce:	2100      	movs	r1, #0
 80027d0:	f000 bc3c 	b.w	800304c <USBD_LL_StallEP>

080027d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80027d4:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80027d6:	b188      	cbz	r0, 80027fc <USBD_GetString+0x28>
 80027d8:	4605      	mov	r5, r0
 80027da:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80027dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d1f9      	bne.n	80027da <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	3302      	adds	r3, #2
 80027ea:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80027ec:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80027ee:	2303      	movs	r3, #3
 80027f0:	704b      	strb	r3, [r1, #1]
 80027f2:	2302      	movs	r3, #2
 80027f4:	3801      	subs	r0, #1
    while (*desc != '\0') 
 80027f6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80027fa:	b905      	cbnz	r5, 80027fe <USBD_GetString+0x2a>
 80027fc:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	54cd      	strb	r5, [r1, r3]
 8002802:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002804:	3302      	adds	r3, #2
 8002806:	b2db      	uxtb	r3, r3
 8002808:	548c      	strb	r4, [r1, r2]
 800280a:	e7f4      	b.n	80027f6 <USBD_GetString+0x22>

0800280c <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800280c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800280e:	2202      	movs	r2, #2
{
 8002810:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002812:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002816:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002818:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800281a:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800281c:	2100      	movs	r1, #0
 800281e:	f000 fc4f 	bl	80030c0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002822:	2000      	movs	r0, #0
 8002824:	bd10      	pop	{r4, pc}

08002826 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002826:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002828:	4613      	mov	r3, r2
 800282a:	460a      	mov	r2, r1
 800282c:	2100      	movs	r1, #0
 800282e:	f000 fc47 	bl	80030c0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002832:	2000      	movs	r0, #0
 8002834:	bd08      	pop	{r3, pc}

08002836 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002836:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002838:	2203      	movs	r2, #3
{
 800283a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800283c:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8002840:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002844:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002846:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800284a:	2100      	movs	r1, #0
 800284c:	f000 fc46 	bl	80030dc <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002850:	2000      	movs	r0, #0
 8002852:	bd10      	pop	{r4, pc}

08002854 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002854:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002856:	4613      	mov	r3, r2
 8002858:	460a      	mov	r2, r1
 800285a:	2100      	movs	r1, #0
 800285c:	f000 fc3e 	bl	80030dc <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002860:	2000      	movs	r0, #0
 8002862:	bd08      	pop	{r3, pc}

08002864 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002864:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002866:	2304      	movs	r3, #4
 8002868:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800286c:	2300      	movs	r3, #0
 800286e:	461a      	mov	r2, r3
 8002870:	4619      	mov	r1, r3
 8002872:	f000 fc25 	bl	80030c0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002876:	2000      	movs	r0, #0
 8002878:	bd08      	pop	{r3, pc}

0800287a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800287a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800287c:	2305      	movs	r3, #5
 800287e:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002882:	2300      	movs	r3, #0
 8002884:	461a      	mov	r2, r3
 8002886:	4619      	mov	r1, r3
 8002888:	f000 fc28 	bl	80030dc <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800288c:	2000      	movs	r0, #0
 800288e:	bd08      	pop	{r3, pc}

08002890 <IS31FL3236_SetChipEnable>:
/*
 * Changes the chip enable state of the specified chip.
 */
void IS31FL3236_SetChipEnable(IS31FL3236_HandleTypeDef* handle, uint8_t enable_state)
{
	HAL_GPIO_WritePin(handle->Init.Chip_Enable_Signal_Port, handle->Init.Chip_Enable_Signal_Pin, enable_state);
 8002890:	460a      	mov	r2, r1
 8002892:	8a01      	ldrh	r1, [r0, #16]
 8002894:	68c0      	ldr	r0, [r0, #12]
 8002896:	f7fd bdc1 	b.w	800041c <HAL_GPIO_WritePin>

0800289a <IS31FL3236_WriteRegister>:

/*
 * Writes a given value to a given register.
 */
void IS31FL3236_WriteRegister(IS31FL3236_HandleTypeDef* handle, uint8_t register_address, uint8_t value)
{
 800289a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[2];
	buf[0] = register_address;
	buf[1] = value;
	HAL_I2C_Master_Transmit(handle->Init.I2C_Bus, handle->Init.I2C_Device_Address, buf, 2, handle->Init.I2C_Transmit_Timeout_Milliseconds);
 800289c:	6883      	ldr	r3, [r0, #8]
	buf[0] = register_address;
 800289e:	f88d 100c 	strb.w	r1, [sp, #12]
	HAL_I2C_Master_Transmit(handle->Init.I2C_Bus, handle->Init.I2C_Device_Address, buf, 2, handle->Init.I2C_Transmit_Timeout_Milliseconds);
 80028a2:	7901      	ldrb	r1, [r0, #4]
 80028a4:	9300      	str	r3, [sp, #0]
	buf[1] = value;
 80028a6:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(handle->Init.I2C_Bus, handle->Init.I2C_Device_Address, buf, 2, handle->Init.I2C_Transmit_Timeout_Milliseconds);
 80028aa:	2302      	movs	r3, #2
 80028ac:	aa03      	add	r2, sp, #12
 80028ae:	6800      	ldr	r0, [r0, #0]
 80028b0:	f7fd ff08 	bl	80006c4 <HAL_I2C_Master_Transmit>
}
 80028b4:	b005      	add	sp, #20
 80028b6:	f85d fb04 	ldr.w	pc, [sp], #4

080028ba <IS31FL3236_Reset>:
/*
 * Resets the specified chip. (Through I2C)
 */
void IS31FL3236_Reset(IS31FL3236_HandleTypeDef* handle)
{
	IS31FL3236_WriteRegister(handle, IS31FL3236_REGISTER_RESET, 0x00);
 80028ba:	2200      	movs	r2, #0
 80028bc:	214f      	movs	r1, #79	; 0x4f
 80028be:	f7ff bfec 	b.w	800289a <IS31FL3236_WriteRegister>

080028c2 <IS31FL3236_Update>:
/*
 * Latches the written PWM and led control values in the chip to the led control circuit.
 */
void IS31FL3236_Update(IS31FL3236_HandleTypeDef* handle)
{
	IS31FL3236_WriteRegister(handle, IS31FL3236_REGISTER_UPDATE, 0x00);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2125      	movs	r1, #37	; 0x25
 80028c6:	f7ff bfe8 	b.w	800289a <IS31FL3236_WriteRegister>

080028ca <IS31FL3236_WriteLEDControl>:
/*
 * Sets the LED control for the specified chip / channel.
 */
void IS31FL3236_WriteLEDControl(IS31FL3236_HandleTypeDef* handle, uint8_t channel, uint8_t led_current_setting, uint8_t led_state)
{
	if (channel < IS31FL3236_MAX_CHANNELS)
 80028ca:	2923      	cmp	r1, #35	; 0x23
 80028cc:	d804      	bhi.n	80028d8 <IS31FL3236_WriteLEDControl+0xe>
		IS31FL3236_WriteRegister(handle, IS31FL3236_REGISTER_LED_CTRL + channel, (led_current_setting | led_state));
 80028ce:	3126      	adds	r1, #38	; 0x26
 80028d0:	431a      	orrs	r2, r3
 80028d2:	b2c9      	uxtb	r1, r1
 80028d4:	f7ff bfe1 	b.w	800289a <IS31FL3236_WriteRegister>
 80028d8:	4770      	bx	lr

080028da <IS31FL3236_WriteGlobalLEDControl>:

/*
 * Writes an led control word to all channels of a specified chip.
 */
void IS31FL3236_WriteGlobalLEDControl(IS31FL3236_HandleTypeDef* handle, uint8_t led_current_setting, uint8_t led_state)
{
 80028da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028dc:	4605      	mov	r5, r0
 80028de:	460e      	mov	r6, r1
 80028e0:	4617      	mov	r7, r2
 80028e2:	2400      	movs	r4, #0
	for (uint8_t i = 0; i < IS31FL3236_MAX_CHANNELS; i++)
	{
		IS31FL3236_WriteLEDControl(handle, i, led_current_setting, led_state);
 80028e4:	b2e1      	uxtb	r1, r4
 80028e6:	463b      	mov	r3, r7
 80028e8:	4632      	mov	r2, r6
 80028ea:	4628      	mov	r0, r5
 80028ec:	3401      	adds	r4, #1
 80028ee:	f7ff ffec 	bl	80028ca <IS31FL3236_WriteLEDControl>
	for (uint8_t i = 0; i < IS31FL3236_MAX_CHANNELS; i++)
 80028f2:	2c24      	cmp	r4, #36	; 0x24
 80028f4:	d1f6      	bne.n	80028e4 <IS31FL3236_WriteGlobalLEDControl+0xa>
	}
}
 80028f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080028f8 <IS31FL3236_WritePWM>:
/*
 * Writes the given PWM value (0 - 255) to the specified chip / channel.
 */
void IS31FL3236_WritePWM(IS31FL3236_HandleTypeDef* handle, uint8_t channel, uint8_t pwm_value)
{
	if (channel < IS31FL3236_MAX_CHANNELS)
 80028f8:	2923      	cmp	r1, #35	; 0x23
 80028fa:	d803      	bhi.n	8002904 <IS31FL3236_WritePWM+0xc>
		IS31FL3236_WriteRegister(handle, IS31FL3236_REGISTER_PWM + channel, pwm_value);
 80028fc:	3101      	adds	r1, #1
 80028fe:	b2c9      	uxtb	r1, r1
 8002900:	f7ff bfcb 	b.w	800289a <IS31FL3236_WriteRegister>
 8002904:	4770      	bx	lr

08002906 <IS31FL3236_WriteRGBPWM>:
/*
 * Writes a given color (r, g, b) to a specified rgb channel of the specified chip. The periodic order the individual leds
 * are connected can be set in the Init attribute of the handle struct. (RGB_Mode_Color_x)
 */
void IS31FL3236_WriteRGBPWM(IS31FL3236_HandleTypeDef* handle, uint8_t rgb_channel, uint8_t red, uint8_t green, uint8_t blue)
{
 8002906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (rgb_channel < IS31FL3236_MAX_RGB_CHANNELS)
 800290a:	290b      	cmp	r1, #11
{
 800290c:	4605      	mov	r5, r0
 800290e:	4616      	mov	r6, r2
 8002910:	461f      	mov	r7, r3
 8002912:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (rgb_channel < IS31FL3236_MAX_RGB_CHANNELS)
 8002916:	d833      	bhi.n	8002980 <IS31FL3236_WriteRGBPWM+0x7a>
/*
 * Selects red, green or blue value by the given color selector.
 */
static uint8_t __IS31FL3236_Select_Color(uint8_t color_selector, uint8_t r, uint8_t g, uint8_t b)
{
	switch (color_selector)
 8002918:	7c83      	ldrb	r3, [r0, #18]
		IS31FL3236_WritePWM(handle, rgb_channel * 3, __IS31FL3236_Select_Color(handle->Init.RGB_Mode_Color_1, red, green, blue));
 800291a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	switch (color_selector)
 800291e:	2b01      	cmp	r3, #1
		IS31FL3236_WritePWM(handle, rgb_channel * 3, __IS31FL3236_Select_Color(handle->Init.RGB_Mode_Color_1, red, green, blue));
 8002920:	b2cc      	uxtb	r4, r1
	switch (color_selector)
 8002922:	d025      	beq.n	8002970 <IS31FL3236_WriteRGBPWM+0x6a>
 8002924:	d303      	bcc.n	800292e <IS31FL3236_WriteRGBPWM+0x28>
 8002926:	2b02      	cmp	r3, #2
	case IS31FL3236_RGB_CONFIG_GREEN:
		return g;
	case IS31FL3236_RGB_CONFIG_BLUE:
		return b;
	default:
		return 0;
 8002928:	bf0c      	ite	eq
 800292a:	4642      	moveq	r2, r8
 800292c:	2200      	movne	r2, #0
		IS31FL3236_WritePWM(handle, rgb_channel * 3, __IS31FL3236_Select_Color(handle->Init.RGB_Mode_Color_1, red, green, blue));
 800292e:	4621      	mov	r1, r4
 8002930:	4628      	mov	r0, r5
 8002932:	f7ff ffe1 	bl	80028f8 <IS31FL3236_WritePWM>
	switch (color_selector)
 8002936:	7ceb      	ldrb	r3, [r5, #19]
		IS31FL3236_WritePWM(handle, (rgb_channel * 3) + 1, __IS31FL3236_Select_Color(handle->Init.RGB_Mode_Color_2, red, green, blue));
 8002938:	1c61      	adds	r1, r4, #1
	switch (color_selector)
 800293a:	2b01      	cmp	r3, #1
		IS31FL3236_WritePWM(handle, (rgb_channel * 3) + 1, __IS31FL3236_Select_Color(handle->Init.RGB_Mode_Color_2, red, green, blue));
 800293c:	b2c9      	uxtb	r1, r1
	switch (color_selector)
 800293e:	d019      	beq.n	8002974 <IS31FL3236_WriteRGBPWM+0x6e>
 8002940:	d31a      	bcc.n	8002978 <IS31FL3236_WriteRGBPWM+0x72>
 8002942:	2b02      	cmp	r3, #2
		return 0;
 8002944:	bf0c      	ite	eq
 8002946:	4642      	moveq	r2, r8
 8002948:	2200      	movne	r2, #0
		IS31FL3236_WritePWM(handle, (rgb_channel * 3) + 1, __IS31FL3236_Select_Color(handle->Init.RGB_Mode_Color_2, red, green, blue));
 800294a:	4628      	mov	r0, r5
 800294c:	f7ff ffd4 	bl	80028f8 <IS31FL3236_WritePWM>
	switch (color_selector)
 8002950:	7d2b      	ldrb	r3, [r5, #20]
		IS31FL3236_WritePWM(handle, (rgb_channel * 3) + 2, __IS31FL3236_Select_Color(handle->Init.RGB_Mode_Color_3, red, green, blue));
 8002952:	1ca1      	adds	r1, r4, #2
	switch (color_selector)
 8002954:	2b01      	cmp	r3, #1
		IS31FL3236_WritePWM(handle, (rgb_channel * 3) + 2, __IS31FL3236_Select_Color(handle->Init.RGB_Mode_Color_3, red, green, blue));
 8002956:	b2c9      	uxtb	r1, r1
	switch (color_selector)
 8002958:	d010      	beq.n	800297c <IS31FL3236_WriteRGBPWM+0x76>
 800295a:	d303      	bcc.n	8002964 <IS31FL3236_WriteRGBPWM+0x5e>
 800295c:	2b02      	cmp	r3, #2
		return 0;
 800295e:	bf0c      	ite	eq
 8002960:	4646      	moveq	r6, r8
 8002962:	2600      	movne	r6, #0
		IS31FL3236_WritePWM(handle, (rgb_channel * 3) + 2, __IS31FL3236_Select_Color(handle->Init.RGB_Mode_Color_3, red, green, blue));
 8002964:	4632      	mov	r2, r6
 8002966:	4628      	mov	r0, r5
}
 8002968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		IS31FL3236_WritePWM(handle, (rgb_channel * 3) + 2, __IS31FL3236_Select_Color(handle->Init.RGB_Mode_Color_3, red, green, blue));
 800296c:	f7ff bfc4 	b.w	80028f8 <IS31FL3236_WritePWM>
		return g;
 8002970:	463a      	mov	r2, r7
 8002972:	e7dc      	b.n	800292e <IS31FL3236_WriteRGBPWM+0x28>
 8002974:	463a      	mov	r2, r7
 8002976:	e7e8      	b.n	800294a <IS31FL3236_WriteRGBPWM+0x44>
		return r;
 8002978:	4632      	mov	r2, r6
 800297a:	e7e6      	b.n	800294a <IS31FL3236_WriteRGBPWM+0x44>
		return g;
 800297c:	463e      	mov	r6, r7
 800297e:	e7f1      	b.n	8002964 <IS31FL3236_WriteRGBPWM+0x5e>
 8002980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002984 <IS31FL3236_SetSoftwareShutdown>:
	IS31FL3236_WriteRegister(handle, IS31FL3236_REGISTER_SHUTDOWN, software_shutdown_mode);
 8002984:	460a      	mov	r2, r1
 8002986:	2100      	movs	r1, #0
 8002988:	f7ff bf87 	b.w	800289a <IS31FL3236_WriteRegister>

0800298c <IS31FL3236_Init>:
{
 800298c:	b510      	push	{r4, lr}
 800298e:	4604      	mov	r4, r0
	IS31FL3236_Reset(handle);
 8002990:	f7ff ff93 	bl	80028ba <IS31FL3236_Reset>
	IS31FL3236_SetSoftwareShutdown(handle, IS31FL3236_SOFTWARE_SHUTDOWN_DISABLED);
 8002994:	4620      	mov	r0, r4
 8002996:	2101      	movs	r1, #1
 8002998:	f7ff fff4 	bl	8002984 <IS31FL3236_SetSoftwareShutdown>
	IS31FL3236_SetChipEnable(handle, IS31FL3236_CHIP_ENABLED);
 800299c:	4620      	mov	r0, r4
}
 800299e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	IS31FL3236_SetChipEnable(handle, IS31FL3236_CHIP_ENABLED);
 80029a2:	2101      	movs	r1, #1
 80029a4:	f7ff bf74 	b.w	8002890 <IS31FL3236_SetChipEnable>

080029a8 <FW_Exec>:
	// Init module InfiniKeys
	FW_Setup_INFINIKEYS();
}

void FW_Exec(void)
{
 80029a8:	b508      	push	{r3, lr}
	while (1)
	{
		// Poll keyboard matrix and send keyboard report (infinikeys)
		IK_KeyboardPollCyleTick();
 80029aa:	f000 fc3b 	bl	8003224 <IK_KeyboardPollCyleTick>
		// Delay the loop.
		HAL_Delay(FW_LOOPDELAY);
 80029ae:	2001      	movs	r0, #1
 80029b0:	f7fd fbf0 	bl	8000194 <HAL_Delay>
 80029b4:	e7f9      	b.n	80029aa <FW_Exec+0x2>
	...

080029b8 <FW_ThrowError>:
}

void FW_ThrowError(uint32_t line, const char* module, const char* msg)
{
#if defined(FW_ERR_LED_ENABLED)
	if (hw_leddrvr0_cfgstate == FW_CFG_STATE_CONFIGURED)
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <FW_ThrowError+0x20>)
{
 80029ba:	b507      	push	{r0, r1, r2, lr}
	if (hw_leddrvr0_cfgstate == FW_CFG_STATE_CONFIGURED)
 80029bc:	7819      	ldrb	r1, [r3, #0]
 80029be:	2901      	cmp	r1, #1
 80029c0:	d108      	bne.n	80029d4 <FW_ThrowError+0x1c>
	{
		// Turn on the error indicator LED.
		IS31FL3236_WriteRGBPWM(&hw_leddrvr0_handle, FW_ERR_RGB_CHANNEL, FW_ERR_RGB_COLR, FW_ERR_RGB_COLG, FW_ERR_RGB_COLB);
 80029c2:	2300      	movs	r3, #0
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <FW_ThrowError+0x24>)
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	22ff      	movs	r2, #255	; 0xff
 80029ca:	f7ff ff9c 	bl	8002906 <IS31FL3236_WriteRGBPWM>
		IS31FL3236_Update(&hw_leddrvr0_handle);
 80029ce:	4803      	ldr	r0, [pc, #12]	; (80029dc <FW_ThrowError+0x24>)
 80029d0:	f7ff ff77 	bl	80028c2 <IS31FL3236_Update>
 80029d4:	e7fe      	b.n	80029d4 <FW_ThrowError+0x1c>
 80029d6:	bf00      	nop
 80029d8:	200001c9 	.word	0x200001c9
 80029dc:	20000298 	.word	0x20000298

080029e0 <FW_Setup>:
{
 80029e0:	b570      	push	{r4, r5, r6, lr}
 * STATIC FUNCTION DEFINITIONS
 * ------------------------------------------------------------*/

static void FW_Setup_LEDDRVR0(void)
{
	hw_leddrvr0_handle.Init.I2C_Bus = &hi2c1;
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <FW_Setup+0x48>)
 80029e4:	4c11      	ldr	r4, [pc, #68]	; (8002a2c <FW_Setup+0x4c>)
	hw_leddrvr0_handle.Init.I2C_Device_Address = IS31FL3236_GET_I2C_ADDR(IS31FL3236_I2C_AD_TO_GND);
	hw_leddrvr0_handle.Init.Chip_Enable_Signal_Pin = GPIO_PIN_5;
	hw_leddrvr0_handle.Init.Chip_Enable_Signal_Port = GPIOB;
	hw_leddrvr0_handle.Init.RGB_Mode_Color_1 = IS31FL3236_RGB_CONFIG_RED;
	hw_leddrvr0_handle.Init.RGB_Mode_Color_2 = IS31FL3236_RGB_CONFIG_GREEN;
 80029e6:	2501      	movs	r5, #1
	hw_leddrvr0_handle.Init.I2C_Bus = &hi2c1;
 80029e8:	6023      	str	r3, [r4, #0]
	hw_leddrvr0_handle.Init.I2C_Device_Address = IS31FL3236_GET_I2C_ADDR(IS31FL3236_I2C_AD_TO_GND);
 80029ea:	2378      	movs	r3, #120	; 0x78
 80029ec:	7123      	strb	r3, [r4, #4]
	hw_leddrvr0_handle.Init.Chip_Enable_Signal_Pin = GPIO_PIN_5;
 80029ee:	2320      	movs	r3, #32
 80029f0:	8223      	strh	r3, [r4, #16]
	hw_leddrvr0_handle.Init.Chip_Enable_Signal_Port = GPIOB;
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <FW_Setup+0x50>)
	hw_leddrvr0_handle.Init.RGB_Mode_Color_1 = IS31FL3236_RGB_CONFIG_RED;
 80029f4:	2600      	movs	r6, #0
	hw_leddrvr0_handle.Init.Chip_Enable_Signal_Port = GPIOB;
 80029f6:	60e3      	str	r3, [r4, #12]
	hw_leddrvr0_handle.Init.RGB_Mode_Color_3 = IS31FL3236_RGB_CONFIG_BLUE;
 80029f8:	2302      	movs	r3, #2

	IS31FL3236_Init(&hw_leddrvr0_handle);
 80029fa:	4620      	mov	r0, r4
	hw_leddrvr0_handle.Init.RGB_Mode_Color_3 = IS31FL3236_RGB_CONFIG_BLUE;
 80029fc:	7523      	strb	r3, [r4, #20]
	hw_leddrvr0_handle.Init.RGB_Mode_Color_1 = IS31FL3236_RGB_CONFIG_RED;
 80029fe:	74a6      	strb	r6, [r4, #18]
	hw_leddrvr0_handle.Init.RGB_Mode_Color_2 = IS31FL3236_RGB_CONFIG_GREEN;
 8002a00:	74e5      	strb	r5, [r4, #19]
	IS31FL3236_Init(&hw_leddrvr0_handle);
 8002a02:	f7ff ffc3 	bl	800298c <IS31FL3236_Init>
	IS31FL3236_WriteGlobalLEDControl(&hw_leddrvr0_handle, IS31FL3236_LED_CURRENT_MAX, IS31FL3236_LED_STATE_ON);
 8002a06:	462a      	mov	r2, r5
 8002a08:	4631      	mov	r1, r6
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	f7ff ff65 	bl	80028da <IS31FL3236_WriteGlobalLEDControl>

	hw_leddrvr0_cfgstate = FW_CFG_STATE_CONFIGURED;
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <FW_Setup+0x54>)
 8002a12:	701d      	strb	r5, [r3, #0]
}

static void FW_Setup_INFINIKEYS(void)
{
	if (IK_Init() != 0)
 8002a14:	f000 fbee 	bl	80031f4 <IK_Init>
 8002a18:	b120      	cbz	r0, 8002a24 <FW_Setup+0x44>
	{
		FW_ThrowError(__LINE__, "fwmain", "");
 8002a1a:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <FW_Setup+0x58>)
 8002a1c:	4907      	ldr	r1, [pc, #28]	; (8002a3c <FW_Setup+0x5c>)
 8002a1e:	2064      	movs	r0, #100	; 0x64
 8002a20:	f7ff ffca 	bl	80029b8 <FW_ThrowError>
 8002a24:	bd70      	pop	{r4, r5, r6, pc}
 8002a26:	bf00      	nop
 8002a28:	200002b0 	.word	0x200002b0
 8002a2c:	20000298 	.word	0x20000298
 8002a30:	40010c00 	.word	0x40010c00
 8002a34:	200001c9 	.word	0x200001c9
 8002a38:	08003b65 	.word	0x08003b65
 8002a3c:	08003af0 	.word	0x08003af0

08002a40 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a40:	2228      	movs	r2, #40	; 0x28
{
 8002a42:	b570      	push	{r4, r5, r6, lr}
 8002a44:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a46:	eb0d 0002 	add.w	r0, sp, r2
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	f000 ff78 	bl	8003940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a50:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a52:	2610      	movs	r6, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a54:	eb0d 0002 	add.w	r0, sp, r2
 8002a58:	2100      	movs	r1, #0
 8002a5a:	f000 ff71 	bl	8003940 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a5e:	4632      	mov	r2, r6
 8002a60:	2100      	movs	r1, #0
 8002a62:	a801      	add	r0, sp, #4
 8002a64:	f000 ff6c 	bl	8003940 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a6c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a6e:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a70:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002a72:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a76:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a78:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a7c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a7e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a80:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002a82:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a84:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a86:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a88:	f7fe fad4 	bl	8001034 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a8c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a8e:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a90:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a96:	4629      	mov	r1, r5
 8002a98:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a9a:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a9c:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a9e:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aa0:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002aa2:	f7fe fc95 	bl	80013d0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aa6:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002aa8:	9601      	str	r6, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002aaa:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aac:	f7fe fd72 	bl	8001594 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002ab0:	b014      	add	sp, #80	; 0x50
 8002ab2:	bd70      	pop	{r4, r5, r6, pc}

08002ab4 <main>:
{
 8002ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ab8:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8002aba:	f7fd fb47 	bl	800014c <HAL_Init>
  SystemClock_Config();
 8002abe:	f7ff ffbf 	bl	8002a40 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac2:	2210      	movs	r2, #16
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	eb0d 0002 	add.w	r0, sp, r2
 8002aca:	f000 ff39 	bl	8003940 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ace:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <main+0x144>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8002ad0:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8002c14 <main+0x160>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad4:	699a      	ldr	r2, [r3, #24]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002ad6:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8002c18 <main+0x164>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ada:	f042 0210 	orr.w	r2, r2, #16
 8002ade:	619a      	str	r2, [r3, #24]
 8002ae0:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8002ae2:	4e46      	ldr	r6, [pc, #280]	; (8002bfc <main+0x148>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae4:	f002 0210 	and.w	r2, r2, #16
 8002ae8:	9200      	str	r2, [sp, #0]
 8002aea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aec:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8002aee:	4648      	mov	r0, r9
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002af0:	f042 0220 	orr.w	r2, r2, #32
 8002af4:	619a      	str	r2, [r3, #24]
 8002af6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8002af8:	f24e 31ff 	movw	r1, #58367	; 0xe3ff
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002afc:	f002 0220 	and.w	r2, r2, #32
 8002b00:	9201      	str	r2, [sp, #4]
 8002b02:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b04:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b08:	f042 0204 	orr.w	r2, r2, #4
 8002b0c:	619a      	str	r2, [r3, #24]
 8002b0e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2502      	movs	r5, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b12:	f002 0204 	and.w	r2, r2, #4
 8002b16:	9202      	str	r2, [sp, #8]
 8002b18:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1c:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	f042 0208 	orr.w	r2, r2, #8
 8002b22:	619a      	str	r2, [r3, #24]
 8002b24:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8002b26:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	9303      	str	r3, [sp, #12]
 8002b2e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8002b30:	f7fd fc74 	bl	800041c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002b34:	4640      	mov	r0, r8
 8002b36:	2200      	movs	r2, #0
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	f7fd fc6f 	bl	800041c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8002b3e:	2200      	movs	r2, #0
 8002b40:	4630      	mov	r0, r6
 8002b42:	f64f 4123 	movw	r1, #64547	; 0xfc23
 8002b46:	f7fd fc69 	bl	800041c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8002b4a:	f24e 33ff 	movw	r3, #58367	; 0xe3ff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b4e:	a904      	add	r1, sp, #16
 8002b50:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8002b52:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b54:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5a:	f7fd fb7f 	bl	800025c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002b5e:	237f      	movs	r3, #127	; 0x7f
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b60:	a904      	add	r1, sp, #16
 8002b62:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002b64:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b66:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b68:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	f7fd fb77 	bl	800025c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b6e:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	a904      	add	r1, sp, #16
 8002b72:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b74:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b76:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7c:	f7fd fb6e 	bl	800025c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 
                           PB12 PB13 PB14 PB15 
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8002b80:	f64f 4323 	movw	r3, #64547	; 0xfc23
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b84:	a904      	add	r1, sp, #16
 8002b86:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8002b88:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b8a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b90:	f7fd fb64 	bl	800025c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b94:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b96:	a904      	add	r1, sp, #16
 8002b98:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b9a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba0:	f7fd fb5c 	bl	800025c <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8002ba4:	4816      	ldr	r0, [pc, #88]	; (8002c00 <main+0x14c>)
  hi2c1.Init.ClockSpeed = 100000;
 8002ba6:	4a17      	ldr	r2, [pc, #92]	; (8002c04 <main+0x150>)
 8002ba8:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <main+0x154>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002baa:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8002bac:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8002bb4:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bb6:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bb8:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002bba:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bbc:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bbe:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bc0:	f7fd fd00 	bl	80005c4 <HAL_I2C_Init>
  huart1.Init.BaudRate = 115200;
 8002bc4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8002bc8:	4810      	ldr	r0, [pc, #64]	; (8002c0c <main+0x158>)
  huart1.Init.BaudRate = 115200;
 8002bca:	4911      	ldr	r1, [pc, #68]	; (8002c10 <main+0x15c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bcc:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8002bce:	e880 000a 	stmia.w	r0, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bd2:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bd4:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bd6:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bd8:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bda:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bdc:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bde:	f7fe feef 	bl	80019c0 <HAL_UART_Init>
  MX_USB_DEVICE_Init();
 8002be2:	f000 f949 	bl	8002e78 <MX_USB_DEVICE_Init>
  FW_Setup();
 8002be6:	f7ff fefb 	bl	80029e0 <FW_Setup>
  FW_Exec();
 8002bea:	f7ff fedd 	bl	80029a8 <FW_Exec>
}
 8002bee:	4620      	mov	r0, r4
 8002bf0:	b009      	add	sp, #36	; 0x24
 8002bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40010c00 	.word	0x40010c00
 8002c00:	200002b0 	.word	0x200002b0
 8002c04:	40005400 	.word	0x40005400
 8002c08:	000186a0 	.word	0x000186a0
 8002c0c:	20000304 	.word	0x20000304
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40011000 	.word	0x40011000
 8002c18:	40010800 	.word	0x40010800

08002c1c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002c1c:	6802      	ldr	r2, [r0, #0]
 8002c1e:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d101      	bne.n	8002c28 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002c24:	f7fd baa4 	b.w	8000170 <HAL_IncTick>
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40012c00 	.word	0x40012c00

08002c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c34:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <HAL_MspInit+0x3c>)
{
 8002c36:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	619a      	str	r2, [r3, #24]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	f002 0201 	and.w	r2, r2, #1
 8002c46:	9200      	str	r2, [sp, #0]
 8002c48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c50:	61da      	str	r2, [r3, #28]
 8002c52:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c54:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c5e:	6853      	ldr	r3, [r2, #4]
 8002c60:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6a:	b002      	add	sp, #8
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40010000 	.word	0x40010000

08002c78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c78:	b510      	push	{r4, lr}
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7e:	2210      	movs	r2, #16
 8002c80:	2100      	movs	r1, #0
 8002c82:	a802      	add	r0, sp, #8
 8002c84:	f000 fe5c 	bl	8003940 <memset>
  if(hi2c->Instance==I2C1)
 8002c88:	6822      	ldr	r2, [r4, #0]
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_I2C_MspInit+0x5c>)
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d11e      	bne.n	8002cce <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c90:	4c11      	ldr	r4, [pc, #68]	; (8002cd8 <HAL_I2C_MspInit+0x60>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c92:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c94:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c96:	4811      	ldr	r0, [pc, #68]	; (8002cdc <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c98:	f043 0308 	orr.w	r3, r3, #8
 8002c9c:	61a3      	str	r3, [r4, #24]
 8002c9e:	69a3      	ldr	r3, [r4, #24]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ca8:	23c0      	movs	r3, #192	; 0xc0
 8002caa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cac:	2312      	movs	r3, #18
 8002cae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb8:	f7fd fad0 	bl	800025c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cbc:	69e3      	ldr	r3, [r4, #28]
 8002cbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cc2:	61e3      	str	r3, [r4, #28]
 8002cc4:	69e3      	ldr	r3, [r4, #28]
 8002cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cca:	9301      	str	r3, [sp, #4]
 8002ccc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cce:	b006      	add	sp, #24
 8002cd0:	bd10      	pop	{r4, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40005400 	.word	0x40005400
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40010c00 	.word	0x40010c00

08002ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ce0:	b510      	push	{r4, lr}
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce6:	2210      	movs	r2, #16
 8002ce8:	2100      	movs	r1, #0
 8002cea:	a802      	add	r0, sp, #8
 8002cec:	f000 fe28 	bl	8003940 <memset>
  if(huart->Instance==USART1)
 8002cf0:	6822      	ldr	r2, [r4, #0]
 8002cf2:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <HAL_UART_MspInit+0x70>)
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d128      	bne.n	8002d4a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cf8:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002cfc:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfe:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d04:	619a      	str	r2, [r3, #24]
 8002d06:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d08:	4812      	ldr	r0, [pc, #72]	; (8002d54 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d0a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002d0e:	9200      	str	r2, [sp, #0]
 8002d10:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	f042 0204 	orr.w	r2, r2, #4
 8002d18:	619a      	str	r2, [r3, #24]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d28:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d32:	f7fd fa93 	bl	800025c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d3a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d3c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3e:	a902      	add	r1, sp, #8
 8002d40:	4804      	ldr	r0, [pc, #16]	; (8002d54 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	f7fd fa89 	bl	800025c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d4a:	b006      	add	sp, #24
 8002d4c:	bd10      	pop	{r4, pc}
 8002d4e:	bf00      	nop
 8002d50:	40013800 	.word	0x40013800
 8002d54:	40010800 	.word	0x40010800

08002d58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d58:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8002d5a:	4601      	mov	r1, r0
{
 8002d5c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2019      	movs	r0, #25
 8002d62:	f7fd fa3b 	bl	80001dc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8002d66:	2019      	movs	r0, #25
 8002d68:	f7fd fa6c 	bl	8000244 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d6e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d70:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d72:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d78:	619a      	str	r2, [r3, #24]
 8002d7a:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002d7c:	4c11      	ldr	r4, [pc, #68]	; (8002dc4 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d82:	9302      	str	r3, [sp, #8]
 8002d84:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d86:	f7fe fbe7 	bl	8001558 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002d8a:	f7fe fbd5 	bl	8001538 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <HAL_InitTick+0x70>)
 8002d90:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002d92:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002d96:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <HAL_InitTick+0x74>)
 8002d9a:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8002d9e:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002da0:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8002da2:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002da4:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8002da6:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da8:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002daa:	f7fe fd4f 	bl	800184c <HAL_TIM_Base_Init>
 8002dae:	b920      	cbnz	r0, 8002dba <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002db0:	4620      	mov	r0, r4
 8002db2:	f7fe fc68 	bl	8001686 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002db6:	b008      	add	sp, #32
 8002db8:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002dba:	2001      	movs	r0, #1
 8002dbc:	e7fb      	b.n	8002db6 <HAL_InitTick+0x5e>
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	20000344 	.word	0x20000344
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	000f4240 	.word	0x000f4240

08002dd0 <NMI_Handler>:
 8002dd0:	4770      	bx	lr

08002dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd2:	e7fe      	b.n	8002dd2 <HardFault_Handler>

08002dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd4:	e7fe      	b.n	8002dd4 <MemManage_Handler>

08002dd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd6:	e7fe      	b.n	8002dd6 <BusFault_Handler>

08002dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd8:	e7fe      	b.n	8002dd8 <UsageFault_Handler>

08002dda <SVC_Handler>:
 8002dda:	4770      	bx	lr

08002ddc <DebugMon_Handler>:
 8002ddc:	4770      	bx	lr

08002dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dde:	4770      	bx	lr

08002de0 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002de0:	4801      	ldr	r0, [pc, #4]	; (8002de8 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002de2:	f7fd be4b 	b.w	8000a7c <HAL_PCD_IRQHandler>
 8002de6:	bf00      	nop
 8002de8:	200005a8 	.word	0x200005a8

08002dec <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002dec:	4801      	ldr	r0, [pc, #4]	; (8002df4 <TIM1_UP_IRQHandler+0x8>)
 8002dee:	f7fe bc59 	b.w	80016a4 <HAL_TIM_IRQHandler>
 8002df2:	bf00      	nop
 8002df4:	20000344 	.word	0x20000344

08002df8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002df8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <_sbrk+0x2c>)
{
 8002dfc:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002dfe:	6819      	ldr	r1, [r3, #0]
 8002e00:	b909      	cbnz	r1, 8002e06 <_sbrk+0xe>
		heap_end = &end;
 8002e02:	4909      	ldr	r1, [pc, #36]	; (8002e28 <_sbrk+0x30>)
 8002e04:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002e06:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002e08:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002e0a:	4402      	add	r2, r0
 8002e0c:	428a      	cmp	r2, r1
 8002e0e:	d906      	bls.n	8002e1e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002e10:	f000 fd5c 	bl	80038cc <__errno>
 8002e14:	230c      	movs	r3, #12
 8002e16:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002e1e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002e20:	bd08      	pop	{r3, pc}
 8002e22:	bf00      	nop
 8002e24:	200001cc 	.word	0x200001cc
 8002e28:	20000c20 	.word	0x20000c20

08002e2c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <SystemInit+0x40>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	4a0d      	ldr	r2, [pc, #52]	; (8002e70 <SystemInit+0x44>)
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002e44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e48:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e50:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002e58:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002e5a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002e5e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002e60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <SystemInit+0x48>)
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	f8ff0000 	.word	0xf8ff0000
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002e78:	b508      	push	{r3, lr}
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
#else
  	  // Hook in the custom infinikeys USB interface and class.
  	  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	490e      	ldr	r1, [pc, #56]	; (8002eb8 <MX_USB_DEVICE_Init+0x40>)
 8002e7e:	480f      	ldr	r0, [pc, #60]	; (8002ebc <MX_USB_DEVICE_Init+0x44>)
 8002e80:	f7ff f9eb 	bl	800225a <USBD_Init>
 8002e84:	b108      	cbz	r0, 8002e8a <MX_USB_DEVICE_Init+0x12>
  		  Error_Handler();
 8002e86:	f7ff fed3 	bl	8002c30 <Error_Handler>
  	  if (USBD_RegisterClass(&hUsbDeviceFS, &IK_HID_Class) != USBD_OK)
 8002e8a:	490d      	ldr	r1, [pc, #52]	; (8002ec0 <MX_USB_DEVICE_Init+0x48>)
 8002e8c:	480b      	ldr	r0, [pc, #44]	; (8002ebc <MX_USB_DEVICE_Init+0x44>)
 8002e8e:	f7ff f9f9 	bl	8002284 <USBD_RegisterClass>
 8002e92:	b108      	cbz	r0, 8002e98 <MX_USB_DEVICE_Init+0x20>
  		  Error_Handler();
 8002e94:	f7ff fecc 	bl	8002c30 <Error_Handler>
  	  if (IK_STM32CUBE_USBD_HID_RegisterInterface(&hUsbDeviceFS, &IK_USBD_HID_Itf) != USBD_OK)
 8002e98:	490a      	ldr	r1, [pc, #40]	; (8002ec4 <MX_USB_DEVICE_Init+0x4c>)
 8002e9a:	4808      	ldr	r0, [pc, #32]	; (8002ebc <MX_USB_DEVICE_Init+0x44>)
 8002e9c:	f000 fc44 	bl	8003728 <IK_STM32CUBE_USBD_HID_RegisterInterface>
 8002ea0:	b108      	cbz	r0, 8002ea6 <MX_USB_DEVICE_Init+0x2e>
  	  	  Error_Handler();
 8002ea2:	f7ff fec5 	bl	8002c30 <Error_Handler>
  	  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8002ea6:	4805      	ldr	r0, [pc, #20]	; (8002ebc <MX_USB_DEVICE_Init+0x44>)
 8002ea8:	f7ff f9f3 	bl	8002292 <USBD_Start>
 8002eac:	b118      	cbz	r0, 8002eb6 <MX_USB_DEVICE_Init+0x3e>
  		  Error_Handler();
#endif
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002eae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  		  Error_Handler();
 8002eb2:	f7ff bebd 	b.w	8002c30 <Error_Handler>
 8002eb6:	bd08      	pop	{r3, pc}
 8002eb8:	20000008 	.word	0x20000008
 8002ebc:	20000384 	.word	0x20000384
 8002ec0:	20000100 	.word	0x20000100
 8002ec4:	20000138 	.word	0x20000138

08002ec8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002ec8:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <HAL_PCD_MspInit+0x38>)
 8002ecc:	6802      	ldr	r2, [r0, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d112      	bne.n	8002ef8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002ed2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002ed6:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002ed8:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8002eda:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ede:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002ee0:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8002ee2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002ee4:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002eee:	f7fd f975 	bl	80001dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002ef2:	2014      	movs	r0, #20
 8002ef4:	f7fd f9a6 	bl	8000244 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002ef8:	b003      	add	sp, #12
 8002efa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002efe:	bf00      	nop
 8002f00:	40005c00 	.word	0x40005c00

08002f04 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002f04:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8002f08:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002f0c:	f7ff b9d8 	b.w	80022c0 <USBD_LL_SetupStage>

08002f10 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002f10:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002f14:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002f18:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002f1c:	f7ff b9fd 	b.w	800231a <USBD_LL_DataOutStage>

08002f20 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002f20:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f26:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002f2a:	f7ff ba28 	b.w	800237e <USBD_LL_DataInStage>

08002f2e <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002f2e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002f32:	f7ff baa4 	b.w	800247e <USBD_LL_SOF>

08002f36 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002f36:	6883      	ldr	r3, [r0, #8]
{ 
 8002f38:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002f3a:	2b02      	cmp	r3, #2
{ 
 8002f3c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002f3e:	d001      	beq.n	8002f44 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8002f40:	f7ff fe76 	bl	8002c30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002f44:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 8002f48:	2101      	movs	r1, #1
 8002f4a:	f7ff fa86 	bl	800245a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002f4e:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8002f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002f56:	f7ff ba61 	b.w	800241c <USBD_LL_Reset>
	...

08002f5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002f5c:	b510      	push	{r4, lr}
 8002f5e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002f60:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002f64:	f7ff fa7c 	bl	8002460 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002f68:	69a3      	ldr	r3, [r4, #24]
 8002f6a:	b123      	cbz	r3, 8002f76 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002f6c:	4a02      	ldr	r2, [pc, #8]	; (8002f78 <HAL_PCD_SuspendCallback+0x1c>)
 8002f6e:	6913      	ldr	r3, [r2, #16]
 8002f70:	f043 0306 	orr.w	r3, r3, #6
 8002f74:	6113      	str	r3, [r2, #16]
 8002f76:	bd10      	pop	{r4, pc}
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002f7c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002f80:	f7ff ba77 	b.w	8002472 <USBD_LL_Resume>

08002f84 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002f84:	2302      	movs	r3, #2
 8002f86:	2208      	movs	r2, #8
{
 8002f88:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002f8a:	4918      	ldr	r1, [pc, #96]	; (8002fec <USBD_LL_Init+0x68>)
{
 8002f8c:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8002f8e:	4818      	ldr	r0, [pc, #96]	; (8002ff0 <USBD_LL_Init+0x6c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002f90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002f94:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8002f96:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8002f9a:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002f9e:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002fa0:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002fa2:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002fa4:	f7fd fc64 	bl	8000870 <HAL_PCD_Init>
 8002fa8:	b108      	cbz	r0, 8002fae <USBD_LL_Init+0x2a>
  {
    Error_Handler( );
 8002faa:	f7ff fe41 	bl	8002c30 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2318      	movs	r3, #24
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002fb8:	f7fe f824 	bl	8001004 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002fbc:	2358      	movs	r3, #88	; 0x58
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2180      	movs	r1, #128	; 0x80
 8002fc2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002fc6:	f7fe f81d 	bl	8001004 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8002fca:	2398      	movs	r3, #152	; 0x98
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2181      	movs	r1, #129	; 0x81
 8002fd0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002fd4:	f7fe f816 	bl	8001004 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8002fd8:	23d8      	movs	r3, #216	; 0xd8
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2101      	movs	r1, #1
 8002fde:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002fe2:	f7fe f80f 	bl	8001004 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
}
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	bd10      	pop	{r4, pc}
 8002fea:	bf00      	nop
 8002fec:	40005c00 	.word	0x40005c00
 8002ff0:	200005a8 	.word	0x200005a8

08002ff4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002ff4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002ff6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ffa:	f7fd fca2 	bl	8000942 <HAL_PCD_Start>
 8002ffe:	2803      	cmp	r0, #3
 8003000:	bf9a      	itte	ls
 8003002:	4b02      	ldrls	r3, [pc, #8]	; (800300c <USBD_LL_Start+0x18>)
 8003004:	5c18      	ldrbls	r0, [r3, r0]
 8003006:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003008:	bd08      	pop	{r3, pc}
 800300a:	bf00      	nop
 800300c:	08003b0f 	.word	0x08003b0f

08003010 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003010:	b510      	push	{r4, lr}
 8003012:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003014:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003018:	4613      	mov	r3, r2
 800301a:	4622      	mov	r2, r4
 800301c:	f7fd fcbc 	bl	8000998 <HAL_PCD_EP_Open>
 8003020:	2803      	cmp	r0, #3
 8003022:	bf9a      	itte	ls
 8003024:	4b01      	ldrls	r3, [pc, #4]	; (800302c <USBD_LL_OpenEP+0x1c>)
 8003026:	5c18      	ldrbls	r0, [r3, r0]
 8003028:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 800302a:	bd10      	pop	{r4, pc}
 800302c:	08003b0f 	.word	0x08003b0f

08003030 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003030:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003032:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003036:	f7fd fcd2 	bl	80009de <HAL_PCD_EP_Close>
 800303a:	2803      	cmp	r0, #3
 800303c:	bf9a      	itte	ls
 800303e:	4b02      	ldrls	r3, [pc, #8]	; (8003048 <USBD_LL_CloseEP+0x18>)
 8003040:	5c18      	ldrbls	r0, [r3, r0]
 8003042:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8003044:	bd08      	pop	{r3, pc}
 8003046:	bf00      	nop
 8003048:	08003b0f 	.word	0x08003b0f

0800304c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800304c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800304e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003052:	f7fd ff8b 	bl	8000f6c <HAL_PCD_EP_SetStall>
 8003056:	2803      	cmp	r0, #3
 8003058:	bf9a      	itte	ls
 800305a:	4b02      	ldrls	r3, [pc, #8]	; (8003064 <USBD_LL_StallEP+0x18>)
 800305c:	5c18      	ldrbls	r0, [r3, r0]
 800305e:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8003060:	bd08      	pop	{r3, pc}
 8003062:	bf00      	nop
 8003064:	08003b0f 	.word	0x08003b0f

08003068 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003068:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800306a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800306e:	f7fd ffa6 	bl	8000fbe <HAL_PCD_EP_ClrStall>
 8003072:	2803      	cmp	r0, #3
 8003074:	bf9a      	itte	ls
 8003076:	4b02      	ldrls	r3, [pc, #8]	; (8003080 <USBD_LL_ClearStallEP+0x18>)
 8003078:	5c18      	ldrbls	r0, [r3, r0]
 800307a:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 800307c:	bd08      	pop	{r3, pc}
 800307e:	bf00      	nop
 8003080:	08003b0f 	.word	0x08003b0f

08003084 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003084:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003086:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800308a:	bf45      	ittet	mi
 800308c:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003090:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003094:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003098:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800309c:	bf58      	it	pl
 800309e:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 80030a2:	4770      	bx	lr

080030a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80030a4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80030a6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80030aa:	f7fd fc61 	bl	8000970 <HAL_PCD_SetAddress>
 80030ae:	2803      	cmp	r0, #3
 80030b0:	bf9a      	itte	ls
 80030b2:	4b02      	ldrls	r3, [pc, #8]	; (80030bc <USBD_LL_SetUSBAddress+0x18>)
 80030b4:	5c18      	ldrbls	r0, [r3, r0]
 80030b6:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80030b8:	bd08      	pop	{r3, pc}
 80030ba:	bf00      	nop
 80030bc:	08003b0f 	.word	0x08003b0f

080030c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80030c0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80030c2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80030c6:	f7fd fcc3 	bl	8000a50 <HAL_PCD_EP_Transmit>
 80030ca:	2803      	cmp	r0, #3
 80030cc:	bf9a      	itte	ls
 80030ce:	4b02      	ldrls	r3, [pc, #8]	; (80030d8 <USBD_LL_Transmit+0x18>)
 80030d0:	5c18      	ldrbls	r0, [r3, r0]
 80030d2:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 80030d4:	bd08      	pop	{r3, pc}
 80030d6:	bf00      	nop
 80030d8:	08003b0f 	.word	0x08003b0f

080030dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80030dc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80030de:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80030e2:	f7fd fc9d 	bl	8000a20 <HAL_PCD_EP_Receive>
 80030e6:	2803      	cmp	r0, #3
 80030e8:	bf9a      	itte	ls
 80030ea:	4b02      	ldrls	r3, [pc, #8]	; (80030f4 <USBD_LL_PrepareReceive+0x18>)
 80030ec:	5c18      	ldrbls	r0, [r3, r0]
 80030ee:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 80030f0:	bd08      	pop	{r3, pc}
 80030f2:	bf00      	nop
 80030f4:	08003b0f 	.word	0x08003b0f

080030f8 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
}
 80030f8:	4800      	ldr	r0, [pc, #0]	; (80030fc <USBD_static_malloc+0x4>)
 80030fa:	4770      	bx	lr
 80030fc:	200001d0 	.word	0x200001d0

08003100 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8003100:	4770      	bx	lr

08003102 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003102:	4770      	bx	lr

08003104 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003104:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003106:	4801      	ldr	r0, [pc, #4]	; (800310c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003108:	800b      	strh	r3, [r1, #0]
}
 800310a:	4770      	bx	lr
 800310c:	20000024 	.word	0x20000024

08003110 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003110:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003112:	4801      	ldr	r0, [pc, #4]	; (8003118 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003114:	800b      	strh	r3, [r1, #0]
}
 8003116:	4770      	bx	lr
 8003118:	20000038 	.word	0x20000038

0800311c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800311c:	2300      	movs	r3, #0
{
 800311e:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003120:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8003122:	b2dc      	uxtb	r4, r3
 8003124:	42a2      	cmp	r2, r4
 8003126:	d800      	bhi.n	800312a <IntToUnicode+0xe>
  }
}
 8003128:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 800312a:	0f04      	lsrs	r4, r0, #28
 800312c:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800312e:	bf94      	ite	ls
 8003130:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003132:	3437      	addhi	r4, #55	; 0x37
 8003134:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8003138:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 800313c:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800313e:	7065      	strb	r5, [r4, #1]
 8003140:	3301      	adds	r3, #1
 8003142:	e7ee      	b.n	8003122 <IntToUnicode+0x6>

08003144 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003144:	231a      	movs	r3, #26
{
 8003146:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003148:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <USBD_FS_SerialStrDescriptor+0x2c>)
 800314c:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800314e:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8003150:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8003152:	18c0      	adds	r0, r0, r3
 8003154:	d00a      	beq.n	800316c <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003156:	4b07      	ldr	r3, [pc, #28]	; (8003174 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003158:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800315a:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800315c:	4906      	ldr	r1, [pc, #24]	; (8003178 <USBD_FS_SerialStrDescriptor+0x34>)
 800315e:	f7ff ffdd 	bl	800311c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003162:	2204      	movs	r2, #4
 8003164:	4905      	ldr	r1, [pc, #20]	; (800317c <USBD_FS_SerialStrDescriptor+0x38>)
 8003166:	4620      	mov	r0, r4
 8003168:	f7ff ffd8 	bl	800311c <IntToUnicode>
}
 800316c:	4804      	ldr	r0, [pc, #16]	; (8003180 <USBD_FS_SerialStrDescriptor+0x3c>)
 800316e:	bd10      	pop	{r4, pc}
 8003170:	1ffff7e8 	.word	0x1ffff7e8
 8003174:	1ffff7ec 	.word	0x1ffff7ec
 8003178:	2000003e 	.word	0x2000003e
 800317c:	2000004e 	.word	0x2000004e
 8003180:	2000003c 	.word	0x2000003c

08003184 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003184:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003186:	4c04      	ldr	r4, [pc, #16]	; (8003198 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003188:	460a      	mov	r2, r1
 800318a:	4804      	ldr	r0, [pc, #16]	; (800319c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800318c:	4621      	mov	r1, r4
 800318e:	f7ff fb21 	bl	80027d4 <USBD_GetString>
}
 8003192:	4620      	mov	r0, r4
 8003194:	bd10      	pop	{r4, pc}
 8003196:	bf00      	nop
 8003198:	20000a08 	.word	0x20000a08
 800319c:	08003b3a 	.word	0x08003b3a

080031a0 <USBD_FS_ProductStrDescriptor>:
{
 80031a0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80031a2:	4c04      	ldr	r4, [pc, #16]	; (80031b4 <USBD_FS_ProductStrDescriptor+0x14>)
 80031a4:	460a      	mov	r2, r1
 80031a6:	4804      	ldr	r0, [pc, #16]	; (80031b8 <USBD_FS_ProductStrDescriptor+0x18>)
 80031a8:	4621      	mov	r1, r4
 80031aa:	f7ff fb13 	bl	80027d4 <USBD_GetString>
}
 80031ae:	4620      	mov	r0, r4
 80031b0:	bd10      	pop	{r4, pc}
 80031b2:	bf00      	nop
 80031b4:	20000a08 	.word	0x20000a08
 80031b8:	08003b4e 	.word	0x08003b4e

080031bc <USBD_FS_ConfigStrDescriptor>:
{
 80031bc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80031be:	4c04      	ldr	r4, [pc, #16]	; (80031d0 <USBD_FS_ConfigStrDescriptor+0x14>)
 80031c0:	460a      	mov	r2, r1
 80031c2:	4804      	ldr	r0, [pc, #16]	; (80031d4 <USBD_FS_ConfigStrDescriptor+0x18>)
 80031c4:	4621      	mov	r1, r4
 80031c6:	f7ff fb05 	bl	80027d4 <USBD_GetString>
}
 80031ca:	4620      	mov	r0, r4
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	bf00      	nop
 80031d0:	20000a08 	.word	0x20000a08
 80031d4:	08003b13 	.word	0x08003b13

080031d8 <USBD_FS_InterfaceStrDescriptor>:
{
 80031d8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80031da:	4c04      	ldr	r4, [pc, #16]	; (80031ec <USBD_FS_InterfaceStrDescriptor+0x14>)
 80031dc:	460a      	mov	r2, r1
 80031de:	4804      	ldr	r0, [pc, #16]	; (80031f0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80031e0:	4621      	mov	r1, r4
 80031e2:	f7ff faf7 	bl	80027d4 <USBD_GetString>
}
 80031e6:	4620      	mov	r0, r4
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	bf00      	nop
 80031ec:	20000a08 	.word	0x20000a08
 80031f0:	08003b25 	.word	0x08003b25

080031f4 <IK_Init>:
/* --------------------------------------------------------------
 * FUNCTION DEFINITIONS
 * ------------------------------------------------------------*/

uint8_t IK_Init(void)
{
 80031f4:	b513      	push	{r0, r1, r4, lr}
	if (IK_CFG_Init() != 0)
 80031f6:	f000 f8b7 	bl	8003368 <IK_CFG_Init>
 80031fa:	2301      	movs	r3, #1
 80031fc:	4604      	mov	r4, r0
 80031fe:	b960      	cbnz	r0, 800321a <IK_Init+0x26>

	static IK_HIDModifierMapMetadata_t test_map_meta = {
			0x04
	};

	IK_KeyMap_t test_map = {
 8003200:	f88d 3000 	strb.w	r3, [sp]
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <IK_Init+0x2c>)
			KEYMAP_STATIC,
			&test_map_meta
	};

	IK_CFG_LoadKeyMapToTable(0, 8, test_map);
 8003206:	2108      	movs	r1, #8
	IK_KeyMap_t test_map = {
 8003208:	9301      	str	r3, [sp, #4]
	IK_CFG_LoadKeyMapToTable(0, 8, test_map);
 800320a:	ab02      	add	r3, sp, #8
 800320c:	e913 000c 	ldmdb	r3, {r2, r3}
 8003210:	f000 f8e8 	bl	80033e4 <IK_CFG_LoadKeyMapToTable>

	// TEST CODE END

	return 0;
}
 8003214:	4620      	mov	r0, r4
 8003216:	b002      	add	sp, #8
 8003218:	bd10      	pop	{r4, pc}
		return 1;
 800321a:	461c      	mov	r4, r3
 800321c:	e7fa      	b.n	8003214 <IK_Init+0x20>
 800321e:	bf00      	nop
 8003220:	20000056 	.word	0x20000056

08003224 <IK_KeyboardPollCyleTick>:
{
	return 0;
}

void IK_KeyboardPollCyleTick(void)
{
 8003224:	b510      	push	{r4, lr}
	// Acquire keyboard states.
	_IK_ACQ_Poll(pressed_keys_buffer, IK_PHYSICAL_KEY_COUNT);
 8003226:	4c05      	ldr	r4, [pc, #20]	; (800323c <IK_KeyboardPollCyleTick+0x18>)
 8003228:	219a      	movs	r1, #154	; 0x9a
 800322a:	4620      	mov	r0, r4
 800322c:	f000 f808 	bl	8003240 <_IK_ACQ_Poll>

	// Parse the pressed keys and send necessary HID reports.
	_IK_Parser_ParseKeyStates(pressed_keys_buffer, IK_PHYSICAL_KEY_COUNT);
 8003230:	4620      	mov	r0, r4
}
 8003232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_IK_Parser_ParseKeyStates(pressed_keys_buffer, IK_PHYSICAL_KEY_COUNT);
 8003236:	219a      	movs	r1, #154	; 0x9a
 8003238:	f000 b914 	b.w	8003464 <_IK_Parser_ParseKeyStates>
 800323c:	200001ec 	.word	0x200001ec

08003240 <_IK_ACQ_Poll>:
/* --------------------------------------------------------------
 * FUNCTION DEFINITIONS
 * ------------------------------------------------------------*/

void _IK_ACQ_Poll(uint8_t* pressed_keys_table, uint16_t pressed_keys_table_size)
{
 8003240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// Clear the pressed keys table.
	for (uint16_t i = 0; i < pressed_keys_table_size; i++)
 8003244:	4602      	mov	r2, r0
{
 8003246:	4689      	mov	r9, r1
 8003248:	4680      	mov	r8, r0
 800324a:	2100      	movs	r1, #0
	for (uint16_t i = 0; i < pressed_keys_table_size; i++)
 800324c:	eba2 0308 	sub.w	r3, r2, r8
 8003250:	b29b      	uxth	r3, r3
 8003252:	4599      	cmp	r9, r3
 8003254:	d82d      	bhi.n	80032b2 <_IK_ACQ_Poll+0x72>
 8003256:	2400      	movs	r4, #0
	uint16_t pressedkeys_index = 0;

	// Before a poll, set all probe lines to LOW.
	for (uint8_t probe_line_index = 0; probe_line_index < IK_MATRIX_PROBE_LINE_COUNT; probe_line_index++)
	{
		IK_HAL_SetMatrixProbeLine(probe_line_index, IK_LOGIC_LEVEL_LOW);
 8003258:	b2e0      	uxtb	r0, r4
 800325a:	2100      	movs	r1, #0
 800325c:	3401      	adds	r4, #1
 800325e:	f000 f951 	bl	8003504 <IK_HAL_SetMatrixProbeLine>
	for (uint8_t probe_line_index = 0; probe_line_index < IK_MATRIX_PROBE_LINE_COUNT; probe_line_index++)
 8003262:	2c16      	cmp	r4, #22
 8003264:	d1f8      	bne.n	8003258 <_IK_ACQ_Poll+0x18>
 8003266:	2400      	movs	r4, #0
 8003268:	4625      	mov	r5, r4

	// Read the whole matrix.
	for (uint8_t probe_line_index = 0; probe_line_index < IK_MATRIX_PROBE_LINE_COUNT; probe_line_index++)
	{
		// Set the probe line level to HIGH.
		IK_HAL_SetMatrixProbeLine(probe_line_index, IK_LOGIC_LEVEL_HIGH);
 800326a:	2101      	movs	r1, #1
 800326c:	4620      	mov	r0, r4
 800326e:	f000 f949 	bl	8003504 <IK_HAL_SetMatrixProbeLine>
 8003272:	2700      	movs	r7, #0
 8003274:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
 8003278:	b2f6      	uxtb	r6, r6
			// Check if the key is pressed.
			if (IK_HAL_ReadMatrixSenseLine(sense_line_index) == IK_LOGIC_LEVEL_HIGH)
			{
				if (pressedkeys_index < pressed_keys_table_size)
				{
					pressed_keys_table[pressedkeys_index] = IK_MATRIX_ID_FROM_LINES(probe_line_index, sense_line_index);
 800327a:	3601      	adds	r6, #1
 800327c:	fa5f fa87 	uxtb.w	sl, r7
			if (IK_HAL_ReadMatrixSenseLine(sense_line_index) == IK_LOGIC_LEVEL_HIGH)
 8003280:	4650      	mov	r0, sl
 8003282:	f000 f955 	bl	8003530 <IK_HAL_ReadMatrixSenseLine>
 8003286:	2801      	cmp	r0, #1
 8003288:	d106      	bne.n	8003298 <_IK_ACQ_Poll+0x58>
				if (pressedkeys_index < pressed_keys_table_size)
 800328a:	45a9      	cmp	r9, r5
					pressed_keys_table[pressedkeys_index] = IK_MATRIX_ID_FROM_LINES(probe_line_index, sense_line_index);
 800328c:	bf81      	itttt	hi
 800328e:	44b2      	addhi	sl, r6
 8003290:	f808 a005 	strbhi.w	sl, [r8, r5]
					pressedkeys_index++;
 8003294:	3501      	addhi	r5, #1
 8003296:	b2ad      	uxthhi	r5, r5
 8003298:	3701      	adds	r7, #1
		for (uint8_t sense_line_index = 0; sense_line_index < IK_MATRIX_SENSE_LINE_COUNT; sense_line_index++)
 800329a:	2f07      	cmp	r7, #7
 800329c:	d1ee      	bne.n	800327c <_IK_ACQ_Poll+0x3c>
				//}
			}
		}

		// Set the probe line level to LOW.
		IK_HAL_SetMatrixProbeLine(probe_line_index, IK_LOGIC_LEVEL_LOW);
 800329e:	4620      	mov	r0, r4
	for (uint8_t probe_line_index = 0; probe_line_index < IK_MATRIX_PROBE_LINE_COUNT; probe_line_index++)
 80032a0:	3401      	adds	r4, #1
		IK_HAL_SetMatrixProbeLine(probe_line_index, IK_LOGIC_LEVEL_LOW);
 80032a2:	2100      	movs	r1, #0
	for (uint8_t probe_line_index = 0; probe_line_index < IK_MATRIX_PROBE_LINE_COUNT; probe_line_index++)
 80032a4:	b2e4      	uxtb	r4, r4
		IK_HAL_SetMatrixProbeLine(probe_line_index, IK_LOGIC_LEVEL_LOW);
 80032a6:	f000 f92d 	bl	8003504 <IK_HAL_SetMatrixProbeLine>
	for (uint8_t probe_line_index = 0; probe_line_index < IK_MATRIX_PROBE_LINE_COUNT; probe_line_index++)
 80032aa:	2c16      	cmp	r4, #22
 80032ac:	d1dd      	bne.n	800326a <_IK_ACQ_Poll+0x2a>
	}
}
 80032ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pressed_keys_table[i] = 0x00;
 80032b2:	f802 1b01 	strb.w	r1, [r2], #1
 80032b6:	e7c9      	b.n	800324c <_IK_ACQ_Poll+0xc>

080032b8 <_IK_CFG_FreeKeyMapTableMemory.isra.0>:
	IK_CFG_CurrentKeyLayer = 0;

	return 0;
}

static void _IK_CFG_FreeKeyMapTableMemory(uint8_t key_layer_size, uint16_t key_matrix_size)
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	// Check for NULL pointer.
	if (IK_CFG_KeyMapTable == NULL)
 80032ba:	4c10      	ldr	r4, [pc, #64]	; (80032fc <_IK_CFG_FreeKeyMapTableMemory.isra.0+0x44>)
static void _IK_CFG_FreeKeyMapTableMemory(uint8_t key_layer_size, uint16_t key_matrix_size)
 80032bc:	4607      	mov	r7, r0
	if (IK_CFG_KeyMapTable == NULL)
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	b1d3      	cbz	r3, 80032f8 <_IK_CFG_FreeKeyMapTableMemory.isra.0+0x40>
 80032c2:	2600      	movs	r6, #0
		return;

	// Free all inner arrays.
	for (uint8_t i = 0; i < key_layer_size; i++)
 80032c4:	42be      	cmp	r6, r7
 80032c6:	d104      	bne.n	80032d2 <_IK_CFG_FreeKeyMapTableMemory.isra.0+0x1a>

		free(current_ptr);
	}

	// Free the 2D-array itself.
	free(IK_CFG_KeyMapTable);
 80032c8:	6820      	ldr	r0, [r4, #0]
}
 80032ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free(IK_CFG_KeyMapTable);
 80032ce:	f000 bb2f 	b.w	8003930 <free>
		IK_KeyMap_t* current_ptr = IK_CFG_KeyMapTable[i];
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
		if (current_ptr == NULL)
 80032d8:	b165      	cbz	r5, 80032f4 <_IK_CFG_FreeKeyMapTableMemory.isra.0+0x3c>
		switch (current_ptr->Type)
 80032da:	782b      	ldrb	r3, [r5, #0]
 80032dc:	b923      	cbnz	r3, 80032e8 <_IK_CFG_FreeKeyMapTableMemory.isra.0+0x30>
			if (current_ptr->Metadata != NULL)
 80032de:	686b      	ldr	r3, [r5, #4]
 80032e0:	b113      	cbz	r3, 80032e8 <_IK_CFG_FreeKeyMapTableMemory.isra.0+0x30>
				free(((IK_ModifierMapMetadata_t*)current_ptr->Metadata)->ModifierMetadata);
 80032e2:	6858      	ldr	r0, [r3, #4]
 80032e4:	f000 fb24 	bl	8003930 <free>
		free(current_ptr->Metadata);
 80032e8:	6868      	ldr	r0, [r5, #4]
 80032ea:	f000 fb21 	bl	8003930 <free>
		free(current_ptr);
 80032ee:	4628      	mov	r0, r5
 80032f0:	f000 fb1e 	bl	8003930 <free>
 80032f4:	3601      	adds	r6, #1
 80032f6:	e7e5      	b.n	80032c4 <_IK_CFG_FreeKeyMapTableMemory.isra.0+0xc>
 80032f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000c08 	.word	0x20000c08

08003300 <IK_CFG_GetFallbackKeyLayer>:
}
 8003300:	4b01      	ldr	r3, [pc, #4]	; (8003308 <IK_CFG_GetFallbackKeyLayer+0x8>)
 8003302:	7818      	ldrb	r0, [r3, #0]
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000287 	.word	0x20000287

0800330c <IK_CFG_SetFallbackKeyLayer>:
	if (new_fb_key_layer >= IK_CFG_KeyLayerCount)
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <IK_CFG_SetFallbackKeyLayer+0x10>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	4283      	cmp	r3, r0
	IK_CFG_FallbackKeyLayer = new_fb_key_layer;
 8003312:	bf84      	itt	hi
 8003314:	4b02      	ldrhi	r3, [pc, #8]	; (8003320 <IK_CFG_SetFallbackKeyLayer+0x14>)
 8003316:	7018      	strbhi	r0, [r3, #0]
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000288 	.word	0x20000288
 8003320:	20000287 	.word	0x20000287

08003324 <_IK_CFG_AllocKeyMapTable.constprop.2>:
static uint8_t _IK_CFG_AllocKeyMapTable(uint8_t key_layer_size, uint16_t key_matrix_size)
 8003324:	b510      	push	{r4, lr}
	IK_CFG_KeyMapTable = (IK_KeyMap_t**)malloc(sizeof(IK_KeyMap_t*) * key_layer_size);
 8003326:	2004      	movs	r0, #4
 8003328:	f000 fafa 	bl	8003920 <malloc>
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <_IK_CFG_AllocKeyMapTable.constprop.2+0x38>)
 800332e:	4604      	mov	r4, r0
 8003330:	6018      	str	r0, [r3, #0]
	if (IK_CFG_KeyMapTable == NULL || key_layer_size < 1)
 8003332:	b908      	cbnz	r0, 8003338 <_IK_CFG_AllocKeyMapTable.constprop.2+0x14>
		return 1;
 8003334:	2001      	movs	r0, #1
 8003336:	bd10      	pop	{r4, pc}
		IK_CFG_KeyMapTable[i] = (IK_KeyMap_t*)malloc(sizeof(IK_KeyMap_t) * key_matrix_size);
 8003338:	f44f 609b 	mov.w	r0, #1240	; 0x4d8
 800333c:	f000 faf0 	bl	8003920 <malloc>
 8003340:	6020      	str	r0, [r4, #0]
		if (IK_CFG_KeyMapTable[i] == NULL)
 8003342:	2800      	cmp	r0, #0
 8003344:	d0f6      	beq.n	8003334 <_IK_CFG_AllocKeyMapTable.constprop.2+0x10>
	IK_CFG_KeyLayerCount = key_layer_size;
 8003346:	2201      	movs	r2, #1
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <_IK_CFG_AllocKeyMapTable.constprop.2+0x3c>)
	IK_CFG_SetFallbackKeyLayer(0);
 800334a:	2000      	movs	r0, #0
	IK_CFG_KeyLayerCount = key_layer_size;
 800334c:	701a      	strb	r2, [r3, #0]
	IK_CFG_SetFallbackKeyLayer(0);
 800334e:	f7ff ffdd 	bl	800330c <IK_CFG_SetFallbackKeyLayer>
	IK_CFG_CurrentKeyLayer = 0;
 8003352:	2000      	movs	r0, #0
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <_IK_CFG_AllocKeyMapTable.constprop.2+0x40>)
 8003356:	7018      	strb	r0, [r3, #0]
}
 8003358:	bd10      	pop	{r4, pc}
 800335a:	bf00      	nop
 800335c:	20000c08 	.word	0x20000c08
 8003360:	20000288 	.word	0x20000288
 8003364:	20000286 	.word	0x20000286

08003368 <IK_CFG_Init>:
{
 8003368:	b570      	push	{r4, r5, r6, lr}
	if (_IK_CFG_AllocKeyMapTable(1, IK_KEY_MAP_TABLE_MATRIX_SIZE) != 0)
 800336a:	f7ff ffdb 	bl	8003324 <_IK_CFG_AllocKeyMapTable.constprop.2>
 800336e:	4603      	mov	r3, r0
 8003370:	b978      	cbnz	r0, 8003392 <IK_CFG_Init+0x2a>
 8003372:	4602      	mov	r2, r0
		IK_CFG_KeyMapTable[0][i] = _IK_KeyMap_None;
 8003374:	4e08      	ldr	r6, [pc, #32]	; (8003398 <IK_CFG_Init+0x30>)
 8003376:	4d09      	ldr	r5, [pc, #36]	; (800339c <IK_CFG_Init+0x34>)
 8003378:	6831      	ldr	r1, [r6, #0]
 800337a:	680c      	ldr	r4, [r1, #0]
 800337c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003380:	4414      	add	r4, r2
 8003382:	3208      	adds	r2, #8
	for (uint16_t i = 0; i < IK_KEY_MAP_TABLE_MATRIX_SIZE; i++)
 8003384:	f5b2 6f9b 	cmp.w	r2, #1240	; 0x4d8
		IK_CFG_KeyMapTable[0][i] = _IK_KeyMap_None;
 8003388:	e884 0003 	stmia.w	r4, {r0, r1}
	for (uint16_t i = 0; i < IK_KEY_MAP_TABLE_MATRIX_SIZE; i++)
 800338c:	d1f4      	bne.n	8003378 <IK_CFG_Init+0x10>
}
 800338e:	4618      	mov	r0, r3
 8003390:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8003392:	2301      	movs	r3, #1
 8003394:	e7fb      	b.n	800338e <IK_CFG_Init+0x26>
 8003396:	bf00      	nop
 8003398:	20000c08 	.word	0x20000c08
 800339c:	20000058 	.word	0x20000058

080033a0 <IK_CFG_GetKeyLayerCount>:
}
 80033a0:	4b01      	ldr	r3, [pc, #4]	; (80033a8 <IK_CFG_GetKeyLayerCount+0x8>)
 80033a2:	7818      	ldrb	r0, [r3, #0]
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000288 	.word	0x20000288

080033ac <IK_CFG_GetKeyMap>:
	if (key_layer >= IK_CFG_KeyLayerCount)
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <IK_CFG_GetKeyMap+0x28>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	4283      	cmp	r3, r0
		key_layer = IK_CFG_FallbackKeyLayer;
 80033b2:	bf9c      	itt	ls
 80033b4:	4b08      	ldrls	r3, [pc, #32]	; (80033d8 <IK_CFG_GetKeyMap+0x2c>)
 80033b6:	7818      	ldrbls	r0, [r3, #0]
	if (matrix_id == 0 || IK_CFG_KeyMapTable == NULL)
 80033b8:	1e4b      	subs	r3, r1, #1
 80033ba:	2b99      	cmp	r3, #153	; 0x99
 80033bc:	d808      	bhi.n	80033d0 <IK_CFG_GetKeyMap+0x24>
 80033be:	4b07      	ldr	r3, [pc, #28]	; (80033dc <IK_CFG_GetKeyMap+0x30>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	b12b      	cbz	r3, 80033d0 <IK_CFG_GetKeyMap+0x24>
	IK_KeyMap_t* kl_map_table = IK_CFG_KeyMapTable[key_layer];
 80033c4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	if (kl_map_table == NULL)
 80033c8:	b110      	cbz	r0, 80033d0 <IK_CFG_GetKeyMap+0x24>
	return &kl_map_table[matrix_id];
 80033ca:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80033ce:	4770      	bx	lr
		return &_IK_KeyMap_None;
 80033d0:	4803      	ldr	r0, [pc, #12]	; (80033e0 <IK_CFG_GetKeyMap+0x34>)
}
 80033d2:	4770      	bx	lr
 80033d4:	20000288 	.word	0x20000288
 80033d8:	20000287 	.word	0x20000287
 80033dc:	20000c08 	.word	0x20000c08
 80033e0:	20000058 	.word	0x20000058

080033e4 <IK_CFG_LoadKeyMapToTable>:
{
 80033e4:	b513      	push	{r0, r1, r4, lr}
 80033e6:	ac02      	add	r4, sp, #8
 80033e8:	e904 000c 	stmdb	r4, {r2, r3}
	if ((key_layer >= IK_CFG_KeyLayerCount) || (matrix_id >= IK_KEY_MAP_TABLE_MATRIX_SIZE))
 80033ec:	4c07      	ldr	r4, [pc, #28]	; (800340c <IK_CFG_LoadKeyMapToTable+0x28>)
 80033ee:	7824      	ldrb	r4, [r4, #0]
 80033f0:	4284      	cmp	r4, r0
 80033f2:	d909      	bls.n	8003408 <IK_CFG_LoadKeyMapToTable+0x24>
 80033f4:	299a      	cmp	r1, #154	; 0x9a
 80033f6:	d807      	bhi.n	8003408 <IK_CFG_LoadKeyMapToTable+0x24>
	IK_CFG_KeyMapTable[key_layer][matrix_id] = key_map;
 80033f8:	4c05      	ldr	r4, [pc, #20]	; (8003410 <IK_CFG_LoadKeyMapToTable+0x2c>)
 80033fa:	6824      	ldr	r4, [r4, #0]
 80033fc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003400:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003404:	e881 000c 	stmia.w	r1, {r2, r3}
}
 8003408:	b002      	add	sp, #8
 800340a:	bd10      	pop	{r4, pc}
 800340c:	20000288 	.word	0x20000288
 8003410:	20000c08 	.word	0x20000c08

08003414 <IK_CFG_ReInitKeyMap>:
{
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_IK_CFG_FreeKeyMapTableMemory(IK_CFG_KeyLayerCount, IK_KEY_MAP_TABLE_MATRIX_SIZE);
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <IK_CFG_ReInitKeyMap+0x44>)
{
 8003418:	4607      	mov	r7, r0
	_IK_CFG_FreeKeyMapTableMemory(IK_CFG_KeyLayerCount, IK_KEY_MAP_TABLE_MATRIX_SIZE);
 800341a:	7818      	ldrb	r0, [r3, #0]
 800341c:	f7ff ff4c 	bl	80032b8 <_IK_CFG_FreeKeyMapTableMemory.isra.0>
	if (_IK_CFG_AllocKeyMapTable(1, IK_KEY_MAP_TABLE_MATRIX_SIZE) != 0)
 8003420:	f7ff ff80 	bl	8003324 <_IK_CFG_AllocKeyMapTable.constprop.2>
 8003424:	b9b0      	cbnz	r0, 8003454 <IK_CFG_ReInitKeyMap+0x40>
 8003426:	4603      	mov	r3, r0
			IK_CFG_KeyMapTable[i][j] = _IK_KeyMap_None;
 8003428:	f8df e034 	ldr.w	lr, [pc, #52]	; 8003460 <IK_CFG_ReInitKeyMap+0x4c>
 800342c:	4d0b      	ldr	r5, [pc, #44]	; (800345c <IK_CFG_ReInitKeyMap+0x48>)
	for (uint8_t i = 0; i < layer_count; i++)
 800342e:	b2da      	uxtb	r2, r3
 8003430:	4297      	cmp	r7, r2
 8003432:	d90f      	bls.n	8003454 <IK_CFG_ReInitKeyMap+0x40>
 8003434:	2200      	movs	r2, #0
 8003436:	009e      	lsls	r6, r3, #2
			IK_CFG_KeyMapTable[i][j] = _IK_KeyMap_None;
 8003438:	f8de 1000 	ldr.w	r1, [lr]
 800343c:	598c      	ldr	r4, [r1, r6]
 800343e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003442:	4414      	add	r4, r2
 8003444:	3208      	adds	r2, #8
		for (uint16_t j = 0; j < IK_KEY_MAP_TABLE_MATRIX_SIZE; j++)
 8003446:	f5b2 6f9b 	cmp.w	r2, #1240	; 0x4d8
			IK_CFG_KeyMapTable[i][j] = _IK_KeyMap_None;
 800344a:	e884 0003 	stmia.w	r4, {r0, r1}
		for (uint16_t j = 0; j < IK_KEY_MAP_TABLE_MATRIX_SIZE; j++)
 800344e:	d1f3      	bne.n	8003438 <IK_CFG_ReInitKeyMap+0x24>
 8003450:	3301      	adds	r3, #1
 8003452:	e7ec      	b.n	800342e <IK_CFG_ReInitKeyMap+0x1a>
 8003454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003456:	bf00      	nop
 8003458:	20000288 	.word	0x20000288
 800345c:	20000058 	.word	0x20000058
 8003460:	20000c08 	.word	0x20000c08

08003464 <_IK_Parser_ParseKeyStates>:
/* --------------------------------------------------------------
 * FUNCTION DEFINITIONS
 * ------------------------------------------------------------*/

void _IK_Parser_ParseKeyStates(uint8_t* pressedkeys_table, uint16_t pressedkeys_table_size)
{
 8003464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003468:	460c      	mov	r4, r1
 800346a:	4606      	mov	r6, r0
	// Index for filling the HID pressed keys buffer.
	uint16_t hid_pressedkeys_buffer_index = 0;
	// Buffer for setting new key layer to.
	uint8_t new_key_layer = IK_CFG_GetFallbackKeyLayer();
 800346c:	f7ff ff48 	bl	8003300 <IK_CFG_GetFallbackKeyLayer>

	// Clear the HID report pressed key table.
	memset(IK_HID_PressedKeys_Buffer, 0x00, IK_KEY_ROLLOVER);
 8003470:	2300      	movs	r3, #0
	// Clear the HID report modifier key buffer.
	for (uint8_t i = 0; i < 8; i++)
		IK_HID_ModifierKeys[i] = 0;
 8003472:	4a21      	ldr	r2, [pc, #132]	; (80034f8 <_IK_Parser_ParseKeyStates+0x94>)
	uint8_t new_key_layer = IK_CFG_GetFallbackKeyLayer();
 8003474:	4680      	mov	r8, r0
		IK_HID_ModifierKeys[i] = 0;
 8003476:	4619      	mov	r1, r3
 8003478:	4692      	mov	sl, r2
	memset(IK_HID_PressedKeys_Buffer, 0x00, IK_KEY_ROLLOVER);
 800347a:	4d20      	ldr	r5, [pc, #128]	; (80034fc <_IK_Parser_ParseKeyStates+0x98>)
 800347c:	602b      	str	r3, [r5, #0]
 800347e:	712b      	strb	r3, [r5, #4]
		IK_HID_ModifierKeys[i] = 0;
 8003480:	5499      	strb	r1, [r3, r2]
 8003482:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++)
 8003484:	2b08      	cmp	r3, #8
 8003486:	d1fb      	bne.n	8003480 <_IK_Parser_ParseKeyStates+0x1c>
 8003488:	3c01      	subs	r4, #1
 800348a:	1e77      	subs	r7, r6, #1

				if (hid_mod_metadata == NULL)
					break;

				// Set the HID modifier key to be active.
				IK_HID_ModifierKeys[hid_mod_metadata->HIDModifierCode] = 1;
 800348c:	f04f 0b01 	mov.w	fp, #1
 8003490:	4426      	add	r6, r4
	for (uint8_t i = 0; i < 8; i++)
 8003492:	2400      	movs	r4, #0
 8003494:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8003500 <_IK_Parser_ParseKeyStates+0x9c>
	for (uint16_t pk_idx = 0; pk_idx < pressedkeys_table_size; pk_idx++)
 8003498:	42b7      	cmp	r7, r6
 800349a:	d105      	bne.n	80034a8 <_IK_Parser_ParseKeyStates+0x44>
			break;
		}
	}

	// Send new HID report.
	IK_USBIF_SendHIDReport();
 800349c:	f000 f956 	bl	800374c <IK_USBIF_SendHIDReport>

	// Switch to new key layer (fallback if no key layer modifier is pressed)
	IK_CFG_CurrentKeyLayer = new_key_layer;
 80034a0:	f889 8000 	strb.w	r8, [r9]
 80034a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		IK_KeyMap_t* pressed_keymap = IK_CFG_GetKeyMap(IK_CFG_CurrentKeyLayer, pressed_keycode);
 80034a8:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 80034ac:	f899 0000 	ldrb.w	r0, [r9]
 80034b0:	f7ff ff7c 	bl	80033ac <IK_CFG_GetKeyMap>
		switch (pressed_keymap->Type)
 80034b4:	7803      	ldrb	r3, [r0, #0]
 80034b6:	b15b      	cbz	r3, 80034d0 <_IK_Parser_ParseKeyStates+0x6c>
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d1ed      	bne.n	8003498 <_IK_Parser_ParseKeyStates+0x34>
			IK_StaticMapMetadata_t* s_metadata = (IK_StaticMapMetadata_t*)pressed_keymap->Metadata;
 80034bc:	6843      	ldr	r3, [r0, #4]
			if (s_metadata == NULL)
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0ea      	beq.n	8003498 <_IK_Parser_ParseKeyStates+0x34>
			if (hid_pressedkeys_buffer_index < IK_KEY_ROLLOVER)
 80034c2:	2c04      	cmp	r4, #4
				IK_HID_PressedKeys_Buffer[hid_pressedkeys_buffer_index] = s_metadata->Keycode;
 80034c4:	bf9f      	itttt	ls
 80034c6:	781b      	ldrbls	r3, [r3, #0]
 80034c8:	552b      	strbls	r3, [r5, r4]
				hid_pressedkeys_buffer_index++;
 80034ca:	3401      	addls	r4, #1
 80034cc:	b2a4      	uxthls	r4, r4
 80034ce:	e7e3      	b.n	8003498 <_IK_Parser_ParseKeyStates+0x34>
			IK_ModifierMapMetadata_t* mod_metadata = (IK_ModifierMapMetadata_t*)pressed_keymap->Metadata;
 80034d0:	6843      	ldr	r3, [r0, #4]
			if (mod_metadata == NULL)
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0e0      	beq.n	8003498 <_IK_Parser_ParseKeyStates+0x34>
			switch (mod_metadata->ModifierType)
 80034d6:	781a      	ldrb	r2, [r3, #0]
 80034d8:	b13a      	cbz	r2, 80034ea <_IK_Parser_ParseKeyStates+0x86>
 80034da:	2a01      	cmp	r2, #1
 80034dc:	d1dc      	bne.n	8003498 <_IK_Parser_ParseKeyStates+0x34>
				kl_mod_metadata = (IK_KeyLayerModifierMetadata_t*)mod_metadata->ModifierMetadata;
 80034de:	685b      	ldr	r3, [r3, #4]
				if (kl_mod_metadata == NULL)
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0d9      	beq.n	8003498 <_IK_Parser_ParseKeyStates+0x34>
				new_key_layer = kl_mod_metadata->KeyLayer;
 80034e4:	f893 8000 	ldrb.w	r8, [r3]
				break;
 80034e8:	e7d6      	b.n	8003498 <_IK_Parser_ParseKeyStates+0x34>
				IK_HIDModifierMapMetadata_t* hid_mod_metadata = (IK_HIDModifierMapMetadata_t*)mod_metadata->ModifierMetadata;
 80034ea:	685b      	ldr	r3, [r3, #4]
				if (hid_mod_metadata == NULL)
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0d3      	beq.n	8003498 <_IK_Parser_ParseKeyStates+0x34>
				IK_HID_ModifierKeys[hid_mod_metadata->HIDModifierCode] = 1;
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	f80a b003 	strb.w	fp, [sl, r3]
				break;
 80034f6:	e7cf      	b.n	8003498 <_IK_Parser_ParseKeyStates+0x34>
 80034f8:	20000c0c 	.word	0x20000c0c
 80034fc:	20000c14 	.word	0x20000c14
 8003500:	20000286 	.word	0x20000286

08003504 <IK_HAL_SetMatrixProbeLine>:
	}
}

void IK_HAL_SetMatrixProbeLine(uint8_t probe_line, IK_LogicLevel_t state)
{
	if (probe_line >= IK_MATRIX_PROBE_LINE_COUNT)
 8003504:	2815      	cmp	r0, #21
{
 8003506:	b410      	push	{r4}
 8003508:	460a      	mov	r2, r1
	if (probe_line >= IK_MATRIX_PROBE_LINE_COUNT)
 800350a:	d80b      	bhi.n	8003524 <IK_HAL_SetMatrixProbeLine+0x20>
 800350c:	4c06      	ldr	r4, [pc, #24]	; (8003528 <IK_HAL_SetMatrixProbeLine+0x24>)
 800350e:	4b07      	ldr	r3, [pc, #28]	; (800352c <IK_HAL_SetMatrixProbeLine+0x28>)
		return;
	switch (state)
 8003510:	2901      	cmp	r1, #1
	case IK_LOGIC_LEVEL_HIGH:
		HAL_GPIO_WritePin(_PROBE_LINE(probe_line), GPIO_PIN_SET);
		break;
	case IK_LOGIC_LEVEL_LOW:
	default:
		HAL_GPIO_WritePin(_PROBE_LINE(probe_line), GPIO_PIN_RESET);
 8003512:	bf18      	it	ne
 8003514:	2200      	movne	r2, #0
 8003516:	f834 1010 	ldrh.w	r1, [r4, r0, lsl #1]
 800351a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		break;
	}
}
 800351e:	bc10      	pop	{r4}
		HAL_GPIO_WritePin(_PROBE_LINE(probe_line), GPIO_PIN_RESET);
 8003520:	f7fc bf7c 	b.w	800041c <HAL_GPIO_WritePin>
}
 8003524:	bc10      	pop	{r4}
 8003526:	4770      	bx	lr
 8003528:	08003b66 	.word	0x08003b66
 800352c:	08003b94 	.word	0x08003b94

08003530 <IK_HAL_ReadMatrixSenseLine>:

IK_LogicLevel_t IK_HAL_ReadMatrixSenseLine(uint8_t sense_line)
{
	if (sense_line >= IK_MATRIX_SENSE_LINE_COUNT)
 8003530:	2806      	cmp	r0, #6
{
 8003532:	b508      	push	{r3, lr}
	if (sense_line >= IK_MATRIX_SENSE_LINE_COUNT)
 8003534:	d80b      	bhi.n	800354e <IK_HAL_ReadMatrixSenseLine+0x1e>
		return IK_LOGIC_LEVEL_LOW;
	return HAL_GPIO_ReadPin(_SENSE_LINE(sense_line)) ? IK_LOGIC_LEVEL_HIGH : IK_LOGIC_LEVEL_LOW;
 8003536:	4b07      	ldr	r3, [pc, #28]	; (8003554 <IK_HAL_ReadMatrixSenseLine+0x24>)
 8003538:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <IK_HAL_ReadMatrixSenseLine+0x28>)
 800353e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003542:	f7fc ff65 	bl	8000410 <HAL_GPIO_ReadPin>
 8003546:	3000      	adds	r0, #0
 8003548:	bf18      	it	ne
 800354a:	2001      	movne	r0, #1
 800354c:	bd08      	pop	{r3, pc}
		return IK_LOGIC_LEVEL_LOW;
 800354e:	2000      	movs	r0, #0
}
 8003550:	bd08      	pop	{r3, pc}
 8003552:	bf00      	nop
 8003554:	08003bec 	.word	0x08003bec
 8003558:	08003bfc 	.word	0x08003bfc

0800355c <IK_STM32CUBE_USBD_HID_GetConfigDescriptor>:
 * Parameters
 * - uint16_t* length: Data length returned.
 */
static uint8_t* IK_STM32CUBE_USBD_HID_GetConfigDescriptor(uint16_t* length)
{
	*length = sizeof(IK_USB_ConfigurationDescriptor);
 800355c:	2329      	movs	r3, #41	; 0x29
 800355e:	8003      	strh	r3, [r0, #0]
	return IK_USB_ConfigurationDescriptor;
}
 8003560:	4800      	ldr	r0, [pc, #0]	; (8003564 <IK_STM32CUBE_USBD_HID_GetConfigDescriptor+0x8>)
 8003562:	4770      	bx	lr
 8003564:	20000060 	.word	0x20000060

08003568 <IK_STM32CUBE_USBD_HID_GetDeviceQualifierDescriptor>:
 * Parameters
 * - uint16_t* length: Data length returned.
 */
static uint8_t* IK_STM32CUBE_USBD_HID_GetDeviceQualifierDescriptor(uint16_t* length)
{
	*length = sizeof(IK_USB_DeviceQualifierDescriptor);
 8003568:	230a      	movs	r3, #10
 800356a:	8003      	strh	r3, [r0, #0]
	return IK_USB_DeviceQualifierDescriptor;
}
 800356c:	4800      	ldr	r0, [pc, #0]	; (8003570 <IK_STM32CUBE_USBD_HID_GetDeviceQualifierDescriptor+0x8>)
 800356e:	4770      	bx	lr
 8003570:	2000008c 	.word	0x2000008c

08003574 <IK_STM32CUBE_USBD_HID_DataIn>:
 * - USBD_HandleTypeDef* device: The device instance.
 * - uint8_t endpoint_num: The endpoint index.
 */
static uint8_t IK_STM32CUBE_USBD_HID_DataIn(USBD_HandleTypeDef* device, uint8_t endpoint_num)
{
	((IK_HID_DeviceHandle_t*) device->pClassData)->State = IK_HID_IDLE;
 8003574:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8003578:	2000      	movs	r0, #0
 800357a:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
	return USBD_OK;
}
 800357e:	4770      	bx	lr

08003580 <IK_STM32CUBE_USBD_HID_EP0RecieveReady>:
 *
 * Parameters
 * - USBD_HandleTypeDef* device: The device instance.
 */
static uint8_t IK_STM32CUBE_USBD_HID_EP0RecieveReady(USBD_HandleTypeDef* device)
{
 8003580:	b510      	push	{r4, lr}
	IK_HID_DeviceHandle_t* ikdev_handle = (IK_HID_DeviceHandle_t*) device->pClassData;
 8003582:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218

	if (ikdev_handle->IsReportAvailable == 1)
 8003586:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d106      	bne.n	800359a <IK_STM32CUBE_USBD_HID_EP0RecieveReady+0x1a>
	{
		((IK_HID_DeviceInterface_t*) device->pUserData)->OutEvent(ikdev_handle->ReportBuffer);
 800358c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003590:	4620      	mov	r0, r4
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4798      	blx	r3
		ikdev_handle->IsReportAvailable = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	65e3      	str	r3, [r4, #92]	; 0x5c
	}

	return USBD_OK;
}
 800359a:	2000      	movs	r0, #0
 800359c:	bd10      	pop	{r4, pc}

0800359e <IK_STM32CUBE_USBD_HID_DataOut>:
{
 800359e:	b538      	push	{r3, r4, r5, lr}
 80035a0:	4604      	mov	r4, r0
	((IK_HID_DeviceInterface_t*) device->pUserData)->OutEvent(ikdev_handle->ReportBuffer);
 80035a2:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
 80035a6:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80035aa:	4628      	mov	r0, r5
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	4798      	blx	r3
	USBD_LL_PrepareReceive(device, IK_HID_EPOUT_ADDR, ikdev_handle->ReportBuffer, IK_HID_OUT_REPORT_BUFFER_SIZE);
 80035b0:	2350      	movs	r3, #80	; 0x50
 80035b2:	462a      	mov	r2, r5
 80035b4:	2101      	movs	r1, #1
 80035b6:	4620      	mov	r0, r4
 80035b8:	f7ff fd90 	bl	80030dc <USBD_LL_PrepareReceive>
}
 80035bc:	2000      	movs	r0, #0
 80035be:	bd38      	pop	{r3, r4, r5, pc}

080035c0 <IK_STM32CUBE_USBD_HID_Setup>:
{
 80035c0:	b538      	push	{r3, r4, r5, lr}
	switch (request->bmRequest & USB_REQ_TYPE_MASK)
 80035c2:	780c      	ldrb	r4, [r1, #0]
{
 80035c4:	4605      	mov	r5, r0
	switch (request->bmRequest & USB_REQ_TYPE_MASK)
 80035c6:	f014 0460 	ands.w	r4, r4, #96	; 0x60
	IK_HID_DeviceHandle_t* ikdev_handle = (IK_HID_DeviceHandle_t*) device->pClassData;
 80035ca:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
	switch (request->bmRequest & USB_REQ_TYPE_MASK)
 80035ce:	d003      	beq.n	80035d8 <IK_STM32CUBE_USBD_HID_Setup+0x18>
 80035d0:	2c20      	cmp	r4, #32
 80035d2:	d02d      	beq.n	8003630 <IK_STM32CUBE_USBD_HID_Setup+0x70>
	return USBD_OK;
 80035d4:	2400      	movs	r4, #0
 80035d6:	e026      	b.n	8003626 <IK_STM32CUBE_USBD_HID_Setup+0x66>
		switch (request->bRequest)
 80035d8:	784a      	ldrb	r2, [r1, #1]
 80035da:	2a0a      	cmp	r2, #10
 80035dc:	d01e      	beq.n	800361c <IK_STM32CUBE_USBD_HID_Setup+0x5c>
 80035de:	2a0b      	cmp	r2, #11
 80035e0:	d023      	beq.n	800362a <IK_STM32CUBE_USBD_HID_Setup+0x6a>
 80035e2:	2a06      	cmp	r2, #6
 80035e4:	d11f      	bne.n	8003626 <IK_STM32CUBE_USBD_HID_Setup+0x66>
			if ((request->wValue >> 8) == IK_HID_REPORT_DESC_TYPE)
 80035e6:	884b      	ldrh	r3, [r1, #2]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	2b22      	cmp	r3, #34	; 0x22
 80035ec:	d10b      	bne.n	8003606 <IK_STM32CUBE_USBD_HID_Setup+0x46>
				length = MIN(IK_HID_REPORT_DESC_SIZE, request->wLength);
 80035ee:	88c8      	ldrh	r0, [r1, #6]
				buffer = ((IK_HID_DeviceInterface_t*) device->pUserData)->Report;
 80035f0:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				length = MIN(IK_HID_REPORT_DESC_SIZE, request->wLength);
 80035f4:	285b      	cmp	r0, #91	; 0x5b
 80035f6:	bf28      	it	cs
 80035f8:	205b      	movcs	r0, #91	; 0x5b
				buffer = ((IK_HID_DeviceInterface_t*) device->pUserData)->Report;
 80035fa:	6819      	ldr	r1, [r3, #0]
			USBD_CtlSendData(device, buffer, length);
 80035fc:	4602      	mov	r2, r0
			USBD_CtlSendData(device, (uint8_t*)&(ikdev_handle->IdleState), 1);
 80035fe:	4628      	mov	r0, r5
 8003600:	f7ff f904 	bl	800280c <USBD_CtlSendData>
 8003604:	e7e6      	b.n	80035d4 <IK_STM32CUBE_USBD_HID_Setup+0x14>
			else if ((request->wValue >> 8) == IK_HID_DESC_TYPE)
 8003606:	2b21      	cmp	r3, #33	; 0x21
 8003608:	d105      	bne.n	8003616 <IK_STM32CUBE_USBD_HID_Setup+0x56>
				length = MIN(IK_HID_DESC_SIZE, request->wLength);
 800360a:	88c8      	ldrh	r0, [r1, #6]
				buffer = IK_USB_HIDDescriptor;
 800360c:	491c      	ldr	r1, [pc, #112]	; (8003680 <IK_STM32CUBE_USBD_HID_Setup+0xc0>)
				length = MIN(IK_HID_DESC_SIZE, request->wLength);
 800360e:	2809      	cmp	r0, #9
 8003610:	bf28      	it	cs
 8003612:	2009      	movcs	r0, #9
 8003614:	e7f2      	b.n	80035fc <IK_STM32CUBE_USBD_HID_Setup+0x3c>
	uint16_t length = 0;
 8003616:	4620      	mov	r0, r4
	uint8_t* buffer = NULL;
 8003618:	4621      	mov	r1, r4
 800361a:	e7ef      	b.n	80035fc <IK_STM32CUBE_USBD_HID_Setup+0x3c>
			USBD_CtlSendData(device, (uint8_t*)&(ikdev_handle->AltSetting), 1);
 800361c:	2201      	movs	r2, #1
 800361e:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8003622:	f7ff f8f3 	bl	800280c <USBD_CtlSendData>
}
 8003626:	4620      	mov	r0, r4
 8003628:	bd38      	pop	{r3, r4, r5, pc}
			ikdev_handle->AltSetting = (uint8_t)(request->wValue);
 800362a:	788a      	ldrb	r2, [r1, #2]
 800362c:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 800362e:	e7fa      	b.n	8003626 <IK_STM32CUBE_USBD_HID_Setup+0x66>
		switch (request->bRequest)
 8003630:	784a      	ldrb	r2, [r1, #1]
 8003632:	3a02      	subs	r2, #2
 8003634:	2a09      	cmp	r2, #9
 8003636:	d81d      	bhi.n	8003674 <IK_STM32CUBE_USBD_HID_Setup+0xb4>
 8003638:	e8df f002 	tbb	[pc, r2]
 800363c:	1c1c0810 	.word	0x1c1c0810
 8003640:	141c1c1c 	.word	0x141c1c1c
 8003644:	050c      	.short	0x050c
			ikdev_handle->Protocol = (uint8_t)(request->wValue);
 8003646:	788a      	ldrb	r2, [r1, #2]
 8003648:	651a      	str	r2, [r3, #80]	; 0x50
 800364a:	e7c3      	b.n	80035d4 <IK_STM32CUBE_USBD_HID_Setup+0x14>
			USBD_CtlSendData(device, (uint8_t*)&(ikdev_handle->Protocol), 1);
 800364c:	2201      	movs	r2, #1
 800364e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8003652:	e7d4      	b.n	80035fe <IK_STM32CUBE_USBD_HID_Setup+0x3e>
			ikdev_handle->IdleState = (uint8_t)(request->wValue >> 8);
 8003654:	884a      	ldrh	r2, [r1, #2]
 8003656:	0a12      	lsrs	r2, r2, #8
 8003658:	655a      	str	r2, [r3, #84]	; 0x54
 800365a:	e7bb      	b.n	80035d4 <IK_STM32CUBE_USBD_HID_Setup+0x14>
			USBD_CtlSendData(device, (uint8_t*)&(ikdev_handle->IdleState), 1);
 800365c:	2201      	movs	r2, #1
 800365e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8003662:	e7cc      	b.n	80035fe <IK_STM32CUBE_USBD_HID_Setup+0x3e>
			ikdev_handle->IsReportAvailable = 1;
 8003664:	2201      	movs	r2, #1
			USBD_CtlPrepareRx(device, ikdev_handle->ReportBuffer, (uint8_t)(request->wLength));
 8003666:	4628      	mov	r0, r5
			ikdev_handle->IsReportAvailable = 1;
 8003668:	65da      	str	r2, [r3, #92]	; 0x5c
			USBD_CtlPrepareRx(device, ikdev_handle->ReportBuffer, (uint8_t)(request->wLength));
 800366a:	798a      	ldrb	r2, [r1, #6]
 800366c:	4619      	mov	r1, r3
 800366e:	f7ff f8e2 	bl	8002836 <USBD_CtlPrepareRx>
 8003672:	e7af      	b.n	80035d4 <IK_STM32CUBE_USBD_HID_Setup+0x14>
			USBD_CtlError(device, request);
 8003674:	4628      	mov	r0, r5
 8003676:	f7ff f8a2 	bl	80027be <USBD_CtlError>
			return USBD_FAIL;
 800367a:	2402      	movs	r4, #2
 800367c:	e7d3      	b.n	8003626 <IK_STM32CUBE_USBD_HID_Setup+0x66>
 800367e:	bf00      	nop
 8003680:	20000098 	.word	0x20000098

08003684 <IK_STM32CUBE_USBD_HID_DeInit>:
{
 8003684:	b510      	push	{r4, lr}
 8003686:	4604      	mov	r4, r0
	USBD_LL_CloseEP(device, IK_HID_EPIN_ADDR);
 8003688:	2181      	movs	r1, #129	; 0x81
 800368a:	f7ff fcd1 	bl	8003030 <USBD_LL_CloseEP>
	USBD_LL_CloseEP(device, IK_HID_EPOUT_ADDR);
 800368e:	2101      	movs	r1, #1
 8003690:	4620      	mov	r0, r4
 8003692:	f7ff fccd 	bl	8003030 <USBD_LL_CloseEP>
	if (device->pClassData != NULL)
 8003696:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800369a:	b153      	cbz	r3, 80036b2 <IK_STM32CUBE_USBD_HID_DeInit+0x2e>
		((IK_HID_DeviceInterface_t*) device->pUserData)->DeInit();
 800369c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	4798      	blx	r3
		USBD_free(device->pClassData);
 80036a4:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80036a8:	f7ff fd2a 	bl	8003100 <USBD_static_free>
		device->pClassData = NULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 80036b2:	2000      	movs	r0, #0
 80036b4:	bd10      	pop	{r4, pc}

080036b6 <IK_STM32CUBE_USBD_HID_Init>:
{
 80036b6:	b570      	push	{r4, r5, r6, lr}
 80036b8:	4605      	mov	r5, r0
	USBD_LL_OpenEP(device, IK_HID_EPIN_ADDR, USBD_EP_TYPE_INTR, IK_HID_EPIN_SIZE);
 80036ba:	230a      	movs	r3, #10
 80036bc:	2203      	movs	r2, #3
 80036be:	2181      	movs	r1, #129	; 0x81
 80036c0:	f7ff fca6 	bl	8003010 <USBD_LL_OpenEP>
	USBD_LL_OpenEP(device, IK_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, IK_HID_EPOUT_SIZE);
 80036c4:	230a      	movs	r3, #10
 80036c6:	2203      	movs	r2, #3
 80036c8:	2101      	movs	r1, #1
 80036ca:	4628      	mov	r0, r5
 80036cc:	f7ff fca0 	bl	8003010 <USBD_LL_OpenEP>
	device->pClassData = USBD_malloc(sizeof(IK_HID_DeviceHandle_t));
 80036d0:	2064      	movs	r0, #100	; 0x64
 80036d2:	f7ff fd11 	bl	80030f8 <USBD_static_malloc>
 80036d6:	4606      	mov	r6, r0
 80036d8:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
	if (device->pClassData == NULL)
 80036dc:	b170      	cbz	r0, 80036fc <IK_STM32CUBE_USBD_HID_Init+0x46>
	ikdev_handle->State = IK_HID_IDLE;
 80036de:	2400      	movs	r4, #0
	((IK_HID_DeviceInterface_t*) device->pUserData)->Init();
 80036e0:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
	ikdev_handle->State = IK_HID_IDLE;
 80036e4:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
	((IK_HID_DeviceInterface_t*) device->pUserData)->Init();
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4798      	blx	r3
	USBD_LL_PrepareReceive(device, IK_HID_EPOUT_ADDR, ikdev_handle->ReportBuffer, IK_HID_OUT_REPORT_BUFFER_SIZE);
 80036ec:	2350      	movs	r3, #80	; 0x50
 80036ee:	4632      	mov	r2, r6
 80036f0:	2101      	movs	r1, #1
 80036f2:	4628      	mov	r0, r5
 80036f4:	f7ff fcf2 	bl	80030dc <USBD_LL_PrepareReceive>
	return USBD_OK;
 80036f8:	4620      	mov	r0, r4
 80036fa:	bd70      	pop	{r4, r5, r6, pc}
		return USBD_FAIL;
 80036fc:	2002      	movs	r0, #2
}
 80036fe:	bd70      	pop	{r4, r5, r6, pc}

08003700 <IK_STM32CUBE_USBD_HID_SendReport>:
{
 8003700:	b510      	push	{r4, lr}
 8003702:	4613      	mov	r3, r2
	if (device->dev_state == USBD_STATE_CONFIGURED)
 8003704:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003708:	2a03      	cmp	r2, #3
 800370a:	d10b      	bne.n	8003724 <IK_STM32CUBE_USBD_HID_SendReport+0x24>
	IK_HID_DeviceHandle_t* ikdev_handle = (IK_HID_DeviceHandle_t*) device->pClassData;
 800370c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
		if (ikdev_handle->State == IK_HID_IDLE)
 8003710:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 8003714:	b932      	cbnz	r2, 8003724 <IK_STM32CUBE_USBD_HID_SendReport+0x24>
			ikdev_handle->State = IK_HID_BUSY;
 8003716:	2201      	movs	r2, #1
 8003718:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			USBD_LL_Transmit(device, IK_HID_EPIN_ADDR, report, report_length);
 800371c:	460a      	mov	r2, r1
 800371e:	2181      	movs	r1, #129	; 0x81
 8003720:	f7ff fcce 	bl	80030c0 <USBD_LL_Transmit>
}
 8003724:	2000      	movs	r0, #0
 8003726:	bd10      	pop	{r4, pc}

08003728 <IK_STM32CUBE_USBD_HID_RegisterInterface>:
	if (interface == NULL)
 8003728:	b119      	cbz	r1, 8003732 <IK_STM32CUBE_USBD_HID_RegisterInterface+0xa>
	device->pUserData = interface;
 800372a:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
	return USBD_OK;
 800372e:	2000      	movs	r0, #0
 8003730:	4770      	bx	lr
		return USBD_FAIL;
 8003732:	2002      	movs	r0, #2
}
 8003734:	4770      	bx	lr

08003736 <IK_USBD_HID_DeInit>:
 * USB HID Interface de-init.
 */
static int8_t IK_USBD_HID_DeInit(void)
{
	return USBD_OK;
}
 8003736:	2000      	movs	r0, #0
 8003738:	4770      	bx	lr

0800373a <IK_USBD_HID_OutEvent>:
/*
 * Description
 * USB HID Interface OUTEvent (Microcontroller Data-IN) Handler.
 */
static int8_t IK_USBD_HID_OutEvent(uint8_t* report_buffer)
{
 800373a:	b508      	push	{r3, lr}
	IK_USBIF_RecieveHIDReportCB(report_buffer, IK_HID_OUT_REPORT_BUFFER_SIZE);
 800373c:	2150      	movs	r1, #80	; 0x50
 800373e:	f000 f83f 	bl	80037c0 <IK_USBIF_RecieveHIDReportCB>
	return USBD_OK;
}
 8003742:	2000      	movs	r0, #0
 8003744:	bd08      	pop	{r3, pc}

08003746 <IK_USBD_HID_Init>:
 8003746:	2000      	movs	r0, #0
 8003748:	4770      	bx	lr
	...

0800374c <IK_USBIF_SendHIDReport>:
{
#if defined(IK_PLATFORM_STM32_CUBE)
	uint8_t hid_report_length = IK_KEY_ROLLOVER + 3;
	uint8_t hid_report_buffer[hid_report_length];

	hid_report_buffer[0] = 0x01; // Report ID: 1
 800374c:	2301      	movs	r3, #1
{
 800374e:	b507      	push	{r0, r1, r2, lr}
	hid_report_buffer[1] =
			(IK_NTH_BIT(IK_HID_MODIFIER_L_CTRL) * IK_HID_ModifierKeys[IK_HID_MODIFIER_L_CTRL]) |
			(IK_NTH_BIT(IK_HID_MODIFIER_L_SHIFT) * IK_HID_ModifierKeys[IK_HID_MODIFIER_L_SHIFT]) |
 8003750:	4a17      	ldr	r2, [pc, #92]	; (80037b0 <IK_USBIF_SendHIDReport+0x64>)
	hid_report_buffer[0] = 0x01; // Report ID: 1
 8003752:	f88d 3000 	strb.w	r3, [sp]
			(IK_NTH_BIT(IK_HID_MODIFIER_L_SHIFT) * IK_HID_ModifierKeys[IK_HID_MODIFIER_L_SHIFT]) |
 8003756:	7893      	ldrb	r3, [r2, #2]
			(IK_NTH_BIT(IK_HID_MODIFIER_L_CTRL) * IK_HID_ModifierKeys[IK_HID_MODIFIER_L_CTRL]) |
 8003758:	7851      	ldrb	r1, [r2, #1]
			(IK_NTH_BIT(IK_HID_MODIFIER_L_SHIFT) * IK_HID_ModifierKeys[IK_HID_MODIFIER_L_SHIFT]) |
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8003760:	7811      	ldrb	r1, [r2, #0]
			(IK_NTH_BIT(IK_HID_MODIFIER_R_GUI) * IK_HID_ModifierKeys[IK_HID_MODIFIER_R_GUI]);
	hid_report_buffer[2] = IK_HID_OEMReservedReportByte; // Second byte: OEMReserved

	for (uint8_t i = 0; i < IK_KEY_ROLLOVER; i++)
	{
		hid_report_buffer[3 + i] = IK_HID_PressedKeys_Buffer[i]; // Remaining bytes: Pressed keys
 8003762:	4814      	ldr	r0, [pc, #80]	; (80037b4 <IK_USBIF_SendHIDReport+0x68>)
			(IK_NTH_BIT(IK_HID_MODIFIER_L_SHIFT) * IK_HID_ModifierKeys[IK_HID_MODIFIER_L_SHIFT]) |
 8003764:	430b      	orrs	r3, r1
			(IK_NTH_BIT(IK_HID_MODIFIER_L_ALT) * IK_HID_ModifierKeys[IK_HID_MODIFIER_L_ALT]) |
 8003766:	78d1      	ldrb	r1, [r2, #3]
 8003768:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
			(IK_NTH_BIT(IK_HID_MODIFIER_L_GUI) * IK_HID_ModifierKeys[IK_HID_MODIFIER_L_GUI]) |
 800376c:	7911      	ldrb	r1, [r2, #4]
 800376e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
			(IK_NTH_BIT(IK_HID_MODIFIER_R_CTRL) * IK_HID_ModifierKeys[IK_HID_MODIFIER_R_CTRL]) |
 8003772:	7951      	ldrb	r1, [r2, #5]
 8003774:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
			(IK_NTH_BIT(IK_HID_MODIFIER_R_SHIFT) * IK_HID_ModifierKeys[IK_HID_MODIFIER_R_SHIFT]) |
 8003778:	7991      	ldrb	r1, [r2, #6]
			(IK_NTH_BIT(IK_HID_MODIFIER_R_ALT) * IK_HID_ModifierKeys[IK_HID_MODIFIER_R_ALT]) |
 800377a:	79d2      	ldrb	r2, [r2, #7]
			(IK_NTH_BIT(IK_HID_MODIFIER_R_SHIFT) * IK_HID_ModifierKeys[IK_HID_MODIFIER_R_SHIFT]) |
 800377c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
			(IK_NTH_BIT(IK_HID_MODIFIER_R_ALT) * IK_HID_ModifierKeys[IK_HID_MODIFIER_R_ALT]) |
 8003780:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
	hid_report_buffer[1] =
 8003784:	f88d 3001 	strb.w	r3, [sp, #1]
	hid_report_buffer[2] = IK_HID_OEMReservedReportByte; // Second byte: OEMReserved
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <IK_USBIF_SendHIDReport+0x6c>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	f88d 3002 	strb.w	r3, [sp, #2]
 8003790:	2300      	movs	r3, #0
		hid_report_buffer[3 + i] = IK_HID_PressedKeys_Buffer[i]; // Remaining bytes: Pressed keys
 8003792:	eb0d 0203 	add.w	r2, sp, r3
 8003796:	5c19      	ldrb	r1, [r3, r0]
 8003798:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < IK_KEY_ROLLOVER; i++)
 800379a:	2b05      	cmp	r3, #5
		hid_report_buffer[3 + i] = IK_HID_PressedKeys_Buffer[i]; // Remaining bytes: Pressed keys
 800379c:	70d1      	strb	r1, [r2, #3]
	for (uint8_t i = 0; i < IK_KEY_ROLLOVER; i++)
 800379e:	d1f8      	bne.n	8003792 <IK_USBIF_SendHIDReport+0x46>
	}

	// Send the HID report.
	IK_STM32CUBE_USBD_HID_SendReport(&hUsbDeviceFS, hid_report_buffer, hid_report_length);
 80037a0:	2208      	movs	r2, #8
 80037a2:	4669      	mov	r1, sp
 80037a4:	4805      	ldr	r0, [pc, #20]	; (80037bc <IK_USBIF_SendHIDReport+0x70>)
 80037a6:	f7ff ffab 	bl	8003700 <IK_STM32CUBE_USBD_HID_SendReport>
#endif
}
 80037aa:	b003      	add	sp, #12
 80037ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80037b0:	20000c0c 	.word	0x20000c0c
 80037b4:	20000c14 	.word	0x20000c14
 80037b8:	20000289 	.word	0x20000289
 80037bc:	20000384 	.word	0x20000384

080037c0 <IK_USBIF_RecieveHIDReportCB>:

void IK_USBIF_RecieveHIDReportCB(uint8_t* report_buf, uint16_t report_buf_size)
{
 80037c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80037c4:	4604      	mov	r4, r0
	if (report_buf_size > 0)
 80037c6:	b149      	cbz	r1, 80037dc <IK_USBIF_RecieveHIDReportCB+0x1c>
	{
		switch (report_buf[0])
 80037c8:	7803      	ldrb	r3, [r0, #0]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d106      	bne.n	80037dc <IK_USBIF_RecieveHIDReportCB+0x1c>
		{
		case IK_CFG_HID_REPORT_ID:
			// Config update report. (Data transfer report)
			if (report_buf_size > 1)
 80037ce:	2901      	cmp	r1, #1
 80037d0:	d904      	bls.n	80037dc <IK_USBIF_RecieveHIDReportCB+0x1c>
			{
				uint8_t cmd = report_buf[1];
				switch (cmd)
 80037d2:	7843      	ldrb	r3, [r0, #1]
 80037d4:	2b80      	cmp	r3, #128	; 0x80
 80037d6:	d004      	beq.n	80037e2 <IK_USBIF_RecieveHIDReportCB+0x22>
 80037d8:	2b81      	cmp	r3, #129	; 0x81
 80037da:	d049      	beq.n	8003870 <IK_USBIF_RecieveHIDReportCB+0xb0>
		default:
			// Non-registered keyboard HID report id.
			break;
		}
	}
}
 80037dc:	b002      	add	sp, #8
 80037de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (report_buf_size > 6)
 80037e2:	2906      	cmp	r1, #6
 80037e4:	d9fa      	bls.n	80037dc <IK_USBIF_RecieveHIDReportCB+0x1c>
						uint8_t map_key_layer = report_buf[2];
 80037e6:	f890 8002 	ldrb.w	r8, [r0, #2]
						uint16_t map_matrix_id = report_buf[4] + (report_buf[5] << 8);
 80037ea:	7905      	ldrb	r5, [r0, #4]
 80037ec:	7946      	ldrb	r6, [r0, #5]
						if (map_key_layer < IK_CFG_GetKeyLayerCount() && map_matrix_id < IK_KEY_MAP_TABLE_MATRIX_SIZE)
 80037ee:	f7ff fdd7 	bl	80033a0 <IK_CFG_GetKeyLayerCount>
 80037f2:	4580      	cmp	r8, r0
 80037f4:	d2f2      	bcs.n	80037dc <IK_USBIF_RecieveHIDReportCB+0x1c>
						uint16_t map_matrix_id = report_buf[4] + (report_buf[5] << 8);
 80037f6:	eb05 2506 	add.w	r5, r5, r6, lsl #8
 80037fa:	b2ad      	uxth	r5, r5
						if (map_key_layer < IK_CFG_GetKeyLayerCount() && map_matrix_id < IK_KEY_MAP_TABLE_MATRIX_SIZE)
 80037fc:	2d9a      	cmp	r5, #154	; 0x9a
 80037fe:	d8ed      	bhi.n	80037dc <IK_USBIF_RecieveHIDReportCB+0x1c>
							map.Metadata = NULL;
 8003800:	2300      	movs	r3, #0
							map.Type = report_buf[3];
 8003802:	78e7      	ldrb	r7, [r4, #3]
							map.Metadata = NULL;
 8003804:	9301      	str	r3, [sp, #4]
							switch (map.Type)
 8003806:	2f01      	cmp	r7, #1
 8003808:	d023      	beq.n	8003852 <IK_USBIF_RecieveHIDReportCB+0x92>
 800380a:	d30a      	bcc.n	8003822 <IK_USBIF_RecieveHIDReportCB+0x62>
 800380c:	2f02      	cmp	r7, #2
 800380e:	d029      	beq.n	8003864 <IK_USBIF_RecieveHIDReportCB+0xa4>
							IK_CFG_LoadKeyMapToTable(map_key_layer, map_matrix_id, map);
 8003810:	ab02      	add	r3, sp, #8
 8003812:	f803 7d08 	strb.w	r7, [r3, #-8]!
 8003816:	cb0c      	ldmia	r3, {r2, r3}
 8003818:	4629      	mov	r1, r5
 800381a:	4640      	mov	r0, r8
 800381c:	f7ff fde2 	bl	80033e4 <IK_CFG_LoadKeyMapToTable>
 8003820:	e7dc      	b.n	80037dc <IK_USBIF_RecieveHIDReportCB+0x1c>
								IK_ModifierMapMetadata_t* mod_metadata = (IK_ModifierMapMetadata_t*)malloc(sizeof(IK_ModifierMapMetadata_t));
 8003822:	2008      	movs	r0, #8
 8003824:	f000 f87c 	bl	8003920 <malloc>
								if (mod_metadata == NULL)
 8003828:	4606      	mov	r6, r0
 800382a:	2800      	cmp	r0, #0
 800382c:	d0f0      	beq.n	8003810 <IK_USBIF_RecieveHIDReportCB+0x50>
								mod_metadata->ModifierMetadata = NULL;
 800382e:	2300      	movs	r3, #0
								mod_metadata->ModifierType = report_buf[6];
 8003830:	79a0      	ldrb	r0, [r4, #6]
								mod_metadata->ModifierMetadata = NULL;
 8003832:	6073      	str	r3, [r6, #4]
								mod_metadata->ModifierType = report_buf[6];
 8003834:	7030      	strb	r0, [r6, #0]
								switch (mod_metadata->ModifierType)
 8003836:	b118      	cbz	r0, 8003840 <IK_USBIF_RecieveHIDReportCB+0x80>
 8003838:	2801      	cmp	r0, #1
 800383a:	d002      	beq.n	8003842 <IK_USBIF_RecieveHIDReportCB+0x82>
								map.Metadata = mod_metadata;
 800383c:	9601      	str	r6, [sp, #4]
								break;
 800383e:	e7e7      	b.n	8003810 <IK_USBIF_RecieveHIDReportCB+0x50>
									IK_HIDModifierMapMetadata_t* hid_mod_metadata = (IK_HIDModifierMapMetadata_t*)malloc(sizeof(IK_HIDModifierMapMetadata_t));
 8003840:	2001      	movs	r0, #1
									IK_KeyLayerModifierMetadata_t* kl_mod_metadata = (IK_KeyLayerModifierMetadata_t*)malloc(sizeof(IK_KeyLayerModifierMetadata_t));
 8003842:	f000 f86d 	bl	8003920 <malloc>
									if (kl_mod_metadata == NULL)
 8003846:	2800      	cmp	r0, #0
 8003848:	d0f8      	beq.n	800383c <IK_USBIF_RecieveHIDReportCB+0x7c>
									kl_mod_metadata->KeyLayer = report_buf[7];
 800384a:	79e3      	ldrb	r3, [r4, #7]
 800384c:	7003      	strb	r3, [r0, #0]
									mod_metadata->ModifierMetadata = kl_mod_metadata;
 800384e:	6070      	str	r0, [r6, #4]
									break;
 8003850:	e7f4      	b.n	800383c <IK_USBIF_RecieveHIDReportCB+0x7c>
								IK_StaticMapMetadata_t* s_metadata = (IK_StaticMapMetadata_t*)malloc(sizeof(IK_StaticMapMetadata_t));
 8003852:	4638      	mov	r0, r7
 8003854:	f000 f864 	bl	8003920 <malloc>
								if (s_metadata == NULL)
 8003858:	2800      	cmp	r0, #0
 800385a:	d0d9      	beq.n	8003810 <IK_USBIF_RecieveHIDReportCB+0x50>
								s_metadata->Keycode = report_buf[6];
 800385c:	79a3      	ldrb	r3, [r4, #6]
 800385e:	7003      	strb	r3, [r0, #0]
								map.Metadata = act_metadata;
 8003860:	9001      	str	r0, [sp, #4]
								break;
 8003862:	e7d5      	b.n	8003810 <IK_USBIF_RecieveHIDReportCB+0x50>
								IK_ActionMapMetadata_t* act_metadata = (IK_ActionMapMetadata_t*)malloc(sizeof(IK_ActionMapMetadata_t));
 8003864:	2000      	movs	r0, #0
 8003866:	f000 f85b 	bl	8003920 <malloc>
								if (act_metadata == NULL)
 800386a:	2800      	cmp	r0, #0
 800386c:	d1f8      	bne.n	8003860 <IK_USBIF_RecieveHIDReportCB+0xa0>
 800386e:	e7cf      	b.n	8003810 <IK_USBIF_RecieveHIDReportCB+0x50>
					if (report_buf_size > 2)
 8003870:	2902      	cmp	r1, #2
 8003872:	d0b3      	beq.n	80037dc <IK_USBIF_RecieveHIDReportCB+0x1c>
						IK_CFG_ReInitKeyMap(klc);
 8003874:	7880      	ldrb	r0, [r0, #2]
}
 8003876:	b002      	add	sp, #8
 8003878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						IK_CFG_ReInitKeyMap(klc);
 800387c:	f7ff bdca 	b.w	8003414 <IK_CFG_ReInitKeyMap>

08003880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003880:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003882:	e003      	b.n	800388c <LoopCopyDataInit>

08003884 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003886:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003888:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800388a:	3104      	adds	r1, #4

0800388c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800388c:	480a      	ldr	r0, [pc, #40]	; (80038b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800388e:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003890:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003892:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003894:	d3f6      	bcc.n	8003884 <CopyDataInit>
  ldr r2, =_sbss
 8003896:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003898:	e002      	b.n	80038a0 <LoopFillZerobss>

0800389a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800389a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800389c:	f842 3b04 	str.w	r3, [r2], #4

080038a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80038a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80038a4:	d3f9      	bcc.n	800389a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038a6:	f7ff fac1 	bl	8002e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038aa:	f000 f815 	bl	80038d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038ae:	f7ff f901 	bl	8002ab4 <main>
  bx lr
 80038b2:	4770      	bx	lr
  ldr r3, =_sidata
 80038b4:	08003c20 	.word	0x08003c20
  ldr r0, =_sdata
 80038b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80038bc:	200001ac 	.word	0x200001ac
  ldr r2, =_sbss
 80038c0:	200001ac 	.word	0x200001ac
  ldr r3, = _ebss
 80038c4:	20000c20 	.word	0x20000c20

080038c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038c8:	e7fe      	b.n	80038c8 <ADC1_2_IRQHandler>
	...

080038cc <__errno>:
 80038cc:	4b01      	ldr	r3, [pc, #4]	; (80038d4 <__errno+0x8>)
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000148 	.word	0x20000148

080038d8 <__libc_init_array>:
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	2500      	movs	r5, #0
 80038dc:	4e0c      	ldr	r6, [pc, #48]	; (8003910 <__libc_init_array+0x38>)
 80038de:	4c0d      	ldr	r4, [pc, #52]	; (8003914 <__libc_init_array+0x3c>)
 80038e0:	1ba4      	subs	r4, r4, r6
 80038e2:	10a4      	asrs	r4, r4, #2
 80038e4:	42a5      	cmp	r5, r4
 80038e6:	d109      	bne.n	80038fc <__libc_init_array+0x24>
 80038e8:	f000 f8ee 	bl	8003ac8 <_init>
 80038ec:	2500      	movs	r5, #0
 80038ee:	4e0a      	ldr	r6, [pc, #40]	; (8003918 <__libc_init_array+0x40>)
 80038f0:	4c0a      	ldr	r4, [pc, #40]	; (800391c <__libc_init_array+0x44>)
 80038f2:	1ba4      	subs	r4, r4, r6
 80038f4:	10a4      	asrs	r4, r4, #2
 80038f6:	42a5      	cmp	r5, r4
 80038f8:	d105      	bne.n	8003906 <__libc_init_array+0x2e>
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
 80038fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003900:	4798      	blx	r3
 8003902:	3501      	adds	r5, #1
 8003904:	e7ee      	b.n	80038e4 <__libc_init_array+0xc>
 8003906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800390a:	4798      	blx	r3
 800390c:	3501      	adds	r5, #1
 800390e:	e7f2      	b.n	80038f6 <__libc_init_array+0x1e>
 8003910:	08003c18 	.word	0x08003c18
 8003914:	08003c18 	.word	0x08003c18
 8003918:	08003c18 	.word	0x08003c18
 800391c:	08003c1c 	.word	0x08003c1c

08003920 <malloc>:
 8003920:	4b02      	ldr	r3, [pc, #8]	; (800392c <malloc+0xc>)
 8003922:	4601      	mov	r1, r0
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	f000 b85f 	b.w	80039e8 <_malloc_r>
 800392a:	bf00      	nop
 800392c:	20000148 	.word	0x20000148

08003930 <free>:
 8003930:	4b02      	ldr	r3, [pc, #8]	; (800393c <free+0xc>)
 8003932:	4601      	mov	r1, r0
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	f000 b80b 	b.w	8003950 <_free_r>
 800393a:	bf00      	nop
 800393c:	20000148 	.word	0x20000148

08003940 <memset>:
 8003940:	4603      	mov	r3, r0
 8003942:	4402      	add	r2, r0
 8003944:	4293      	cmp	r3, r2
 8003946:	d100      	bne.n	800394a <memset+0xa>
 8003948:	4770      	bx	lr
 800394a:	f803 1b01 	strb.w	r1, [r3], #1
 800394e:	e7f9      	b.n	8003944 <memset+0x4>

08003950 <_free_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4605      	mov	r5, r0
 8003954:	2900      	cmp	r1, #0
 8003956:	d043      	beq.n	80039e0 <_free_r+0x90>
 8003958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800395c:	1f0c      	subs	r4, r1, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	bfb8      	it	lt
 8003962:	18e4      	addlt	r4, r4, r3
 8003964:	f000 f8ae 	bl	8003ac4 <__malloc_lock>
 8003968:	4a1e      	ldr	r2, [pc, #120]	; (80039e4 <_free_r+0x94>)
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	4610      	mov	r0, r2
 800396e:	b933      	cbnz	r3, 800397e <_free_r+0x2e>
 8003970:	6063      	str	r3, [r4, #4]
 8003972:	6014      	str	r4, [r2, #0]
 8003974:	4628      	mov	r0, r5
 8003976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800397a:	f000 b8a4 	b.w	8003ac6 <__malloc_unlock>
 800397e:	42a3      	cmp	r3, r4
 8003980:	d90b      	bls.n	800399a <_free_r+0x4a>
 8003982:	6821      	ldr	r1, [r4, #0]
 8003984:	1862      	adds	r2, r4, r1
 8003986:	4293      	cmp	r3, r2
 8003988:	bf01      	itttt	eq
 800398a:	681a      	ldreq	r2, [r3, #0]
 800398c:	685b      	ldreq	r3, [r3, #4]
 800398e:	1852      	addeq	r2, r2, r1
 8003990:	6022      	streq	r2, [r4, #0]
 8003992:	6063      	str	r3, [r4, #4]
 8003994:	6004      	str	r4, [r0, #0]
 8003996:	e7ed      	b.n	8003974 <_free_r+0x24>
 8003998:	4613      	mov	r3, r2
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	b10a      	cbz	r2, 80039a2 <_free_r+0x52>
 800399e:	42a2      	cmp	r2, r4
 80039a0:	d9fa      	bls.n	8003998 <_free_r+0x48>
 80039a2:	6819      	ldr	r1, [r3, #0]
 80039a4:	1858      	adds	r0, r3, r1
 80039a6:	42a0      	cmp	r0, r4
 80039a8:	d10b      	bne.n	80039c2 <_free_r+0x72>
 80039aa:	6820      	ldr	r0, [r4, #0]
 80039ac:	4401      	add	r1, r0
 80039ae:	1858      	adds	r0, r3, r1
 80039b0:	4282      	cmp	r2, r0
 80039b2:	6019      	str	r1, [r3, #0]
 80039b4:	d1de      	bne.n	8003974 <_free_r+0x24>
 80039b6:	6810      	ldr	r0, [r2, #0]
 80039b8:	6852      	ldr	r2, [r2, #4]
 80039ba:	4401      	add	r1, r0
 80039bc:	6019      	str	r1, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	e7d8      	b.n	8003974 <_free_r+0x24>
 80039c2:	d902      	bls.n	80039ca <_free_r+0x7a>
 80039c4:	230c      	movs	r3, #12
 80039c6:	602b      	str	r3, [r5, #0]
 80039c8:	e7d4      	b.n	8003974 <_free_r+0x24>
 80039ca:	6820      	ldr	r0, [r4, #0]
 80039cc:	1821      	adds	r1, r4, r0
 80039ce:	428a      	cmp	r2, r1
 80039d0:	bf01      	itttt	eq
 80039d2:	6811      	ldreq	r1, [r2, #0]
 80039d4:	6852      	ldreq	r2, [r2, #4]
 80039d6:	1809      	addeq	r1, r1, r0
 80039d8:	6021      	streq	r1, [r4, #0]
 80039da:	6062      	str	r2, [r4, #4]
 80039dc:	605c      	str	r4, [r3, #4]
 80039de:	e7c9      	b.n	8003974 <_free_r+0x24>
 80039e0:	bd38      	pop	{r3, r4, r5, pc}
 80039e2:	bf00      	nop
 80039e4:	2000028c 	.word	0x2000028c

080039e8 <_malloc_r>:
 80039e8:	b570      	push	{r4, r5, r6, lr}
 80039ea:	1ccd      	adds	r5, r1, #3
 80039ec:	f025 0503 	bic.w	r5, r5, #3
 80039f0:	3508      	adds	r5, #8
 80039f2:	2d0c      	cmp	r5, #12
 80039f4:	bf38      	it	cc
 80039f6:	250c      	movcc	r5, #12
 80039f8:	2d00      	cmp	r5, #0
 80039fa:	4606      	mov	r6, r0
 80039fc:	db01      	blt.n	8003a02 <_malloc_r+0x1a>
 80039fe:	42a9      	cmp	r1, r5
 8003a00:	d903      	bls.n	8003a0a <_malloc_r+0x22>
 8003a02:	230c      	movs	r3, #12
 8003a04:	6033      	str	r3, [r6, #0]
 8003a06:	2000      	movs	r0, #0
 8003a08:	bd70      	pop	{r4, r5, r6, pc}
 8003a0a:	f000 f85b 	bl	8003ac4 <__malloc_lock>
 8003a0e:	4a23      	ldr	r2, [pc, #140]	; (8003a9c <_malloc_r+0xb4>)
 8003a10:	6814      	ldr	r4, [r2, #0]
 8003a12:	4621      	mov	r1, r4
 8003a14:	b991      	cbnz	r1, 8003a3c <_malloc_r+0x54>
 8003a16:	4c22      	ldr	r4, [pc, #136]	; (8003aa0 <_malloc_r+0xb8>)
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	b91b      	cbnz	r3, 8003a24 <_malloc_r+0x3c>
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f000 f841 	bl	8003aa4 <_sbrk_r>
 8003a22:	6020      	str	r0, [r4, #0]
 8003a24:	4629      	mov	r1, r5
 8003a26:	4630      	mov	r0, r6
 8003a28:	f000 f83c 	bl	8003aa4 <_sbrk_r>
 8003a2c:	1c43      	adds	r3, r0, #1
 8003a2e:	d126      	bne.n	8003a7e <_malloc_r+0x96>
 8003a30:	230c      	movs	r3, #12
 8003a32:	4630      	mov	r0, r6
 8003a34:	6033      	str	r3, [r6, #0]
 8003a36:	f000 f846 	bl	8003ac6 <__malloc_unlock>
 8003a3a:	e7e4      	b.n	8003a06 <_malloc_r+0x1e>
 8003a3c:	680b      	ldr	r3, [r1, #0]
 8003a3e:	1b5b      	subs	r3, r3, r5
 8003a40:	d41a      	bmi.n	8003a78 <_malloc_r+0x90>
 8003a42:	2b0b      	cmp	r3, #11
 8003a44:	d90f      	bls.n	8003a66 <_malloc_r+0x7e>
 8003a46:	600b      	str	r3, [r1, #0]
 8003a48:	18cc      	adds	r4, r1, r3
 8003a4a:	50cd      	str	r5, [r1, r3]
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f000 f83a 	bl	8003ac6 <__malloc_unlock>
 8003a52:	f104 000b 	add.w	r0, r4, #11
 8003a56:	1d23      	adds	r3, r4, #4
 8003a58:	f020 0007 	bic.w	r0, r0, #7
 8003a5c:	1ac3      	subs	r3, r0, r3
 8003a5e:	d01b      	beq.n	8003a98 <_malloc_r+0xb0>
 8003a60:	425a      	negs	r2, r3
 8003a62:	50e2      	str	r2, [r4, r3]
 8003a64:	bd70      	pop	{r4, r5, r6, pc}
 8003a66:	428c      	cmp	r4, r1
 8003a68:	bf0b      	itete	eq
 8003a6a:	6863      	ldreq	r3, [r4, #4]
 8003a6c:	684b      	ldrne	r3, [r1, #4]
 8003a6e:	6013      	streq	r3, [r2, #0]
 8003a70:	6063      	strne	r3, [r4, #4]
 8003a72:	bf18      	it	ne
 8003a74:	460c      	movne	r4, r1
 8003a76:	e7e9      	b.n	8003a4c <_malloc_r+0x64>
 8003a78:	460c      	mov	r4, r1
 8003a7a:	6849      	ldr	r1, [r1, #4]
 8003a7c:	e7ca      	b.n	8003a14 <_malloc_r+0x2c>
 8003a7e:	1cc4      	adds	r4, r0, #3
 8003a80:	f024 0403 	bic.w	r4, r4, #3
 8003a84:	42a0      	cmp	r0, r4
 8003a86:	d005      	beq.n	8003a94 <_malloc_r+0xac>
 8003a88:	1a21      	subs	r1, r4, r0
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	f000 f80a 	bl	8003aa4 <_sbrk_r>
 8003a90:	3001      	adds	r0, #1
 8003a92:	d0cd      	beq.n	8003a30 <_malloc_r+0x48>
 8003a94:	6025      	str	r5, [r4, #0]
 8003a96:	e7d9      	b.n	8003a4c <_malloc_r+0x64>
 8003a98:	bd70      	pop	{r4, r5, r6, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000028c 	.word	0x2000028c
 8003aa0:	20000290 	.word	0x20000290

08003aa4 <_sbrk_r>:
 8003aa4:	b538      	push	{r3, r4, r5, lr}
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	4c05      	ldr	r4, [pc, #20]	; (8003ac0 <_sbrk_r+0x1c>)
 8003aaa:	4605      	mov	r5, r0
 8003aac:	4608      	mov	r0, r1
 8003aae:	6023      	str	r3, [r4, #0]
 8003ab0:	f7ff f9a2 	bl	8002df8 <_sbrk>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d102      	bne.n	8003abe <_sbrk_r+0x1a>
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	b103      	cbz	r3, 8003abe <_sbrk_r+0x1a>
 8003abc:	602b      	str	r3, [r5, #0]
 8003abe:	bd38      	pop	{r3, r4, r5, pc}
 8003ac0:	20000c1c 	.word	0x20000c1c

08003ac4 <__malloc_lock>:
 8003ac4:	4770      	bx	lr

08003ac6 <__malloc_unlock>:
 8003ac6:	4770      	bx	lr

08003ac8 <_init>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	bf00      	nop
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr

08003ad4 <_fini>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr
